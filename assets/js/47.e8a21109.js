(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{329:function(n,v,_){"use strict";_.r(v);var A=_(17),P=Object(A.a)({},(function(){var n=this,v=n.$createElement,_=n._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("h1",{attrs:{id:"需背篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#需背篇"}},[n._v("#")]),n._v(" "),_("div",{staticStyle:{color:"lightblue","text-align":"center"}},[n._v("需背篇")])]),n._v(" "),_("h1",{attrs:{id:"简答题more"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简答题more"}},[n._v("#")]),n._v(" 简答题"),_("a",{attrs:{href:"https://github.com/lambertlt/lambertlt.github.io/raw/ff14cf6c34fea9a3827d11ad3864394241f2a71a/file/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AE%80%E7%AD%94%E9%A2%98%E6%80%BB%E7%BB%93.pdf",target:"_blank",rel:"noopener noreferrer"}},[n._v("more"),_("OutboundLink")],1)]),n._v(" "),_("hr"),n._v(" "),_("ol",[_("li",[_("p",[n._v("在基于8086的微计算机系统中，存储器是如何组织的？是如何与处理器总线连接的？信号起什么作用?")]),n._v(" "),_("p",[n._v("8086 为 16 位处理器，可访问 1M 字节的存储器空间；1M 字节的存储器分为两个 512K 字节的存储体，命名为偶字节体和奇字节体；(4 分)"),_("br"),n._v("\n偶体的数据线连接 D7~D0，选择信号接地址线 A0；奇体的数据线连接 D15~D8，选信号接BHE信号；(4 分)"),_("br"),n._v("\nBHE 信号有效时允许访问奇体中的高字节存储单元，实现 8086 的低字节访问、高节访问及字访问。(2 分)")])]),n._v(" "),_("li",[_("p",[n._v("简述主机与外设进行数据交换的几种方式。")]),n._v(" "),_("p",[n._v("主机与外设进行数据交换的常用方式有：无条件传送方式、程序查询方式、中断方式和 DMA 传送。(2 分)"),_("br"),n._v("\n无条件传送方式，常用于简单设备，处理器认为它们总是处于就绪状态，随时进行数据传送。(2 分)"),_("br"),n._v("\n程序查询方式：处理器首先查询外设工作状态，在外设就绪时进行数据传送。(2 分)"),_("br"),n._v("\n中断方式：外设在准备就绪的条件下通过请求引脚信号，主动向处理器提出交换数据的请求。处理器无其他更紧迫任务，则执行中断服务程序完成一次数据传送。(2 分)"),_("br"),n._v("\nDMA 传送： DMA 控制器可接管总线，作为总线的主控设备，通过系统总线来控制存储器和外设直接进行数据交换。此种方式适用于需要大量数据高速传送的场合。(2 分)")])]),n._v(" "),_("li",[_("p",[n._v("8086CPU 系统中为什么要用地址锁存器？当用74LS373芯片作为地址锁存器时需要多少片74LS373？")]),n._v(" "),_("p",[n._v("8086CPU 由于引脚数量少,其地址总线采用了分时复用的双重总线(A 19 -A16 /S6 -S3 和 AD15~AD0以及BHE /S7 )(2 分)；"),_("br"),n._v("\n仅在总线周期的 T l 时钟周期输出地址信号，而在整个总线周期中地址信号需保持不变，这就需用地址锁存器将 T1 周期发出的地址信号锁存起来以在整个总线周期中都能使用(3 分)；"),_("br"),n._v("\n为此8086CPU 在 T1 周期提供地址锁存允许信号 ALE(正脉冲)，用 ALE 的下降沿将地址信息锁存在地址锁存器中(2 分)。"),_("br"),n._v("\n共需 3 片 73LS373 芯片用作地址锁存器，锁存信息 A19~A0和BHE。(3 分)")])]),n._v(" "),_("li",[_("p",[n._v("简述存储系统的层次结构及各层存储部件的特点。")]),n._v(" "),_("p",[n._v("为解决容量．速度和价格的矛盾，存储系统采用金字塔型层次结构，单位价格和速度自上而下逐层减少，容量自上而下逐层增加。 (3 分)"),_("br"),n._v("\n存储系统的各层存储部件自上而下依次是：CPU 寄存器、高速缓存、主存存储器(RAM/ROM)，辅助存储器如磁盘、光盘等。 (3 分)"),_("br"),n._v("\nCPU 寄存器、高速缓存器集成在 CPU 芯片上，对用户来说，是透明的，它们用于暂存主存和处理器交互的数据，以减少频繁读取主存而影响处理器速度；(2 分)"),_("br"),n._v("\n主存储器则可和处理器直接交换数据，而辅助存储器必须经过主存存储器，才可与处理器进行数据交换。(2 分)")])]),n._v(" "),_("li",[_("p",[n._v("什么是接口？接口的基本功能是什么？")]),n._v(" "),_("p",[n._v("微机接口是位于主机与外设之间的一些转换电路的总称。(2 分)"),_("br"),n._v("\n通常接口具有以下功能："),_("br"),n._v("\n(1)设置数据的寄存、缓冲逻辑，以适应 CPU 与外设之间的速度差异，协调快速 CPU 与慢速的外设之间数据传送的矛盾和时序差异；"),_("br"),n._v("\n(2)能够进行信息格式的转换，例如串行和并行的转换；"),_("br"),n._v("\n(3)能够协调 CPU 和外设在信息的类型和电平高低方面的差异，如电平转换驱动、数/模或模/数转等；"),_("br"),n._v("\n(4)采集外设的信息传送给 CPU，接收 CPU 发出的控制命令及启动外设工作，设置中断和 DMA 控制逻辑。地址译码和设备选择功能，识别 CPU 要访问的外设。(8 分)")])]),n._v(" "),_("li",[_("p",[n._v("在计算机上运行汇编语言程序的步骤是什么？")]),n._v(" "),_("p",[n._v("(1)用编辑文件如 EDIT 编辑源文件，形成.ASM 文件；"),_("br"),n._v("\n(2)用汇编程序(MASM)把.ASM 源文件汇编成目标文件.OBJ；"),_("br"),n._v("\n(3)用连接程序(LINK)把.OBJ 文件转换成.EXE 可执行文件；"),_("br"),n._v("\n(4)运行可执行文件.EXE；(5)若有错，使用 DEBUG 进行调试。")])]),n._v(" "),_("li",[_("p",[n._v("CPU响应外部中断的条件是什么？简述中断处理过程")]),n._v(" "),_("p",[n._v("CPU 响应中断要有三个条件：外设提出中断申请；本中断位未被屏蔽；中断允许。(3 分)"),_("br"),n._v("\n可屏蔽中断处理的过程一般分成如下几步：(7 分)"),_("br"),n._v("\n中断请求、中断响应、保护现场、转入执行中断服务子程序、恢复现场和中断返回。"),_("br"),n._v("\nCPU 在响应外部中断，并转入相应中断服务子程序的过程中，要依次做以下工作：")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[n._v(" ⑴从数据总线上读取中断类型号，将其存入内部暂存器。  \n ⑵将标志寄存器 PSW 的值入栈。  \n ⑶将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。  \n ⑷保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断处理完毕后，能正确返回到主程序继续执行。  \n ⑸根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。  \n ⑹中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点处，继续执行原来的程序 \n")])])])]),n._v(" "),_("li",[_("p",[n._v("8086/8088执行了一个总线周期是指8088/8086做了哪些可能的操作？基本总线周期如何组成？在一个典型的读存储器总线周期中，地址信号，ALE信号，信号、数据信号分别在何时产生？")]),n._v(" "),_("p",[n._v("(1)“8086/8088 执行了一个总线周期”是指：①8086/8088 可能从片外的存储器取指令； ②8086/8088可能对片外的存储器或 I/O 接口进行了一次读/写数据的操作。"),_("br"),n._v("\n(2)基本总线周期由 T1 至 T4 四个时钟周期组成。"),_("br"),n._v("\n(3)在一个典型的读存储器总线周期中，地址信号在 T1 周期内产生，ALE 信号在 T1 周期内产生， RD信号在 T2 周期内产生，数据信号一般在 T3 周期内产生，若存储器在 T3 内来不及提供数据，8086/8088会在总线周期中的 T3 后插入等待状态 Tw，存储器将在某 Tw 中给出数据。")])]),n._v(" "),_("li",[_("p",[n._v("什么是中断类型码、中断向量、中断向量表、？在基于8086/8088的微机系统中，中断类型码和中断向量之间什么关系？")]),n._v(" "),_("p",[n._v("处理机可处理的每种中断的编号为中断类型码。中断向量是指中断处理程序的入口地址，由处理机自动寻址。中断向量表是存放所有类型中断处理程序入口地址的一个默认的内存区域。在 8086/8088 系统中，中断类型码乘 4 得到向量表的地址指针，从此处读出 4 字节内容即为中断向量。")])]),n._v(" "),_("li",[_("p",[n._v("比较8255A三种工作方式的应用场合有何区别？")]),n._v(" "),_("p",[n._v("方式 0 适用于同步传送和查询传送方式，方式 1 适用于外设在能提供选通信号或数据接收信号的场合，且采用中断传送方式比较方便；方式 2 适用于一个并行外设既可以作为输入设备，又可以作为输出设备，并且输入和输出不会同时进行的场合。"),_("br"),n._v("\n中断时为什么要安排中断优先级？什么情况下程序会发生嵌套？"),_("br"),n._v("\n处理器随时可能会收到多个中断源提出的中断请求，因此，为每个中断源分配一级中断优先权，根据它们的高低顺序决定响应的先后顺序。 必须在中断服务程序中开中断，程序才会发生中断嵌套。")])]),n._v(" "),_("li",[_("p",[n._v("在8086中，逻辑地址、偏移地址、物理地址分别指的是什么？具体说明\n逻辑地址是在程序中对存储器地址的一种表示方法，由段地址和段内偏移地址两部分组成，如 1234H：0088H；偏移地址是指段内某个存储单元相对该段首地址的差值，是一个 16 位的二进制代码；物理地址是8086 芯片引线送出的 20 位地址码，用来指出一个特定的存储单元。")])]),n._v(" "),_("li",[_("p",[n._v("外设向CPU申请中断，但CPU不响应，其原因有哪些可能？\n1)该中断请求持续时间太短；\n2)CPU 未能在当前指令周期的最后一个时钟周期采样到中断请求信号；\n3)CPU 处于关中断状态；4)该中断级被屏蔽。")])]),n._v(" "),_("li",[_("p",[n._v("何为可编程接口芯片?微机中使用的可编程接口芯片有哪些？\n可用编程的方法对接口功能进行选择和设定，这样的芯片称为可编程接口芯片。微机中使用的可编程接口芯片有：可编程中断控制器 8259A、可编程计数器/定时器 8253、可编程并行通信接口芯片 8255A、可编程串行异步通信接口芯片 8250、可编程直接内存访问控制器 8237A。")])]),n._v(" "),_("li",[_("p",[n._v("写出把首地址为BLOCK的子数组的第6个字送到DX寄存器的指令。要求使用以下2种寻址方式：寄存器间接寻址 (2)基址变址寻址\n(1)使用寄存器间接寻址：\nLEA BX，BLOCK\nADD BX，10\nMOV DX，[BX]          (2)使用基址变址寻址：\nLEA BX，BLOCK\nMOV SI，10\nMOV DX，[BX+SI]")])]),n._v(" "),_("li",[_("p",[n._v("简述在最小工作模式下，8086如何响应一个总线请求？\n外部总线主控模块经 HOLD 引线向 8086 发出总线请求信号；8086 在每个时钟周期的上升沿采样HOLD 引线；若发现 HOLD=1 则在当前总线周期结束时(T4 结束)发出总线请求的响应信号 HLDA；8086使地址、数据及控制总线进入高阻状态，让出总线控制权，完成响应过程。")])]),n._v(" "),_("li",[_("p",[n._v("在8086系统中，什么是逻辑地址和物理地址？他们之间的关系是什么？\n逻辑地址是 16 位的，允许在程序中编排的地址，由段地址和段内偏移地址两部分组成。物理地址是 20 位的，是信息存放在内存中的实际地址。物理地址是由逻辑地址的段地址左移 4 位加上偏移地址计算得到的，在 CPU 的地址加法器中实现。")])]),n._v(" "),_("li",[_("p",[n._v("同步传输方式和异步传输方式的特点各是什么？\n同步传输方式中发送方和接收方的时钟是统一的、字符与字符间的传输是同步无间隔的。异步传输方式并不要求发送方和接收方的时钟完全一样，字符与字符间的传输是异步的。")])]),n._v(" "),_("li",[_("p",[n._v("什么是PCI总线？什么是USB？\nPCI总线是微处理机机箱内的底板各个插件板的一种数据传输标准，32/64位标准总线。PCI 总线是同步且独立于微处理器的，具有即插即用的特性，允许任何微处理器通过桥接口连接到 PCI 总线上。\nUSB 是与系统之间、系统与外部设备之间的信息通道，USB 已成为目前电脑中的标准扩展接口，支持设备的即插即用的特性。")])]),n._v(" "),_("li",[_("p",[n._v("简述微机工作过程\n微机的工作过程就是执行程序的过程，而程序由指令序列组成。执行程序的过程，就是执行指令序列的过程。执行每一条指令，都包括取指令与执行指令两个基本阶段。\n因此微机的工作过程，也就是不断地取指令和执行指令的过程。\n在取指阶段，CPU 从内存中读出的内容必为指令，把它送至指令寄存器 IR，然后由指令译码器译码，控制器发出相应的控制信号，CPU 便知道该条指令要执行什么操作。\n在执指阶段，CPU 执行指令所规定的具体操作。当一条指令执行完毕后，就转入了下一条指令的取指阶段，周而复始地循环，一直进行到程序结束。")])]),n._v(" "),_("li",[_("p",[n._v("8086如何响应一个外部的INTR中断请求？\nINTR 可屏蔽中断的一般过程是：⑴中断请求:外设通过INTR引脚向CPU提出中断\n⑵中断响应：条件满足的情况下，8086 在连续的两个总线周期中发出INTA中断请求响应信号；\n⑶ 中断源识别：在第二个INTA信号期间，中断源经数据总线向 8086 发出一字节的中断类型码，8086 收到中断类型码后放入暂存器；\n⑷现场保护：将标志寄存器 PSW 的值入栈，将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。\n(5)保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断\n处理完毕后，能正确返回到主程序继续执行。\n(6)根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。\n(7)中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点\n处，继续执行原来的程序。\n21、8086系统中存储器的逻辑地址由哪两部分组成？物理地址由何器件生成？如何生成？每个段的逻辑地址与存储器之间有何对应关系？\n8086 系统中存储器的逻辑地址由段地址(段首址)和段内偏移地址(有效地址)两部分组成；存储单元的物理地址由地址加法器生成，寻址时，CPU 首先将段地址和段内偏移地址送入地址加法器，地址加法器将段地址左移 4 位并与段内偏移地址相加，得到一个 20 位的物理地址。数据段的段地址在 DS 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。代码段的段地址在 CS 寄存器中，段内偏移地址在 IP 寄存器中。堆栈段的段地址在 SS 寄存器中，段内偏移地址在 SP 寄存器中。扩展段的段地址在 ES 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。")])]),n._v(" "),_("li",[_("p",[n._v("简述8086内部中断的种类及特点.\n(1)内部中断又称软件中断，是通过软件调用的不可屏蔽中断，包括溢出中断、除法出错中断、单步中断、INT n 指令中断及单字节 INT 3断点中断。\n(2)中断类型码或者包含在指令中，或者是预先规定的；\n(3)不执行 INTA 总线周期；\n(4)除单步中断外，任何内部中断都无法禁止；(5)除单步中断外，任何内部中断的优先级都比任何外部中断的高。")])]),n._v(" "),_("li",[_("p",[n._v("8086处理器的输入控制信号RESET、READY、HOLD的含义各是什么？当他们有效时，8086CPU将出现何种反应？\nRESET：复位输入信号，高电平有效。该引脚有效时，将迫使 8086 处理器回到其初始状态；转为无效时，CPU 重新开始工作。(3 分)\nREADY：准备好信号，高电平有效的输入信号，表示存储器或 I/O 端口准备好。处理器的运行速度远远快与存储器和 I/O 端口，当处理器检测到 READY=0 时存储器或 I/O 端口不能按基本的总线周期进行数据交换时，需要插入一个等待状态 Tw，当处理器检测到 READY=1 时，可以进行数据交换时。(4 分)\nHOLD：总线请求，是一个高电平有效的输入信号。该引脚有效时，表示其他总线主控设备向处理器申请使用原来由处理器控制的总线。(3 分)")])]),n._v(" "),_("li",[_("p",[n._v("DRAM为什么要刷新？如何进行刷新？\n.DRAM 以单个 MOS 管为基本存储单元，以极间电容充放电表示两种逻辑状态。由于极间电容的容量很小，充电电荷自然泄漏会很快导致信息丢失，所以要不断对它进行刷新操作．即读取原内容．放大再写入。(5 分)\n存储系统的刷新控制电路提供刷新行地址，将DRAM 芯片中的某一行选中刷新。实际上，刷新\n控制电路是将刷新行地址同时送达存储系统中所有 DRAM 芯片，所有 DRAM 芯片都在同时进行一行的刷新操作。刷新控制电路设置每次行地址增量，并在一定时间间隔内启动一次刷新操作，就能够保证所有DRAM 芯片的所有存储单元得到及时刷新。(5 分)")])]),n._v(" "),_("li",[_("p",[n._v("一般接口电路中应具有哪些电路器件？\n(1)输入/输出数据锁存器和缓冲器，用于解决 CPU 与外设之间速度不匹配的矛盾，以及起隔离和缓冲的作用。(2)控制命令和状态寄存器，以存放 CPU 对外设的控制命令以及外设的状态信息。(3)地址译码器，用于选择接口电路中的不同端口(寄存器)。(4)读写控制逻辑。(5)中断控制逻辑。")])]),n._v(" "),_("li",[_("p",[n._v("比较串行通信与并行通讯的优缺点\n(1)从传送距离上看：并行通信适宜于近距离的数据传送，通常小于 30 米；而串行通信适宜于远距离的数据传送可以从几米到数千公里；\n(2)从传送速度上看：并行通信传送数据的速度比串行通信快得多；\n(3)从传送设备和费用上：在远距离传送中通信线路的费用占很大的比重，因而串行通信的费用由于传送线少而比并行通信的费用低得多。")])]),n._v(" "),_("li",[_("p",[n._v("8086CPU中有哪些寄存器？分别说明用途。哪些寄存器用来指示存储器单元的偏移地址？\n8086 CPU 中有 8 个通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI；两个控制寄存器 IP、FR；4 个段寄存器 CS、DS、SS、ES。8 个通用寄存器都可以用来暂存参加运算的数据或中间结果，但又有各自的专门用途。例如，AX 专用做累加器，某些指令指定用它存放操作数和运算结果；CX 为计数寄存器，在某些指令中做计数器使用；DX 为数据寄存器；BX 为基址寄存器，BP 为基址指针，SI 为源变址寄存器，DI 为目的变址寄存器，这 4 个寄存器在数据寻址中用来存放有效地址或段内偏移地址的一部分；\nSP 为堆栈指示器，用来存放栈顶有效地址。两个控制寄存器用来存放有关的状态信息和控制信息。例如，标志寄存器 FR 用来存放状态标志和控制标志；而指令指针用来存放下一条要取指令的有效地址。4 个段寄存器用来存放内存的段地址。")])]),n._v(" "),_("li",[_("p",[n._v("信号的作用是什么？试说明当起始地址为奇地址、偶地址、一次读写一个字节和一个字时，和A0的状态。\n信号的作用是高 8 位允许引脚。若为 0 则表示对一个字进行操作，即高 8 位有效，若为 1 则表示对一个字节进行操作，即高 8 位无效。当起始地址为奇地址时，一次读写一个字节时，为0，A0 状态为 1；当起始地址为偶地址时，一次读写一个字节时，为 1，A0 状态为 0；当起始地址为奇地址时，一次读写一个字时，为 0，A0 状态为 1；当起始地址为偶地址时，一次读写一个字时，为 0，A0 状态为 0。")])]),n._v(" "),_("li",[_("p",[n._v("简述8259A的基本组成部分。\n8259A 的基本组成有：①IRR，8 位中断请求寄存器，用来存放从外设来的中断请求信号 IR0 ~ IR7；\n②IMR，8 位中断屏蔽寄存器，用来存放 CPU 送来的屏蔽信号；\n③ISR，8 位中断服务寄存器，用来记忆正在处理中的中断请求；\n④PR，优先级判别器，也称优先级分析器；\n⑤控制逻辑；⑥数据总线缓冲器；⑦读/写逻辑；\n⑧级联缓冲器/比较器。其中，IRR、IMR、ISR、PR 和控制逻辑五个部分是实现中断优先管理的核心部件。")])]),n._v(" "),_("li",[_("p",[n._v("比较SRAM和DRAM的特点\nSRAM 特点：\n(1)存储的数据信息只要不断电，就不会丢失；不需要定时刷新，简化了外部电路。\n(2)相对动态 RAM，存取速度更快。\n(3)内部电路结构复杂，集成度较低，功耗较大，制造价格成本较高。\n(4)一般用作高速缓冲存储器(cache)。")])]),n._v(" "),_("li",[_("p",[n._v("DRAM 的特点主要有：\n(1)集成度高、功耗小，制作成本低，适合制作大规模和超大规模集成电路，微机内存储器几乎都是由DRAM 组成。\n(2)由于电容存在漏电现象，存储的数据不能长久保存，因此需要专门的动态刷新电路，定期给电容补充电荷，以避免存储数据的丢失或歧变。")])]),n._v(" "),_("li",[_("p",[n._v("简述中断传送方式和DMA传送方式相比有什么不同\n①中断方式通过程序实现数据传送，而 DMA 方式不使用程序直接靠硬件来实现，信息传送速度快。\n②CPU 对中断的响应是在执行完一条指令之后，而对 DMA 的响应则可以在指令执行过程中的任何两\n个存储周期之间，请求响应快。\n③中断方式必须切换程序，要进行 CPU 现场的保护和恢复操作。DMA 仅挪用了一个存储周期，不改变 CPU 现场，额外花销小。\n④DMA 请求的优先权比中断请求高。CPU 优先响应 DMA 请求，是为了避免 DMA 所连接的高速外设丢失数据。\n⑤中断方式不仅具有 I/O 数据传送能力，而且还能处理异常事件，DMA 只能进行 I/O 数据传送。\n总而言之，在进行 I/O 控制时，DMA 控制方式比程序中断控制方式速度快，但程序中断控制方式的应用范围比 DMA 控制方式广。")])]),n._v(" "),_("li",[_("p",[n._v("半导体存储器主要分为哪几类？简述他们的用途和区别\n按照存取方式分，半导体存储器主要分为随机存取存储器RAM(包括静态RAM和动态RAM)和只读存储器ROM(包括掩膜只读存储器，可编程只读存储器，可擦除只读存储器和电可擦除只读存储器)。\nRAM在程序执行过程中，能够通过指令随机地对其中每个存储单元进行读\\写操作。一般来说，RAM中存储的信息在断电后会丢失，是一种易失性存储器，RAM的用途主要是用来存放原始数据，中间结果或程序，与CPU或外部设备交换信息。\n而ROM在微机系统运行过程中，只能对其进行读操作，不能随机地进行写操作。断电后ROM中的信息不会消失，具有非易失性。ROM通常用来存放相对固定不变的程序、汉字字型库、字符及图形符号等。\n根据制造工艺的不同，随机读写存储器 RAM 主要有双极型和 MOS 型两类。双极型存储器具有存取速度快、集成度较低、功耗较大、成本较高等特点，适用于对速度要求较高的高速缓冲存储器；MOS 型\n存储器具有集成度高、功耗低、价格便宜等特点，适用于内存储器。")])]),n._v(" "),_("li",[_("p",[n._v("8086处理器的输入控制信号NMI和INTR的含义各是什么？当它们有效时，8086CPU将出现何种反应？以INTR为例，简述中断过程\nNMI:不可屏蔽中断请求，是一个利用上升沿有效的输入信号。该引脚信号有效时，表示外界向处理器申请不可屏蔽中断。\nINTR:可屏蔽中断请求，是一个利用高电平有效的输入信号。该引脚信号有效时，表示中断请求设备向处理器申请可屏蔽中断。\nINTR 可屏蔽中断的一般过程是：\n⑴中断请求:外设通过INTR引脚向CPU提出中断\n⑵中断响应：条件满足的情况下，8086 在连续的两个总线周期中发出INTA中断请求响应信号；\n⑶ 中断源识别：在第二个INTA信号期间，中断源经数据总线向 8086 发出一字节的中断类型码，8086 收到中断类型码后放入暂存器；\n⑷现场保护：将标志寄存器 PSW 的值入栈，将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。\n(5)保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断\n处理完毕后，能正确返回到主程序继续执行。\n(6)根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。\n(7)中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点\n处，继续执行原来的程序")])]),n._v(" "),_("li",[_("p",[n._v("简述8086和8088的区别\n8086：是完全16机内部寄存器和外部数据总线都是16位的。8088：寄存器是16位，外部数据总线是8位的。\n8086 有6字节的指令队列，8088 有4字节的指令队列\n8086有一条高八位数据总线允许引脚，8088没有。8086把1MB的存储器分为两个512K的存储体分别由起始地址和A0信号作为奇体和偶体的选通信号\n8086和8088的存储器和外设选择信号引脚不同。8086为M/ 8088为IO/。")])]),n._v(" "),_("li",[_("p",[n._v("简述触发器，寄存器和存储器之间的关系\n触发器是计算机记忆装置的基本单元，一个触发器只能存储一位二进制代码也为一个一位寄存器，多个触发器可构成多位寄存器,一个寄存器为一个存储单元，多个寄存器构成一个存储器。")])])])])}),[],!1,null,null,null);v.default=P.exports}}]);