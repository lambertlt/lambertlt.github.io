(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{321:function(s,n,a){"use strict";a.r(n);var t=a(17),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"c-语言笔记-专接本大纲中考核点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-语言笔记-专接本大纲中考核点"}},[s._v("#")]),s._v(" "),a("div",{staticStyle:{color:"lightblue","text-align":"center"}},[s._v("c 语言笔记-专接本大纲中考核点")])]),s._v(" "),a("h2",{attrs:{id:"一、c-语言程序的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、c-语言程序的结构"}},[s._v("#")]),s._v(" 一、c 语言程序的结构")]),s._v(" "),a("h4",{attrs:{id:"_1-理解-c-程序的基本结构及执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解-c-程序的基本结构及执行过程"}},[s._v("#")]),s._v(" 1. 理解 C 程序的基本结构及执行过程")]),s._v(" "),a("p",[s._v("编辑,预处理,编译,链接,执行"),a("br"),s._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/FYSGXFZ/article/details/80346347",target:"_blank",rel:"noopener noreferrer"}},[s._v("执行过程"),a("OutboundLink")],1),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_2-理解-c-程序中头文件、注释等概念-会在程序中正确使用文件包含命令以及添加注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解-c-程序中头文件、注释等概念-会在程序中正确使用文件包含命令以及添加注释"}},[s._v("#")]),s._v(" 2. 理解 C 程序中头文件、注释等概念,会在程序中正确使用文件包含命令以及添加注释")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/qihuanye-229110/p/11147469.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("头文件"),a("OutboundLink")],1),s._v('就是把""或者<>里面的文件展开在此处')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("常用头文件:\n\nstdio.h 标准输入输出\nstdlib.h 标准常用库\nstring.h 字符串函数库\nmath.h 数学库\nctype.h 字符函数库\ntime.h 时间库\nwindows.h 微软视窗库\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("单行注释: "),a("code",[s._v("// 后面写注释")]),a("br"),s._v("\n多行注释: "),a("code",[s._v("/* 里面写注释 */")])]),s._v(" "),a("h4",{attrs:{id:"_3-理解-c-函数的构成形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解-c-函数的构成形式"}},[s._v("#")]),s._v(" 3. 理解 C 函数的构成形式.")]),s._v(" "),a("p",[s._v("c 语言程序至少有一个 main() 且只能有一个(函数是 c 语言最小单位)"),a("br"),s._v("\n函数由两部份组成:函数头"),a("code",[s._v("void max( )")]),s._v("和函数体"),a("code",[s._v("{ } // 花括号内的称为函数体")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<stdio.h>\nint main()\n{\n  printf("first c program");\n  // 最简单的c程序\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"_4-了解-c-程序源代码的书写格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-了解-c-程序源代码的书写格式"}},[s._v("#")]),s._v(" 4. 了解 C 程序源代码的书写格式")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/piaocoder/article/details/45772087",target:"_blank",rel:"noopener noreferrer"}},[s._v("规范详见链接内"),a("OutboundLink")],1),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"二、数据类型及其运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、数据类型及其运算"}},[s._v("#")]),s._v(" 二、数据类型及其运算")]),s._v(" "),a("h4",{attrs:{id:"_1-掌握-c-语言的基本数据类型-了解不同数据类型常量的表示方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-掌握-c-语言的基本数据类型-了解不同数据类型常量的表示方法"}},[s._v("#")]),s._v(" 1. 掌握 C 语言的基本数据类型,了解不同数据类型常量的表示方法.")]),s._v(" "),a("p",[a("strong",[s._v("字符型")]),s._v(":描述单个字符 "),a("code",[s._v("char")])]),s._v(" "),a("p",[a("strong",[s._v("整型")]),s._v(":描述整数,整数在计算机上是准确表示的 "),a("code",[s._v("int")])]),s._v(" "),a("p",[a("strong",[s._v("浮点型、双精度型")]),s._v(":描述实数,实数在计算机上一般是近似表示的,浮点型的近似程度比较低,而双精度型的近似程度比较高 "),a("code",[s._v("float 、double")])]),s._v(" "),a("p",[a("strong",[s._v("无值类型")]),s._v(":没有具体的值,通常用来描述无形式参数或无返回值的 C 函数,以及无定向指针")]),s._v(" "),a("p",[a("strong",[s._v("逻辑型")]),s._v(":描述逻辑真(其值为 1)与逻辑假(其值为 0)")]),s._v(" "),a("p",[a("strong",[s._v("复数型")]),s._v(":描述复数(_complex)和纯虚数(_imaginary)使用逻辑型时必须包含头文件 stdbool.h,使用复数型时必须包含头文件 complex.h")]),s._v(" "),a("h4",{attrs:{id:"_2-掌握变量的定义、初始化和引用的基本方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-掌握变量的定义、初始化和引用的基本方法"}},[s._v("#")]),s._v(" 2. 掌握变量的定义、初始化和引用的基本方法.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("char a='a';\nint a=1;\nfloat a=1.11;\ndoublue a=1.11;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_3-在编程中会根据需要合理确定常量与变量的类型并正确使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-在编程中会根据需要合理确定常量与变量的类型并正确使用"}},[s._v("#")]),s._v(" 3. 在编程中会根据需要合理确定常量与变量的类型并正确使用.")]),s._v(" "),a("p",[s._v("根据变量范围选择不同的类型")]),s._v(" "),a("h4",{attrs:{id:"_4-理解各种运算符的优先级和结合性-掌握其构成表达式的语法表示和运算规则-会正确计算表达式的值-会根据需要书写正确的-c-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-理解各种运算符的优先级和结合性-掌握其构成表达式的语法表示和运算规则-会正确计算表达式的值-会根据需要书写正确的-c-表达式"}},[s._v("#")]),s._v(" 4. 理解各种运算符的优先级和结合性,掌握其构成表达式的语法表示和运算规则,会正确计算表达式的值,会根据需要书写正确的 C 表达式.")]),s._v(" "),a("p",[s._v("运算符 的优先级什么的 见链接内:"),a("br"),s._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/weixin_42510998/article/details/81145270",target:"_blank",rel:"noopener noreferrer"}},[s._v("详情点击链接"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[a("p",[s._v("表达式分为:")]),s._v(" "),a("ol",[a("li",[s._v("关系表达式")]),s._v(" "),a("li",[s._v("逻辑表达式")]),s._v(" "),a("li",[s._v("条件表达式")])]),s._v(" "),a("p",[s._v("赋值表达式"),a("br"),s._v("\n用赋值运算符将运算对象连接而成的式子成为赋值表达式 "),a("code",[s._v("k=(j+1);")]),s._v(" 由于赋值运算符是自右向左运算 所以等价于 "),a("code",[s._v("k=j=1;")])]),s._v(" "),a("p",[s._v("关系表达式"),a("br"),s._v("\n关系表达式就是用关系运算符将两个表达式连接起的式子，被连接的表达式可以是算数表达式、关系表达式、逻辑表达式、赋值表达式和字符表达式等"),a("br"),s._v("\n任何一个关系表达式的结果均为两个值:真和假，其中 1 代表真，0 代表假。")]),s._v(" "),a("p",[s._v("逻辑表达式"),a("br"),s._v("\n带有"),a("code",[s._v("&&(与、且) ||(或) !(非)")]),s._v("的表达式")]),s._v(" "),a("ol",[a("li",[s._v("&&"),a("br"),s._v("\n左右两侧都为真时，才是真，一假即为假")]),s._v(" "),a("li",[s._v("||"),a("br"),s._v("\n左右两侧一个为真即为真，全假才是假")])]),s._v(" "),a("p",[s._v("逗号表达式"),a("br"),s._v("\n一般形式 "),a("code",[s._v("表达式1，表达式2，表达式3...表达式n")]),a("br"),s._v("\n当逗号作为运算符使用时是一个双目运算符，其运算优先级是所有运算符中最低的。逗号运算符的运算顺序是自左向右的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  a = 2 * 6,a - 4,a + 15;\n/*\n  先算 2*6 并赋值给 a，再计算 a-4，最后计算 a+15，最终以 27 作为整个逗号表达式的值。需要注意的是 后两个表达式的值仅做了计算，而并没有赋值给 a 所以 a 的值仍然是 12\n*/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h4",{attrs:{id:"_5-了解表达式中不同类型数据间的自动转换规则-掌握强制类型转换的使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-了解表达式中不同类型数据间的自动转换规则-掌握强制类型转换的使用方法"}},[s._v("#")]),s._v(" 5. 了解表达式中不同类型数据间的自动转换规则,掌握强制类型转换的使用方法.")]),s._v(" "),a("p",[s._v("C 语言中自动转化规则")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/cqzzh.png",alt:"转化规则1"}}),s._v(" "),a("img",{attrs:{src:"/img/cqzzh1.jpg",alt:"转化规则2"}})]),s._v(" "),a("ol",[a("li",[a("p",[s._v("若参与运算量的类型不同,则先转换成同一类型,然后进行运算")])]),s._v(" "),a("li",[a("p",[s._v("转换按数据长度增加的方向进行,以保证精度不降低.如 int 型和 long 型运算时,先把 int 量转成 long 型后再进行运算")]),s._v(" "),a("ul",[a("li",[s._v("若两种类型的字节数不同,转换成字节数高的类型")]),s._v(" "),a("li",[s._v("若两种类型的字节数相同,且一种有符号,一种无符号,则转换成无符号类型")])])]),s._v(" "),a("li",[a("p",[s._v("所有的浮点运算都是以双精度进行的,即使是两个 float 单精度量运算的表达式,也要先转换成 double 型,再作运算.")])]),s._v(" "),a("li",[a("p",[s._v("char 型和 short 型参与运算时,必须先转换成 int 型")])]),s._v(" "),a("li",[a("p",[s._v("在赋值运算中,赋值号两边量的数据类型不同时,赋值号右边量的类型将转换为左边量的类型."),a("br"),s._v("\n如果右边量的数据类型长度左边长时,将丢失一部分数据,这样会降低精度,丢失的部分按四舍五入向前舍入")])])]),s._v(" "),a("p",[s._v("C 语言强制类型转换规则")]),s._v(" "),a("p",[s._v("强制类型转换 强制类型转换一般格式如下:(类型名)(表达式)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include <stdio.h>\nint main()\n{\n   int sum = 17, count = 5;\n   double mean;\n   mean = (double) sum / count;\n   printf("Value of mean : %f\\n", mean );\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这种强制类型转换操作并不改变操作数本身")]),s._v(" "),a("h2",{attrs:{id:"三、顺序结构程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、顺序结构程序设计"}},[s._v("#")]),s._v(" 三、顺序结构程序设计")]),s._v(" "),a("h4",{attrs:{id:"_1-了解-c-程序中常用的基本语句形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-了解-c-程序中常用的基本语句形式"}},[s._v("#")]),s._v(" 1. 了解 C 程序中常用的基本语句形式.")]),s._v(" "),a("p",[s._v("语句是一个程序逻辑的体现,它描述了程序.")]),s._v(" "),a("p",[s._v("从程序流程的角度来看,程序可以分为三种基本结构, 即顺序结构、分支(选择)结构、循环结构."),a("br"),s._v("\n这三种基本结构可以组成所有的各种复杂程序.")]),s._v(" "),a("p",[s._v("C 语言提供了多种语句来实现这些程序结构.")]),s._v(" "),a("p",[s._v("C 程序的执行部分是由语句组成的. 程序的功能也是由执行语句实现的.")]),s._v(" "),a("p",[s._v("C 语句可分为以下五类:"),a("br"),s._v("\n1.表达式语句")]),s._v(" "),a("p",[s._v("其一般形式为:表达式；执行表达式语句就是计算表达式的值\n例如:")]),s._v(" "),a("p",[a("code",[s._v("x=y+z；a=520；赋值语句")])]),s._v(" "),a("p",[s._v("2.函数调用语句")]),s._v(" "),a("p",[s._v("其一般形式为: 函数名(实际参数表)\n执行函数语句就是调用函数体并把实际参数赋予函数定义中的形式参数,然后执行被调函数体中的语句,求取函数值\n调用库函数,输出字符串\n例如:")]),s._v(" "),a("p",[a("code",[s._v('printf("a,b,c"); /*调用名为"printf"的函数*/')])]),s._v(" "),a("p",[s._v("3.控制语句")]),s._v(" "),a("p",[s._v("控制语句用于控制程序的流程, 以实现程序的各种结构方式.\n它们由特定的语句定义符组成.C 语言有九种控制语句. 可分成以下三类:")]),s._v(" "),a("ol",[a("li",[s._v("条件判断语句\nif,switch")]),s._v(" "),a("li",[s._v("循环执行语句\ndo while,while,for")]),s._v(" "),a("li",[s._v("转向语句\nbreak,go to,continue,return")])]),s._v(" "),a("p",[s._v("4.复合语句")]),s._v(" "),a("p",[s._v("把多个语句用括号{}括起来组成的一个语句称复合语句. 在程序中应把复合语句看成是单条语句,而不是多条语句\n例如:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  x=y+z；\n  a=b+c；\n  printf("%d%d",x,a);\n}\n// 复合语句内的各条语句都必须以分号";"结尾;此外,在括号"}"外不能加分号\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("5.空语句")]),s._v(" "),a("p",[s._v('只有分号";"组成的语句称为空语句\n空语句是什么也不执行的语句\n在程序中空语句可用来作空循环体')]),s._v(" "),a("p",[s._v("例如:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  while(getchar()!='\\n');\n// 本语句的功能是,只要从键盘输入的字符不是回车则重新输入 这里的循环体为空语句\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"_2-掌握使用-getchar-和-putchar-标准库函数实现字符数据输入与输出的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-掌握使用-getchar-和-putchar-标准库函数实现字符数据输入与输出的方法"}},[s._v("#")]),s._v(" 2. 掌握使用 getchar()和 putchar()标准库函数实现字符数据输入与输出的方法.")]),s._v(" "),a("p",[s._v("getchar()"),a("br"),s._v("\nC 库函数 int getchar(void) 从标准输入 stdin 获取一个字符(一个无符号字符)"),a("br"),s._v("\nC 库函数 int putchar(int char) 把参数 char 指定的字符(一个无符号字符)写入到标准输出 stdout 中")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  printf("请输入字符:");\n  c = getchar();\n\n  printf("输入的字符:");\n  putchar(c);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"_3-掌握使用-scanf-和-printf-标准函数实现不同类型数据的格式输入与输出的方法-在编程中会根据需要正确输入数据并合理设计输出格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-掌握使用-scanf-和-printf-标准函数实现不同类型数据的格式输入与输出的方法-在编程中会根据需要正确输入数据并合理设计输出格式"}},[s._v("#")]),s._v(" 3. 掌握使用 scanf()和 printf()标准函数实现不同类型数据的格式输入与输出的方法,在编程中会根据需要正确输入数据并合理设计输出格式.")]),s._v(" "),a("p",[s._v("C 库函数 int scanf(const char *format, ...) 从标准输入 stdin 读取格式化输入"),a("br"),s._v("\nC 库函数 int printf(const char *format, ...) 发送格式化输出到标准输出 stdout")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  int a,b;\n  printf("输入两个数");\n  scanf("%d%d",&a,&b);\n\n  printf("%d,%d",a,b);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("输出控制符有：")]),s._v(" "),a("p",[s._v("控制符 说明")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("%d    按十进制整型数据的实际长度输出。\n\n%ld   输出长整型数据。\n\n%md   m 为指定的输出字段的宽度。如果数据的位数小于 m，则左端补以空格，若大于 m，则按实际位数输出。\n\n%u    输出无符号整型（unsigned）。输出无符号整型时也可以用 %d，这时是将无符号转换成有符号数，然后输出。但编程的时候最好不要这么写， 因为这样要进行一次转换，使 CPU 多做一次无用功。\n\n%c    用来输出一个字符。\n\n%f    用来输出实数，包括单精度和双精度，以小数形式输出。不指定字段宽度，由系统自动指定，整数部分全部输出，小数部分输出 6 位，超过 6 位的四舍五入。\n\n%.mf  输出实数时小数点后保留 m 位，注意 m 前面有个点。\n\n%o    以八进制整数形式输出，这个就用得很少了，了解一下就行了。\n\n%s    用来输出字符串。用 %s 输出字符串同前面直接输出字符串是一样的。但是此时要先定义字符数组或字符指针存储或指向字符串，这个稍后再讲。\n\n%x（或 %X 或 %#x 或 %#X） 以十六进制形式输出整数，这个很重要。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h4",{attrs:{id:"_4-掌握使用顺序结构设计简单-c-程序的基本方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-掌握使用顺序结构设计简单-c-程序的基本方法"}},[s._v("#")]),s._v(" 4. 掌握使用顺序结构设计简单 C 程序的基本方法.")]),s._v(" "),a("p",[s._v("大概意思就是从上到下,依次执行的程序")]),s._v(" "),a("h2",{attrs:{id:"四、选择结构程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、选择结构程序设计"}},[s._v("#")]),s._v(" 四、选择结构程序设计")]),s._v(" "),a("h4",{attrs:{id:"_1-理解三种-if-语句的语法结构-掌握使用-if-语句设计选择结构程序的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解三种-if-语句的语法结构-掌握使用-if-语句设计选择结构程序的方法"}},[s._v("#")]),s._v(" 1. 理解三种 if 语句的语法结构,掌握使用 if 语句设计选择结构程序的方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 重点在于小括号里的条件判断\n  if(a>b)\n  {\n    a+=b;\n  }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"_2-理解-switch-语句的语法结构-掌握使用-switch-语句设计多分支选择结构程序的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解-switch-语句的语法结构-掌握使用-switch-语句设计多分支选择结构程序的方法"}},[s._v("#")]),s._v(" 2. 理解 switch 语句的语法结构,掌握使用 switch 语句设计多分支选择结构程序的方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  switch(1)\n  {\n    case 1 :\n      printf("1");\n      break;\n    case 2 :\n      printf("2");\n      break;\n    default :\n      printf("No");\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h4",{attrs:{id:"_3-了解嵌套选择结构语句的语法表示-会分析嵌套选择结构程序的执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-了解嵌套选择结构语句的语法表示-会分析嵌套选择结构程序的执行过程"}},[s._v("#")]),s._v(" 3. 了解嵌套选择结构语句的语法表示,会分析嵌套选择结构程序的执行过程")]),s._v(" "),a("p",[s._v('选择结构也称分支结构,就是让程序"拐弯",有选择性的执行代码'),a("br"),s._v("\n换句话说,可以跳过没用的代码,只执行有用的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('if(a>b)\n{\n  printf("a b");\n}else{\n  printf("a <b");\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"_4-会正确分析选择结构程序的执行过程-会合理选用语句形式设计正确的选择结构程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-会正确分析选择结构程序的执行过程-会合理选用语句形式设计正确的选择结构程序"}},[s._v("#")]),s._v(" 4. 会正确分析选择结构程序的执行过程,会合理选用语句形式设计正确的选择结构程序")]),s._v(" "),a("p",[s._v("3 和 4 差不多 不一一作答了 主要看程序怎么写")]),s._v(" "),a("h2",{attrs:{id:"五、循环结构程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、循环结构程序设计"}},[s._v("#")]),s._v(" 五、循环结构程序设计")]),s._v(" "),a("h4",{attrs:{id:"_1-理解-while、do-while-和-for-语句的语法结构-掌握使用三种循环语句设计循环结构程序的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解-while、do-while-和-for-语句的语法结构-掌握使用三种循环语句设计循环结构程序的方法"}},[s._v("#")]),s._v(" 1. 理解 while、do-while 和 for 语句的语法结构,掌握使用三种循环语句设计循环结构程序的方法")]),s._v(" "),a("p",[s._v("while")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  while(1)\n  {\n    printf("我是无限循环!!!!!!!!");\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("do-while")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  int i=0;\n  {\n    printf("我还是无限循环!!!!");\n  }while(i=0);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("for")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  for (int i=1;i<0;i++)\n  {\n    printf("我还是无限循环!!!!");\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_2-理解-continue-和-break-语句的语法结构-掌握其在循环结构程序中的使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解-continue-和-break-语句的语法结构-掌握其在循环结构程序中的使用方法"}},[s._v("#")]),s._v(" 2. 理解 continue 和 break 语句的语法结构,掌握其在循环结构程序中的使用方法")]),s._v(" "),a("p",[s._v("continue 只结束当前循环体"),a("br"),s._v("\nbreak 退出当前循环体")]),s._v(" "),a("h4",{attrs:{id:"_3-了解嵌套循环结构语句的语法表示-会正确分析嵌套循环结构程序的执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-了解嵌套循环结构语句的语法表示-会正确分析嵌套循环结构程序的执行过程"}},[s._v("#")]),s._v(" 3. 了解嵌套循环结构语句的语法表示,会正确分析嵌套循环结构程序的执行过程")]),s._v(" "),a("p",[s._v("主要看程序怎么写 不详细叙述")]),s._v(" "),a("h2",{attrs:{id:"六、数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、数组"}},[s._v("#")]),s._v(" 六、数组")]),s._v(" "),a("h4",{attrs:{id:"_1-掌握一维数组和字符数组的定义、初始化及其元素引用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-掌握一维数组和字符数组的定义、初始化及其元素引用的方法"}},[s._v("#")]),s._v(" 1. 掌握一维数组和字符数组的定义、初始化及其元素引用的方法")]),s._v(" "),a("p",[s._v("在 C 中要声明一个数组,需要指定元素的类型和元素的数量"),a("br"),s._v("\n二话不说上代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 数组声明\n  int arr[10];\n\n// 初始化\n  int arr[3]={1,2,3};\n\n// 没有写数组数量的话 花括号里面的数量就是 [] 里的\n  int arr[]={1,2,3};\n\n// 访问数组内的元素\n  printf("%d",arr[2]);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h4",{attrs:{id:"_2-熟悉二维数组的定义、初始化及其元素引用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-熟悉二维数组的定义、初始化及其元素引用的方法"}},[s._v("#")]),s._v(" 2. 熟悉二维数组的定义、初始化及其元素引用的方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 数组声明\n  int arr[10][20];\n\n// 初始化\n  1. int arr[3][2]={1,2,3,4,5,6};\n  2. int arr[3][2]={\n    {1,2,3},\n    {4,5,6}\n  }\n\n// 不写数组 行数量是可以的,因为 数组行数 = 数组元素 / 数组列数\n  int arr[][2]={1,2,3,4,5,6};\n\n// 访问数组内的元素\n  printf("%d",arr[2][3]);\n//表示访问第二行 第三个 元素\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h4",{attrs:{id:"_3-理解字符串的概念-掌握使用字符数组存储和操作字符串的方法-熟悉常用字符串处理函数-puts、gets、strcmp、strlen-的使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解字符串的概念-掌握使用字符数组存储和操作字符串的方法-熟悉常用字符串处理函数-puts、gets、strcmp、strlen-的使用方法"}},[s._v("#")]),s._v(" 3. 理解字符串的概念,掌握使用字符数组存储和操作字符串的方法,熟悉常用字符串处理函数(puts、gets、strcmp、strlen)的使用方法")]),s._v(" "),a("p",[s._v("字符串:"),a("br"),s._v("\n字符串实际上是使用 null 字符 '\\0' 终止的一维字符数组"),a("br"),s._v("\n因此,一个以 null 结尾的字符串,包含了组成字符串的字符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 字符串数组 声明\n  char china[6];\n\n// 初始化\n  char china[6]={'c', 'h', 'i', 'n', 'a', '\\0'};\n\n// 输出字符串\n  printf(\"%s\",china);\n\n// 修改字符串数组元素\n  char china[6]={'c', 'h', 'i', 'n', 'a', '\\0'};\n  china[3]='s';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("puts()"),a("br"),s._v("\nC 库函数 int puts(const char *str) 把一个字符串写入到标准输出 stdout,直到空字符,但不包括空字符.换行符会被追加到输出中.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  char china[6]={'c', 'h', 'i', 'n', 'a', '\\0'};\n  puts(china);\n\n// 输出结果: china\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("gets()"),a("br"),s._v("\nC 库函数 char *gets(char *str) 从标准输入 stdin 读取一行,并把它存储在 str 所指向的字符串中.当读取到换行符时,或者到达文件末尾时,它会停止,具体视情况而定")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  char china[6];\n  printf('请输入中国china');\n  gets(china);\n  puts(china);\n\n// 输出结果: china\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("strcmp()"),a("br"),s._v("\nC 库函数 int strcmp(const char *str1, const char *str2) 把 str1 所指向的字符串和 str2 所指向的字符串进行比较"),a("br"),s._v("\n注意:使用此函数要调用 字符串处理库函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include <stdio.h>\n  #include <string.h>\n  int main ()\n  {\n     char str1[15];\n     char str2[15];\n     int ret;\n     strcpy(str1, "abcdef");\n     strcpy(str2, "ABCDEF");\n     ret = strcmp(str1, str2);\n     if(ret < 0)\n     {\n        printf("str1 小于 str2");\n     }\n     else if(ret 0)\n     {\n        printf("str2 小于 str1");\n     }\n     else\n     {\n        printf("str1 等于 str2");\n     }\n     return(0);\n  }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("strlen()"),a("br"),s._v("\nC 库函数 size_t strlen(const char *str) 计算字符串 str 的长度,直到空结束字符,但不包括空结束字符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include <stdio.h>\n  #include <string.h>\n  int main ()\n  {\n    char str[50];\n    int len;\n    strcpy(str, "This is runoob.com");\n    len = strlen(str);\n    printf("|%s| 的长度是 |%d|\\n", str, len);\n    return(0);\n  }\n\n// 输出结果:|This is runoob.com| 的长度是 |18|\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("再补充一个"),a("br"),s._v("\nstrcat()")]),s._v(" "),a("h4",{attrs:{id:"_4-在编程中会使用数组正确处理同质数据的读写访问操作-会使用字符串处理函数操作字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-在编程中会使用数组正确处理同质数据的读写访问操作-会使用字符串处理函数操作字符串"}},[s._v("#")]),s._v(" 4. 在编程中会使用数组正确处理同质数据的读写访问操作,会使用字符串处理函数操作字符串")]),s._v(" "),a("p",[s._v("主要看程序怎么写 不详细叙述")]),s._v(" "),a("h2",{attrs:{id:"七、函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、函数"}},[s._v("#")]),s._v(" 七、函数")]),s._v(" "),a("p",[s._v("函数是一组一起执行一个任务的语句"),a("br"),s._v("\n每个 C 程序都至少有一个函数,即主函数 main()"),a("br"),s._v("\n先声明、定义、调用")]),s._v(" "),a("h4",{attrs:{id:"_1-理解函数定义的语法形式-掌握一般函数的定义方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解函数定义的语法形式-掌握一般函数的定义方法"}},[s._v("#")]),s._v(" 1. 理解函数定义的语法形式,掌握一般函数的定义方法")]),s._v(" "),a("p",[s._v("函数定义:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  int max(int a,int b)\n  {\n    int result;\n    if(a>b)\n    {\n      result = a;\n    }else{\n      result = b;\n    }\n    return result;\n  }\n\n// 此程序输出大的那个数\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("函数声明:\n在函数声明中,参数的名称并不重要,只有参数的类型是必需的,因此下面也是有效的声明")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  int max(int,int);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("调用函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  int c;\n  c=max(a, b);\n  printf("%d",c);\n\n输出结果: 较大的数\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"_2-理解函数的形式参数与实际参数、函数的返回值的概念和特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解函数的形式参数与实际参数、函数的返回值的概念和特点"}},[s._v("#")]),s._v(" 2. 理解函数的形式参数与实际参数、函数的返回值的概念和特点")]),s._v(" "),a("p",[s._v("形式参数:"),a("br"),s._v("\n形参就是定义函数时候的参数表,只是定义了参数表的结构和用来引用的名字,并没有具体的内容 在调用结束 形参会消失")]),s._v(" "),a("p",[s._v("实际参数:"),a("br"),s._v("\n实参是调用函数传递的具体数据 在调用结束 实参还会存在")]),s._v(" "),a("p",[s._v("返回值:"),a("br"),s._v("\n返回值把函数的处理结果数据返回给调用函数,即递归调用,所以一般把函数名变量称为返回值,函数的返回值类型是在定义函数时指定的")]),s._v(" "),a("p",[s._v("一个函数可以有返回值,也可以没有返回值")]),s._v(" "),a("ol",[a("li",[s._v("没有返回值的函数:功能只是完成一个操作,应将返回值类型定义为 void,函数体内可没有 return 语句.")]),s._v(" "),a("li",[s._v("有返回值的函数:函数的最后会有一个返回值 return,可以用来获取该函数执行结果返回给该函数,让外部调用该函数的.")])]),s._v(" "),a("p",[s._v("返回值可指定,如果不指定默认返回 None")]),s._v(" "),a("h4",{attrs:{id:"_3-理解函数调用的语法形式-理解函数原型的概念-掌握其声明方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解函数调用的语法形式-理解函数原型的概念-掌握其声明方法"}},[s._v("#")]),s._v(" 3. 理解函数调用的语法形式;理解函数原型的概念,掌握其声明方法")]),s._v(" "),a("p",[s._v("在 1. 中讲述了 调用的语法形式和声明方法")]),s._v(" "),a("p",[s._v("函数原型:"),a("br"),s._v("\n函数原型也叫函数声明,还叫引用说明"),a("br"),s._v("\n其目的是实现先调用函数,后定义函数")]),s._v(" "),a("p",[s._v("函数原型类似函数定义时的函数头\n为了能使函数在定义之前就能被调用,C++规定可以先说明函数原型,然后就可以调用函数\n函数定义可放在程序后面\n由于函数原型是一条语句,因此函数原型必须以分号结束\n函数原型由函数返回类型、函数名和参数表组成,它与函数定义的返回类型、函数名和参数表必须一致\n函数原型不必包含参数的名字,可只包含参数的类型\n例如: "),a("code",[s._v("int area (int, int )")]),s._v("\n等价于 "),a("code",[s._v("int area(int a,int b)")]),s._v("\n说明:系统标准函数并没有在包含文件中定义,而只是提供了函数原型\n在调用函数时,系统会正确地调用库函数\n注意:函数原型与函数定义必须一致,否则会引起编译错误")]),s._v(" "),a("h4",{attrs:{id:"_4-理解函数传值调用的参数传递机制和特点-会正确分析函数传值调用的执行过程-掌握使用函数的传值调用实现结构化程序设计的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-理解函数传值调用的参数传递机制和特点-会正确分析函数传值调用的执行过程-掌握使用函数的传值调用实现结构化程序设计的方法"}},[s._v("#")]),s._v(" 4. 理解函数传值调用的参数传递机制和特点,会正确分析函数传值调用的执行过程,掌握使用函数的传值调用实现结构化程序设计的方法")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/cike211/article/details/12857509",target:"_blank",rel:"noopener noreferrer"}},[s._v("内容过长详见链接"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"_5-了解函数嵌套调用的概念-会正确分析函数嵌套调用的执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-了解函数嵌套调用的概念-会正确分析函数嵌套调用的执行过程"}},[s._v("#")]),s._v(" 5. 了解函数嵌套调用的概念,会正确分析函数嵌套调用的执行过程")]),s._v(" "),a("p",[s._v("嵌套调用")]),s._v(" "),a("p",[s._v("C 语言中不允许作嵌套的函数定义.\n因此各函数之间是平行的,不存在上一级函数和下一级函数的问题\n但是 C 语言允许在一个函数的定义中出现对另一个函数的调用\n这样就出现了函数的嵌套调用\n即在被调函数中又调用其它函数\n这与其它语言的子程序嵌套的情形是类似的\n其关系可表示如图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://c.biancheng.net/cpp/uploads/allimg/120129/fsdsf454trykh.gif",alt:"关系"}})]),s._v(" "),a("h4",{attrs:{id:"_6-了解递归函数的概念-会正确分析递归函数调用的执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-了解递归函数的概念-会正确分析递归函数调用的执行过程"}},[s._v("#")]),s._v(" 6. 了解递归函数的概念,会正确分析递归函数调用的执行过程")]),s._v(" "),a("p",[s._v("递归函数"),a("br"),s._v("\n一个函数在它的函数体内调用它自身称为递归调用,这种函数称为递归函数\n执行递归函数将反复调用其自身,每调用一次就进入新的一层,当最内层的函数执行完毕后,再一层一层地由里到外退出")]),s._v(" "),a("p",[s._v("公式:")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://c.biancheng.net/cpp/uploads/allimg/150628/1-15062Q44533953.gif",alt:"公式"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//求n!\nlong factorial(int n){\n  long result;\n  if(n==0 || n==1){\n    result = 1;\n  }else{\n    result = factorial(n-1) * n;  // 递归调用\n  }\n  return result;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这是一个典型的递归函数.调用 factorial() 后即进入函数体,只有当 n==0 或 n==1 时函数才会执行结束,否则就一直调用它自身\n由于每次调用的实参为 n-1,即把 n-1 的值赋给形参 n,所以每次递归实参的值都减 1,直到最后 n-1 的值为 1 时再作递归调用,形参 n 的值也为 1,递归就终止了,会逐层退出")]),s._v(" "),a("h4",{attrs:{id:"_7-了解变量的作用域和生存期的概念-理解局部变量和全局变量的概念-掌握其使用方法-理解自动变量、静态局部变量的特点-掌握其使用方法-了解寄存器变量的使用方法-了解用-extern-声明外部变量的方法-会根据程序中变量的定义位置和声明方式正确分析变量的作用域和生存期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-了解变量的作用域和生存期的概念-理解局部变量和全局变量的概念-掌握其使用方法-理解自动变量、静态局部变量的特点-掌握其使用方法-了解寄存器变量的使用方法-了解用-extern-声明外部变量的方法-会根据程序中变量的定义位置和声明方式正确分析变量的作用域和生存期"}},[s._v("#")]),s._v(" 7. 了解变量的作用域和生存期的概念,理解局部变量和全局变量的概念,掌握其使用方法;理解自动变量、静态局部变量的特点,掌握其使用方法;了解寄存器变量的使用方法,了解用 extern 声明外部变量的方法,会根据程序中变量的定义位置和声明方式正确分析变量的作用域和生存期")]),s._v(" "),a("p",[s._v("看着都好尼玛难 想想算了吧")]),s._v(" "),a("h2",{attrs:{id:"八、预处理命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、预处理命令"}},[s._v("#")]),s._v(" 八、预处理命令")]),s._v(" "),a("p",[s._v("程序设计语言的预处理的概念：在编译之前进行的处理。")]),s._v(" "),a("p",[s._v("C 语言的预处理主要有三个方面的内容：")]),s._v(" "),a("ol",[a("li",[s._v("宏定义；")]),s._v(" "),a("li",[s._v("文件包含；")]),s._v(" "),a("li",[s._v("条件编译。")])]),s._v(" "),a("p",[s._v("预处理命令以符号“#”开头")]),s._v(" "),a("h4",{attrs:{id:"_1-了解编译预处理的概念、作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-了解编译预处理的概念、作用"}},[s._v("#")]),s._v(" 1. 了解编译预处理的概念、作用.")]),s._v(" "),a("p",[s._v("预处理编译的作用:")]),s._v(" "),a("ol",[a("li",[s._v('将源文件中以"include"格式包含的文件复制到编译的源文件中。')]),s._v(" "),a("li",[s._v('用实际值替换用"#define"定义的字符串。')]),s._v(" "),a("li",[s._v('根据"#if"后面的条件决定需要编译的代码。')])]),s._v(" "),a("h4",{attrs:{id:"_2-理解宏定义命令的语法形式-掌握不带参数以及带参数宏定义的使用方法-会分析宏定义命令在预编译时的宏展开过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解宏定义命令的语法形式-掌握不带参数以及带参数宏定义的使用方法-会分析宏定义命令在预编译时的宏展开过程"}},[s._v("#")]),s._v(" 2. 理解宏定义命令的语法形式,掌握不带参数以及带参数宏定义的使用方法,会分析宏定义命令在预编译时的宏展开过程.")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://www.360doc.com/content/15/0902/10/6959565_496416881.shtml",target:"_blank",rel:"noopener noreferrer"}},[s._v("宏定义相关见链接 三、"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"_3-了解文件包含命令的语法形式-在程序设计中会正确使用文件包含命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-了解文件包含命令的语法形式-在程序设计中会正确使用文件包含命令"}},[s._v("#")]),s._v(" 3. 了解文件包含命令的语法形式,在程序设计中会正确使用文件包含命令")]),s._v(" "),a("p",[s._v("在 C 语言中文件包含是指一个源文件可以将另一个源文件的全部内容包含进来。该命令的作用是在预编译时，将指定源文件的内容复制到当前文件中。文件包含是 C 语言预处理命令三个内容之一。")]),s._v(" "),a("p",[s._v("文件包含有两种格式，分别是："),a("code",[s._v('#include "file"')]),s._v(" 和 "),a("code",[s._v("#include <file>")])]),s._v(" "),a("p",[s._v("一般情况使用引号比较保险")]),s._v(" "),a("h2",{attrs:{id:"九、指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、指针"}},[s._v("#")]),s._v(" 九、指针")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/2062bf912a59",target:"_blank",rel:"noopener noreferrer"}},[s._v("void"),a("code",[s._v("*")]),s._v(" 指针、NULL 指针、零指针、野指针、悬垂指针"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"_1-了解指针的概念-理解指针运算符-和取地址运算符-的使用特点-掌握指向变量的指针变量的定义、赋值和引用的方法-理解指针的赋值运算和算术运算的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-了解指针的概念-理解指针运算符-和取地址运算符-的使用特点-掌握指向变量的指针变量的定义、赋值和引用的方法-理解指针的赋值运算和算术运算的规则"}},[s._v("#")]),s._v(" 1. 了解指针的概念,理解指针运算符"),a("code",[s._v("(*)")]),s._v("和取地址运算符"),a("code",[s._v("(&)")]),s._v("的使用特点,掌握指向变量的指针变量的定义、赋值和引用的方法,理解指针的赋值运算和算术运算的规则")]),s._v(" "),a("p",[a("code",[s._v("*")]),s._v("指针运算符(间接访问)\n"),a("code",[s._v("&")]),s._v("取地址运算符")]),s._v(" "),a("p",[s._v("注意:指针赋值只能是地址。 使用值时要用* 得到地址的内容 而& 可以得到内存地址")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 先声明 同时 初始化 在使用\n  int a = 3,*p = &a;\n  printf("%d",*p);\n// 结果: 3\n\n// 先声明 后 初始化 在使用\n  int *p,a = 3;\n  p = &a;\n  printf("%d",*p);\n\n// 结果: 3\n\n#include"stdio.h"\nvoid main()\n{\n    int a = 3,b = 2,c = 4,*p = &a,*p1 = &b,*p2 = &c;\n    printf("%d,%d",*p * *p1,*p * *p2);\n}\n\n// 结果: 6 12\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n#include <stdio.h>\nint main ()\n{\nint var1;\nchar var2[10];\nprintf("var1 变量的地址： %p\\n", &var1 );\nprintf("var2 变量的地址： %p\\n", &var2 );\nreturn 0;\n}\n\n// 结果\nvar1 变量的地址： 0x7fff5cc109d4\nvar2 变量的地址： 0x7fff5cc109de\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"_2-掌握指向一维数组的指针变量的定义、赋值和引用的方法-会正确运用指针变量间接访问一维数组的元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-掌握指向一维数组的指针变量的定义、赋值和引用的方法-会正确运用指针变量间接访问一维数组的元素"}},[s._v("#")]),s._v(" 2. 掌握指向一维数组的指针变量的定义、赋值和引用的方法,会正确运用指针变量间接访问一维数组的元素")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\ndouble \\*p;\ndouble arr[10];\n\np = arr;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("一旦您把第一个元素的地址存储在 p 中，您就可以使用"),a("code",[s._v("*p、*(p+1)、*(p+2)")]),s._v("等来访问数组元素")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n#include <stdio.h>\nint main ()\n{\n  int var = 20; /_ 实际变量的声明 _/\n  int _ip; /_ 指针变量的声明 _/\n  ip = &var; /_ 在指针变量中存储 var 的地址 _/\n  printf("Address of var variable: %p\\n", &var );\n  /_ 在指针变量中存储的地址 _/\n  printf("Address stored in ip variable: %p\\n", ip );\n  /_ 使用指针访问值 */\n  printf("Value of *ip variable: %d\\n", \\*ip );\n  return 0;\n}\n\n结果：\n  Address of var variable: bffd8b3c\n  Address stored in ip variable: bffd8b3c\n  Value of \\*ip variable: 20\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h4",{attrs:{id:"_3-掌握指向字符串的指针变量的定义、赋值和引用的方法-会正确运用指针变量间接访问字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-掌握指向字符串的指针变量的定义、赋值和引用的方法-会正确运用指针变量间接访问字符串"}},[s._v("#")]),s._v(" 3. 掌握指向字符串的指针变量的定义、赋值和引用的方法,会正确运用指针变量间接访问字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include<stdio.h>\n  void main()\n  {\n    char arr[] = "china",*p = arr;\n    printf("%s,%s",p,p[1]);\n  }\n\n  结果:\n      china h\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"_4-理解使用指针变量、数组名作为参数的函数调用的机制和特点-掌握函数的传址调用的使用方法-会正确分析函数传址调用的执行过程-在编程中会根据需要设计合理的传址调用函数并进行正确调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-理解使用指针变量、数组名作为参数的函数调用的机制和特点-掌握函数的传址调用的使用方法-会正确分析函数传址调用的执行过程-在编程中会根据需要设计合理的传址调用函数并进行正确调用"}},[s._v("#")]),s._v(" 4. 理解使用指针变量、数组名作为参数的函数调用的机制和特点,掌握函数的传址调用的使用方法,会正确分析函数传址调用的执行过程,在编程中会根据需要设计合理的传址调用函数并进行正确调用")]),s._v(" "),a("h4",{attrs:{id:"_5-了解返回指针值的函数的概念-熟悉指针数组、指向指针的指针概念和使用方法-会使用指针数组和二级指针间接访问二维数组元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-了解返回指针值的函数的概念-熟悉指针数组、指向指针的指针概念和使用方法-会使用指针数组和二级指针间接访问二维数组元素"}},[s._v("#")]),s._v(" 5. 了解返回指针值的函数的概念,熟悉指针数组、指向指针的指针概念和使用方法,会使用指针数组和二级指针间接访问二维数组元素")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include<stido.h>\n  int max(int a, int b)\n  {\n    int *p;\n    if(a > b)\n    {\n      p = &a;\n    }else\n    {\n      p = &b;\n    }\n    return *p;\n  }\n  int main()\n  {\n    int c = max (3,4);\n    prinf("%d",c);\n  }\n\n  结果:\n    4\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"十、结构体与共用体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、结构体与共用体"}},[s._v("#")]),s._v(" 十、结构体与共用体")]),s._v(" "),a("p",[s._v("tip:")]),s._v(" "),a("p",[s._v("结构体 和结构体变量")]),s._v(" "),a("ol",[a("li",[s._v("结构体 是一个类型 类似于 int float double")]),s._v(" "),a("li",[s._v("结构体变量 是实实在在的数据 就像 int a = 3; 里的 a")])]),s._v(" "),a("h4",{attrs:{id:"_1-了解和区分结构体和共用体的概念-掌握结构体类型的定义方法-以及结构体变量的定义、初始化和成员引用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-了解和区分结构体和共用体的概念-掌握结构体类型的定义方法-以及结构体变量的定义、初始化和成员引用的方法"}},[s._v("#")]),s._v(" 1. 了解和区分结构体和共用体的概念,掌握结构体类型的定义方法,以及结构体变量的定义、初始化和成员引用的方法")]),s._v(" "),a("p",[s._v("结构体和共用体的区别:"),a("br"),s._v("\n结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。")]),s._v(" "),a("p",[s._v("结构体占用的内存大于等于所有成员占用的内存的总和（成员之间可能会存在缝隙），共用体占用的内存等于最长的成员占用的内存。共用体使用了内存覆盖技术，同一时刻只能保存一个成员的值，如果对新的成员赋值，就会把原来成员的值覆盖掉。")]),s._v(" "),a("p",[s._v("结构体的定义，初始化，引用示例:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  \x3c!-- 不重定义结构体变量名 --\x3e\n\n  #include <stdio.h>\n  #include <string.h>\n  struct people\n  {\n      char id[10];\n      char name[100];\n  };\n  int main()\n  {\n      struct people sister;\n      strcpy(sister.id, "1");\n      strcpy(sister.name, "sister");\n      printf("%s%s", sister.id, sister.name);\n  }\n\n  结果:\n    1sister\n  \x3c!-- 重定义结构体变量名 --\x3e\n\n  #include<stdio.h>\n  #include<string.h>\n  typedef struct  // 重定义变量名 typedef\n  {\n    char title[50];\n    char author[50];\n    int id;\n  } books;\n  int main()\n  {\n    books book1;\n    strcpy(book1.title,"c++");\n    strcpy(book1.author,"lambert");\n    id = 1;\n    printf("id is:%d\\ntitle is:%s\\nauthor is:%s",book1.id,book1.title,book1.author);\n  }\n\n  结果:\n    id is:1\n    title is:c++\n    author is:lambert\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br")])]),a("h4",{attrs:{id:"_2-掌握结构体数组的定义、初始化和引用数组元素及其成员的方法-会正确运用结构体数组处理异质数据的存储和访问操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-掌握结构体数组的定义、初始化和引用数组元素及其成员的方法-会正确运用结构体数组处理异质数据的存储和访问操作"}},[s._v("#")]),s._v(" 2. 掌握结构体数组的定义、初始化和引用数组元素及其成员的方法,会正确运用结构体数组处理异质数据的存储和访问操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include<stdio.h>\n  #include<string.h>\n  typedef struct\n  {\n      char xingbie[20];\n      int age;\n  } people;\n  int main()\n  {\n      people people[10]; // 这个就是结构体数组 数组内每个元素都是 结构体\n      for(int i = 0;i < 10;i++)\n      {\n          if(i % 2 ==0)\n          strcpy(people[i].xingbie,"man");\n          else\n          strcpy(people[i].xingbie,"woman");\n          people[i].age = i;\n      }\n      for(int i = 0;i < 10;i++)\n      {\n          printf("xingbie is :%6s\\tage is :%3d\\n",people[i].xingbie,people[i].age);\n      }\n  }\n\n结果:\n  xingbie is :   man\tage is :  0\n  xingbie is : woman\tage is :  1\n  xingbie is :   man\tage is :  2\n  xingbie is : woman\tage is :  3\n  xingbie is :   man\tage is :  4\n  xingbie is : woman\tage is :  5\n  xingbie is :   man\tage is :  6\n  xingbie is : woman\tage is :  7\n  xingbie is :   man\tage is :  8\n  xingbie is : woman\tage is :  9\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h4",{attrs:{id:"_3-掌握指向结构体类型数据的指针变量的定义、初始化和引用方法-会正确运用指向结构体数据的指针变量间接访问结构体数据及成员-熟悉结构体指针作为参数的函数调用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-掌握指向结构体类型数据的指针变量的定义、初始化和引用方法-会正确运用指向结构体数据的指针变量间接访问结构体数据及成员-熟悉结构体指针作为参数的函数调用方法"}},[s._v("#")]),s._v(" 3. 掌握指向结构体类型数据的指针变量的定义、初始化和引用方法,会正确运用指向结构体数据的指针变量间接访问结构体数据及成员,熟悉结构体指针作为参数的函数调用方法")]),s._v(" "),a("p",[s._v("结构体指针 要在结构体变量后面进行 声明"),a("br"),s._v("\n例如:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<stdio.h>\nint main()\n{\n  typedef struct\n  {\n    int id;\n    char name[100];\n  } books,*p = &books;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("注意:"),a("br"),s._v("\n结构体变量名和数组名不同，数组名在表达式中会被转换为数组指针，而结构体变量名不会，无论在任何表达式中它表示的都是整个集合本身，要想取得结构体变量的地址，必须在前面加&，所以给 pstu 赋值只能写作：\n"),a("code",[s._v("struct stu *pstu = &stu1;")])]),s._v(" "),a("p",[s._v("而不能写作：\n"),a("code",[s._v("struct stu *pstu = stu1;")])]),s._v(" "),a("p",[s._v("通过结构体指针可以获取结构体成员，一般形式为："),a("br"),s._v(" "),a("code",[s._v("(*pointer).memberName")]),s._v("或者："),a("code",[s._v("pointer->memberName")]),a("br"),s._v("\n第一种写法中，"),a("code",[s._v(".")]),s._v("的优先级高于"),a("code",[s._v("*")]),s._v("，"),a("code",[s._v("(*pointer)")]),s._v("两边的括号不能少。如果去掉括号写作"),a("code",[s._v("_pointer.memberName")]),s._v("，那么就等效于"),a("code",[s._v("_(pointer.memberName)")]),s._v("，这样意义就完全不对了。")]),s._v(" "),a("p",[s._v("第二种写法中，"),a("code",[s._v("->")]),s._v("是一个新的运算符，习惯称它为**“箭头”**，有了它，可以通过结构体指针直接取得结构体成员；这也是"),a("code",[s._v("->")]),s._v("在 C 语言中的唯一用途。")]),s._v(" "),a("p",[s._v("上面的两种写法是等效的，我们通常采用后面的写法，这样更加直观。")]),s._v(" "),a("p",[s._v("例如:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include <stdio.h>\n  int main(){\n    struct{\n      char *name;  //姓名\n      int num;  //学号\n      int age;  //年龄\n      char group;  //所在小组\n      float score;  //成绩\n    } stu1 = { "Tom", 12, 18, \'A\', 136.5 }, *pstu = &stu1;\n    //读取结构体成员的值\n    printf("%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\\n", (*pstu).name, (*pstu).num, (*pstu).age, (*pstu).group, (*pstu).score);\n    printf("%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\\n", pstu->name, pstu->num, pstu->age, pstu->group, pstu->score);\n    return 0;\n  }\n\n结果：\n  Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！\n  Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！\n\n  #include <stdio.h>\n  struct stu{\n    char *name;  //姓名\n    int num;  //学号\n    int age;  //年龄\n    char group;  //所在小组\n    float score;  //成绩\n  }stus[] = {\n    {"Zhou ping", 5, 18, \'C\', 145.0},\n    {"Zhang ping", 4, 19, \'A\', 130.5},\n    {"Liu fang", 1, 18, \'A\', 148.5},\n    {"Cheng ling", 2, 17, \'F\', 139.0},\n    {"Wang ming", 3, 17, \'B\', 144.5}\n  }, *ps;\n  int main()\n  {\n    //求数组长度\n    int len = sizeof(stus) / sizeof(struct stu);\n    printf("Name\\t\\tNum\\tAge\\tGroup\\tScore\\t\\n");\n    for(ps=stus; ps<stus+len; ps++){\n      printf("%s\\t%d\\t%d\\t%c\\t%.1f\\n", ps->name, ps->num, ps->age, ps->group, ps->score);\n  }\n  return 0;\n}\n结果：\n  Name            Num     Age     Group   Score\n  Zhou ping       5       18      C       145.0\n  Zhang ping      4       19      A       130.5\n  Liu fang        1       18      A       148.5\n  Cheng ling      2       17      F       139.0\n  Wang ming       3       17      B       144.5\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[s._v("结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。")]),s._v(" "),a("p",[s._v("结构体指针为参数时的使用方法:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  #include <stdio.h>\n  struct stu\n  {\n    char *name;  //姓名\n    int num;  //学号\n    int age;  //年龄\n    char group;  //所在小组\n    float score;  //成绩\n  }stus[] = {\n    {"Li ping", 5, 18, \'C\', 145.0},\n    {"Zhang ping", 4, 19, \'A\', 130.5},\n    {"He fang", 1, 18, \'A\', 148.5},\n    {"Cheng ling", 2, 17, \'F\', 139.0},\n    {"Wang ming", 3, 17, \'B\', 144.5}\n  };\n  void average(struct stu *ps, int len);\n  int main(){\n    int len = sizeof(stus) / sizeof(struct stu);\n    average(stus, len);\n    return 0;\n  }\n  void average(struct stu *ps, int len)\n  {\n    int i, num_140 = 0;\n    float average, sum = 0;\n    for(i=0; i<len; i++){\n        sum += (ps + i) -> score;\n        if((ps + i)->score < 140) num_140++;\n    }\n    printf("sum=%.2f\\naverage=%.2f\\nnum_140=%d\\n", sum, sum/5, num_140);\n  }\n结果：\n  sum=707.50\n  average=141.50\n  num_140=2\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h4",{attrs:{id:"_4-了解共用体类型的定义方法-以及共用体变量的定义、初始化和成员引用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-了解共用体类型的定义方法-以及共用体变量的定义、初始化和成员引用的方法"}},[s._v("#")]),s._v(" 4. 了解共用体类型的定义方法,以及共用体变量的定义、初始化和成员引用的方法")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://c.biancheng.net/view/2035.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("共用体的使用参见此链接"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"_5-会正确使用-typedef-语句定义新的类型名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-会正确使用-typedef-语句定义新的类型名"}},[s._v("#")]),s._v(" 5. 会正确使用 typedef 语句定义新的类型名")]),s._v(" "),a("p",[s._v("在十大类第一节已详细说明，在此就不赘述了")]),s._v(" "),a("h2",{attrs:{id:"十一、位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、位运算"}},[s._v("#")]),s._v(" 十一、位运算")]),s._v(" "),a("h4",{attrs:{id:"_1-理解各种位运算符的含义-掌握各种位运算的运算规则和特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解各种位运算符的含义-掌握各种位运算的运算规则和特点"}},[s._v("#")]),s._v(" 1. 理解各种位运算符的含义,掌握各种位运算的运算规则和特点")]),s._v(" "),a("h4",{attrs:{id:"_2-会正确分析简单的位运算程序-会正确使用位运算实现清零、置-1、保留、移位等功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-会正确分析简单的位运算程序-会正确使用位运算实现清零、置-1、保留、移位等功能"}},[s._v("#")]),s._v(" 2. 会正确分析简单的位运算程序,会正确使用位运算实现清零、置 1、保留、移位等功能")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);