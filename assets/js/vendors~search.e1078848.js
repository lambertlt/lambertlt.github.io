(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,e,i){"use strict";i.r(e),e.default=[{title:"当学习失去方向，开始荒废时光时",path:"/posts/%E5%BD%93%E5%AD%A6%E4%B9%A0%E5%A4%B1%E5%8E%BB%E6%96%B9%E5%90%91%EF%BC%8C%E5%BC%80%E5%A7%8B%E8%8D%92%E5%BA%9F%E6%97%B6%E5%85%89%E6%97%B6.html",strippedContent:" \x3c!-- # 学习的时光里，总有很多的迷茫 --\x3e  # 你是不是和我一样陷入假学习之中了  学习初： 1. 列了学习时间规划表 2. 为学习找了很久的舒适区域 3. 四处网罗学习资料 4. 宣扬自己为了学习要付出多少努力 5. 在没有开始学习时，就用没有行动的嘴上功夫先把自己感动到哭  学习中： 1. 列表里的时间是不是不好，发现总是拖拉，以至于哪项都没有完成 2. 这里也太舒服了，总想游戏、睡觉、胡思乱想 3. 那些资料怎么这么乱，没法用啊，看了看好多啊，没有动力开始搁置 4. 开始不在朋友间发言，因为自己学习初的宣言都没有做到 5. 开始学习后，发现自己每天什么也没有学，每天没有一点变化，止步不前，懒惰到死  考试前： 1. 反正不是第一天这么堕落了，不差这一天 2. 索性玩到考试好了，现在学也晚了，学不进去什么，继续玩吧 3. 等到考试前一天，生死由命，随便吧，自有定数 4. 突然想到家长的期盼时，开始后悔没有好好学，学习动力突然暴涨，开始紧张的考前复习 5. 学不进去，做不明白，开始一步步否定自己，我不行，开始变得不自信  考完试： 1. 解脱了"},{title:"大人和家庭对孩子的影响",path:"/posts/%E5%A4%A7%E4%BA%BA%E5%92%8C%E5%AE%B6%E5%BA%AD%E5%AF%B9%E5%AD%A9%E5%AD%90%E7%9A%84%E5%BD%B1%E5%93%8D.html",strippedContent:" # 讲一个故事：“为什么只给我留一点，为什么我不是那么多”  ### 前言：    在一个和平的时代，在中国一个不是太富裕的家庭，为什么要给孩子一个什么都是你的，我们都是为了你的一种想法。   难道一个人能够得到东西不该是自己去奋斗得到的吗？难道就一定有人是为了你而活吗？    那么活在一个大人堆砌出的安逸圈，该如何走出来  ### 故事：  一天晚上，一家人到了晚餐时间，由母亲把中午蒸多的米饭，加了些火腿肠和调料炒出来，因为有小孩子，先把孩子的盛了出来因为要放辣椒。孩子开始吃了，我也开始吃了，因为锅里不是很多了，我就没用碗，直接上锅里吃，孩子看见我把饭都占了，气的砸桌子，说不给他留，我吃不饱肚子了，让我饿死算了，我不想活了... 我好无语，看着她无理取闹，明明给她盛了够她吃的米饭，而且锅里的是有辣椒她吃不了。非要闹 不让我吃，我不理会，继续吃，她就摔碗，用拳头打锅，不让我吃，旁边的母亲和孩子，解释了很多遍，你碗里的够你吃，哥哥吃的米饭有辣椒你吃不了，不要闹了，再闹不喜欢你了，她还是无动于衷。我也主动留出来了`1/3`的米饭，在哭闹中我吃完我的`2/3`米饭回到了自己的屋子。果然我一走留下一点米饭，和她自己就不再哭闹了。   过了一会儿，她缓过劲了，过来和我道了歉，我欣然接受晚上和她一起遛狗  她的占有欲很强，由于家人对她的欲望不加限制，并且每次都尽力满足，让她有了很放肆的脾气，在欲望不被满足时，不分尊长不分情景的吵闹。    ### 如何走出来  家长既然已经给了孩子这种形象，那当然需要逐渐限制孩子的不合理要求，让他明白什么可以什么不可以，要有原则并且在孩子成长过程中要让她多融入社会的大圈子，多喝朋友同学玩，就会懂很多，因为在社会里，并不会有很多人迁就你，照顾你，需要自己保持一个度，友好相处下去，否则就会越过越孤独。"},{title:"win10系统WiFi不能用了",path:"/posts/win10%E7%B3%BB%E7%BB%9FWiFi%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%86.html",strippedContent:" # WiFi不能用了，不要慌 先自己检测下是不是软件问题  1. 用 cmd ping一下百度看能不能收到数据包，如果能 那就是 DNS 有问题 2. 打开网络适配器查看WLAN，点进去让他自行检测下 看看什么问题       如果检测出来是 WLAN适配器的驱动程序可能有问题       那就打开计算机的服务详情，查看`Wired AutoConfig`这个服务是否开启，我上次就是莫名奇妙 成了手动开启       把这个东西改成开机自启就好了       然后重启  WiFi就可以用了"},{title:"熬夜重度患者",path:"/posts/%E7%86%AC%E5%A4%9C%E9%87%8D%E5%BA%A6%E6%82%A3%E8%80%85.html",strippedContent:" # 我的内心独白  熬夜真的老的快 我这年仅20的青壮年，时常被叫大叔  被同龄小区买菜的伙计叫老哥，我真的恨 自己为什么要经常熬夜  ![熬夜前](https://inews.gtimg.com/newsapp_bt/0/3006749879/640)  ![熬夜后](https://inews.gtimg.com/newsapp_bt/0/3006749881/640)  熬夜，并不是失眠，而是一种强迫自己违反身体自然规律的“慢性自杀”行为。其实所有人都知道，晚上睡眠不足或睡眠质量不佳，是能立马反应在白天的工作状态上的：精神颓废，各种丧，各种出错。所以，熬夜非常不利于工作的有效进行，当然，除非你是特殊的夜间工作者。————引自[这里](https://new.qq.com/omn/20180309/20180309G1MPS9.html)  ## 我的自述   我从小学就间接熬夜，并且每天早起   为什么呢？   我的父亲每天工作到很晚才回家，而我不知道哪根筋搭错了，每天非要等我爹回来才会满意的翻过今天这页   那早起呢？   我从3年纪后，就没好好学习过，每天除了玩还是玩，傍晚放学和小伙伴玩到吃晚饭，在等他们出来接着玩到夜深里，直到小区的水泥路上没有来往的大人，我才会回家，不可躲避的问题，我是学生每天有作业，由于晚上玩累了，当然就没有精力做功课，自然而然把做功课的时间放到了早晨睡醒进行   开始这样子做很稳妥，因为才三年级，后来随着升学，课后作业越来越繁重，我也越起越早，从 6 点 到了 4 点，那时候没有定闹铃的习惯(也没有闹铃)，我是怎么起来的呢，来自强大的信念，改变了我的生物钟，使我每天可以很早醒来  ### 熬夜带给我的不好  就这样我有了晚睡早起伴随着我成长10余年的恶习，很幸运我没有因此生什么大病，但熬夜的附属品还是如约而至 成了我的常态，精神不好、注意力不集中、时常会有口臭、皮肤干燥、做事总会出差错、记忆力不佳、最可恶的是长时间的内分泌失调(下吧上起很多小疙瘩)   还有一个可恶的是：眼睛经常干涩、迎风眼(直流泪)、眼球血丝很多(自己有时候照镜子都看着害怕，自带丧尸效果)  ### 熬夜带给我的好处  没有好处、、、那不可能！   每天睡觉只要不想事情，沾枕头就迅速入眠  除此之外还真没有什么好处了'\\沮丧'  我很能熬夜'\\兴奋'(这是在自残，在慢性自杀)  不过因为自知每天会熬夜，所以我会刻意的锻炼体魄，好像心里就会安逸一些啧啧啧  ### 尽管说了这么多弊端，我还是无动于衷，继续走在熬夜的路上一去不回  姚医生勒令我每天十点前必须睡觉（我想我可能要辜负他了。。。），因为十点开始，人体的各个器官开始进入修护排毒期，这时候要是不睡，身体是在负荷工作，同时也在消耗先天之本，这也就是为什么熬夜老的快了。————引自[这里](https://new.qq.com/omn/20180309/20180309G1MPS9.html)  # 熬夜会让本就曲折的人生，变得更加蜿蜒曲折。还会让你失去人生中重要节点的很多事，很多人，因为你状态不佳，没有准备好...  # 最后写一个今天想到的情话  被子和你:   被子：我好热啊，你能不能别一天挨着我   我：我好困，可是没有你我睡不着   被子：那我忍一忍，你快点，要不我就自己走(其实是自己在梦里踢开了被子)   我：那我就睡一会儿，爱你小被被   被子：yiiiii 嫌弃    有没有很甜，反正我尝到了  2020年3月18日 11:45:18  --- "},{title:"js字符串处理",path:"/posts/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86.html",strippedContent:' # js字符串处理之空格、空、回车   ## `str.trim()`方法  `trim()`方法是用来删除字符串两端的空白字符并返回    trim方法并不影响原来的字符串本身，它返回的是一个新的字符串    缺陷：只能去除字符串两端的空格，不能去除中间的空格  ## `replace`正则匹配方法  ``` 去除字符串内所有的空格：str = str.replace(/\\s*/g,"");  去除字符串内两头的空格：str = str.replace(/^\\s*|\\s*$/g,"");  去除字符串内左侧的空格：str = str.replace(/^\\s*/,"");  去除字符串内右侧的空格：str = str.replace(/(\\s*$)/g,""); ```'},{title:"浏览器扒视频相关方法",path:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%92%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html",strippedContent:" # 这次讲一下我对扒视频的见解  扒视频一听就是 什么高级词汇，其实并不是多么难得事情    下面由我来讲下城里人怎么手扒视频~  1. 第一步准备火狐或者谷歌浏览器其中之一   2. 第二步安装相关插件，猫抓、videoDownLoad等形形色色的获取视频链接插件   3. 第三步得到链接后，可能会是m3u8的链接，所以下载的视频将会是一个一个的片段   4. 第四步得到連接後，把視頻都下載下來   5. 第五步穩住，把視頻按順序放到同一個問文件夾下，用一個脚本吧`.ts`視頻合并起來   6. 最後當然是脚本了哈哈哈        `copy /b ./*.ts  .\\all.ts *`         把這段脚本，存到同級目錄下，保存問為`.bat`        然後雙擊運行  寫著寫著輸入法成了繁體字，也不知道咋搞的，就這樣吧大致方法講出來了   # 如果需要幫忙，可以通過我的郵箱聯係我   在本**博客的自我介紹**裏面可以找到 "},{title:"js时间戳总结",path:"/posts/js%E6%97%B6%E9%97%B4%E6%88%B3%E6%80%BB%E7%BB%93.html",strippedContent:" # 程序员常用时间戳篇  [找到的一篇比较好的讲述](https://www.cnblogs.com/hanzongze/p/js-timestamp.html)"},{title:"持续健身带来的变化",path:"/posts/%E6%8C%81%E7%BB%AD%E5%81%A5%E8%BA%AB%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%8F%98%E5%8C%96.html",strippedContent:" # 这里记录下自己连续健身的变化  ## 开始这个想法 2020-2-10  当时在b站上发布了第一个动态，要成为一个健身博主，并做了个无器械健身的笔记   要说为什么有在b站发视频的想法，还是归于自己总是懒惰，坚持不住所以公之于众监督自己执行  现在来看，不得不说，效果显著，从第一次居家健身 20-2-11 到现在 20-3-5 已经很久了！  ## 现在谈谈这段时间身体上的变化，还有精神上的  - 身体上，变得更加硬朗，敏捷，体重也愈来愈稳定且有下降态势   - 精神上，变得明朗起来，心里也越来越自信，对自己的所言，有了更大的执行力  2020年3月5日 11:10:38  ---  ## 健身的历程  刚开始健身，势如猛虎，总是超负荷锻炼，以至于经常受伤，随着一次次的感受锻炼的过程，逐渐找到了属于自己的方法    到现在我已经健身3周多了   尽管这么久了，但在每次锻炼时都还会犹豫，不过一次次犹豫中我选择了坚持   所以坚持锻炼，更可以锤炼意志，还会在生活中有不同的体现  2020年3月5日 11:10:38  ---  ## 健身减重  这里我是这么做的 1. 每日从原来顿顿吃撑变为，每顿吃饱，有多大差别呢       - 过去:三碗米饭1盘菜 吃光才行的心理       - 现在:一碗米饭半盘菜，吃了就行的心理 2. 减少糖分的摄入，原来很喜欢吃，现在偶尔才吃 3. 每日多多摄入优质蛋白质补充肌肉消耗 4. 每日饮入大量的水分，加快新晨代谢  2020年3月5日 11:10:38  --- ## 健身的目标  1. 拥有结实的体魄，偶尔可以秀秀肌肉 2. 可以做出6艺的所有第十式 3. 用持久的健身改变自己对其他事务的持久力(健身都可以，这个怎么会不行呢？) 4. 为自己打造一个优质的生活习惯，早睡早起 5. 通过锻炼体重下降到130以下  2020年3月5日 11:10:38  ---"},{title:"爱情是什么",path:"/posts/%E7%88%B1%E6%83%85%E6%98%AF%E4%BB%80%E4%B9%88.html",strippedContent:" # 什么是爱情？  > 今天中午睡觉的时候突然想到的一个非常好的比喻  爱情就像睡在温暖被窝里的自己，睡在里面，非常温暖   但自己还是会不断的变换姿势，1min、40s、10s不定期的随心扭动着   寻求着当下不一样的新颖，尽管所有姿势都已数十次的重复在心里，但也不会厌烦   直到一个时机，便慢慢入睡了    所以爱情是在ta给予你温暖的环境下，独自寻求的结果   如果你在这孕育爱情的温床里找不到舒适的样子，那么就是这个温床不适合你   需要换一个人了   # 感情还是温柔下的孩子，  你对ta温柔，ta就越安详    # 不如说感情是接受，  就像，无论大人小孩，嘴里总会吐露出的我爱***   最常见的就是小孩我爱吃糖、爱玩玩具、爱妈妈的怀抱、爱爸爸的骑高高    爱是受人之好，反馈出的情绪    ## 而爱是会发生变化的，  就像熟睡的孩子，突然的哇哇哭声   在平静中，突然号啕大哭像极了感情里的波荡起伏   任由你，以何种方式去哄、去逗、去卖好都还是无济于事   但在你准备放任不管的时候，却又恢复了平静，让人琢磨不定    ## 然而不是所有的好都会收到爱的表现  也许你的好，不是ta所需要的，反之会透露出厌恶的表现，此时需要你即时发现并改变方式才会有所改观   然后，也有种情况，是不好改变的，就是ta欲望的改变，对你的好总是透露出不瞒的情绪   这种情况往往是需要提升自己，以满足ta   但改变自己在平凡的人里却不容易做到  # 有些人习惯去爱，有些人更爱去收下爱，分人而定  当这种组合在一起，一旦习惯去爱的人发生变化，敏锐的收爱者会很快察觉，并作出判断，是否还在你身边   当ta，比较之后决定了，会毅然决然去离去你   这样子的事一旦发生往往是无法挽回的，ta会很快适应更多来自他方的爱，愈来愈远   > 今天想到的就这些了，慢慢补充   2020-03-04 21:42:52 ---  "},{title:"c语言gdb调试",path:"/posts/c%E8%AF%AD%E8%A8%80gdb%E8%B0%83%E8%AF%95.html",strippedContent:" # GDB [官网](http://www.gnu.org/software/gdb/)  # 什么是GDB？ GDB是GNU Project调试器，它使您可以查看另一个程序在执行过程中正在执行的操作–或该程序崩溃时正在执行的操作。  # GDB可以做四种主要的事情（以及支持这些事情的其他事情）来帮助您捕获行为中的错误：  1. 启动程序，并指定可能影响其行为的所有内容。 2. 使程序在指定条件下停止。 3. 检查程序停止时发生的情况。 4. 更改程序中的内容，以便您可以尝试纠正一个错误的影响，然后继续学习另一个错误。   # gdb 调试的一些命令  ```     gcc -g -o xx xx.c     // 编译c源程序          gdb file     // gdb 运行程序          file xx     // 装入需要调试的文件      kill || k      // 终止正在调试的程序      run      // 开始执行程序      start st      // 开始执行程序,在main函数的第一条语句前面停下来      list num     // 显示程序代码10行      break || b num     // 给程序加断点          info break || i b     // 查看断点列表          delete num     // 删除断点 这个num是断点列表的序列号,不是行号          clear location     // 清除断点          print x     // 打印内部变量      display || disp x     // 在断点处自动跟踪显示变量          next || n      // 执行下一条语句,如果该语句为函数调用,不会进入函数内部执行(即不会一步步地调试函数内部语句)          continue || c     // 继续程序的运行,直到遇到下一个断点      quit || q     // 退出gdb环境  ```"},{title:"老爹的网课",path:"/posts/%E8%80%81%E7%88%B9%E7%9A%84%E7%BD%91%E8%AF%BE.html",strippedContent:" # 企业网课培训课程  ## 第一节  [![第一节](https://i.loli.net/2020/02/23/zGbr3oAnfuKe2sJ.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/cd565df85285890799013945564/64fa99c56cf1d2a748cdeab9.mp4?time=1582214792524)  ## 第二节  [![第二节](https://i.loli.net/2020/02/23/ND2rJAbjETnzX3Y.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/05b1c2c35285890799089496039/f4f01c6b1e552f7d04605549.mp4?time=1582468319502)  ## 第三节  [![第三节](https://i.loli.net/2020/02/23/RvcXLt43UiyYlmg.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/3fc467ba5285890799113882682/9a1d8db0d3b985c6c1869706.mp4?time=1582468466223)  ## 第四节   [![第四节](https://i.loli.net/2020/02/23/E2KWB8TYiDFVths.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/d395e19b5285890799163464943/2e03c7ef08efd312a0b801a4.mp4?time=1582470918367)  ## 第五节   [![第五节](https://i.loli.net/2020/02/24/TmSckH2uhnMwJq6.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/271ebc535285890799201595226/a9307172ac618cb82b0085a6.mp4?time=1582554705598)  ## 第六节  [![第六节](https://i.loli.net/2020/02/26/l3LHmdQoNbcUqsW.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/615033fb5285890799277175506/88d8d8e3088cb45c641be087.mp4?time=1582725979006)  ## 第七节  [![第七节](https://i.loli.net/2020/02/28/DrCB5idI6KRWU4J.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/c269f9775285890799315843912/f8521501abdd0f3ce192499b.mp4?time=1582860991782)  ## 第八节  [![第八节](https://i.loli.net/2020/02/28/rztdYg5NEyBf7nk.jpg)](http://1252524126.vod2.myqcloud.com/e33d04fdvodgzp1252524126/65a7fd195285890799355272338/09ddb58082808be8ed748d16.mp4?time=1582972573965)  ## 第九节  [![第九节](https://i.loli.net/2020/03/01/FiRfjK36VsklDxp.jpg)](#)"},{title:"浏览器访问公众号网页",path:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E9%A1%B5.html",strippedContent:" # 微信的网页再浏览器访问  1. 用浏览器插件 user - agrent 更改 user-agrents 为微信的ua 2. 打开调试模式(F12) 打开手机模拟器 3. 把链接放到这个调整好的标签页  我用的UA是(仅供参考)  `Mozilla/5.0 (Linux; U; Android 2.3.6; zh-cn; GT-S5660 Build/GINGERBREAD) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 MicroMessenger/4.5.255`  参考链接  [微信内置浏览器和小程序的 User Agent 区别及判断方法](https://zhangzifan.com/wechat-user-agent.html)  [webview中的User-Agent](https://developers.weixin.qq.com/community/develop/doc/8e0804936921ab0cb94afbd4d9019fac)  如果不会安装 浏览器插件 user - agrent 可以参考这个链接进行修改   [模拟UA（user agent）实现访问只能在微信上打开的网页](https://blog.csdn.net/qq_22073849/article/details/78198177?utm_source=blogxgwz6)"},{title:"chrome扩展工具",path:"/posts/chrome%E6%89%A9%E5%B1%95%E5%B7%A5%E5%85%B7.html",strippedContent:" # Chrome 扩展工具  [工具搜索网站](http://www.cnplugins.com/)  # 扩展工具的安装  1. 将下载好的改后缀名为`.zip` 2. 解压到同名文件夹 3. 打开chrome扩展库  4. 打开解压好的文件夹，确定后自动安装  ## 扒视频的工具  Video Downloader professional  ## 修改请求头的  User-Agent-Switcher   这个用于只允许微信内部浏览器访问修改的"},{title:"Css可以玩出的花样",path:"/posts/Css%E5%8F%AF%E4%BB%A5%E7%8E%A9%E5%87%BA%E7%9A%84%E8%8A%B1%E6%A0%B7.html",strippedContent:" # Css 的无限本领  [点此连接查看详情](https://www.zhihu.com/question/39907342/answer/83789125?group_id=676202335147409408)  ## Css 实现3D苹果电脑  [点此查看](https://www.html5tricks.com/demo/css3-3d-macbook-air/index.html)  ## 这是一个github库，别人总结的一些纯css库  [点此查看](https://github.com/Zhangjd/awesome-pure-css-no-javascript)  ## codepen 优秀css demo的网站  [codepen](https://codepen.io/)  ## 一个大牛的博客css居多可进去学习  [jump](https://www.cnblogs.com/coco1s/) "},{title:"Javascript之编译器",path:"/posts/Javascript%E4%B9%8B%E7%BC%96%E8%AF%91%E5%99%A8.html",strippedContent:" # Javascript 的编译器 WebAssembly  [点此跳转](https://www.jianshu.com/p/bff8aa23fe4d)  # WebAssembly [中文网](https://wasm.comptechs.cn/) "},{title:"浏览器里的linux系统",path:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E7%9A%84linux%E7%B3%BB%E7%BB%9F.html",strippedContent:" # 浏览器里的linux系统  [点击跳转](https://bellard.org/jslinux/) "},{title:"生产工具篇AdobePr",path:"/posts/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7%E7%AF%87AdobePr.html",strippedContent:" # 用了Pr就得用media  在剪辑视频的时候，如果在Pr里调整了音频效果，需要在media打开项目，然后渲染音频，再通过media导出视频  pr基础学习可以在哔哩哔哩里面学，教程很多哦"},{title:"ubuntu搜狗拼音候选词消失",path:"/posts/ubuntu%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E5%80%99%E9%80%89%E8%AF%8D%E6%B6%88%E5%A4%B1.html",strippedContent:" # 搜狗拼音候选词框不显示问题  首先卸载 `fcitx-ui-qimpanel`   `sudo apt-get remove fcitx-ui-qimpanel`  然后重启fcitx  测试 如果还是不行  将~/.config 下的 SogouPY SogouPY.users sogou-qimpanel都删掉,重启fcitx,这几个文件夹又会自动生成,而问题已解决了   在重启fcitx    后来发现，好像只用删除sogou-qimpanel就行了  补一句弄好之后的皮肤超丑 "},{title:"生产工具vscode",path:"/posts/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7vscode.html",strippedContent:" # vscode  ## 非常帮的插件  [点击链接跳转](https://space.bilibili.com/429086776/channel/detail?cid=102477)"},{title:"无器材健身",path:"/posts/%E6%97%A0%E5%99%A8%E6%9D%90%E5%81%A5%E8%BA%AB.html",strippedContent:" # [无器械健身](https://pan.baidu.com/share/link?shareid=662547179&uk=1026132166) [美] 马克·劳伦(Mark Lauren)  ————用自身体重锻炼   上面有链接有pdf版  ![封面](https://i.loli.net/2020/02/09/MSbsACWtFeaiN6Y.png)  ## 看书当然要从目录开始呀  ![目录](https://i.loli.net/2020/02/09/JaAzdrPEsKt7hV5.png)  这本书前48页，讲述了健身的一些方法、误区、心理还有**计划**(当然有了计划是要执行的)，这部分内容太多自行前去pad部分预览吧   后面的内容是动作图解，我会逐个去带着大家练习，不过更新时间不确定，在我的[哔哩哔哩里有视频](https://space.bilibili.com/429086776/channel/detail?cid=102477)`(此处点击跳转b站录制的视频)`哦  ## 开始行动前简述  健身从 0--\x3e1 真的心理是最大的山，对于从来没有过花时间锻炼的人。当然我是锻炼过的，具备一定基础，什么基础呢   囚徒六艺 大部分动作时常做(2.5年前嘿嘿)    原来:   做过单手俯卧撑 * 6，钻石俯卧撑 1min * 57，双力臂 * 5，单腿深蹲 * 15，引体不落地一口气 * 25    现在:   很久不练的我也已经荒废了(肚子上的肉肉和体重都有了巨变，体重上浮40斤，现在75kg)啧啧啧，庆幸的是 肱二头肌 肱三头肌 斜方肌 背阔肌 胸肌 缩水不太厉害,腿部力量全无哈哈哈。  最近一直在练跪式健腹轮~往全式过度，奈何腹部力量欠缺，还需练习 "},{title:"没事多看看的网站",path:"/posts/%E6%B2%A1%E4%BA%8B%E5%A4%9A%E7%9C%8B%E7%9C%8B%E7%9A%84%E7%BD%91%E7%AB%99.html",strippedContent:' ## [博客园 lancidie](https://www.cnblogs.com/lancidie/)  <img src="https://i.ibb.co/Hqhhw8B/2020-02-06-20-45-01.png" alt="lancidie" width="400px" height="200"></img>  ## [这是别人存的大神博客](https://blog.csdn.net/hemeinvyiqiluoben/article/details/50378551)  ## [前端美](https://55.show/)  真的是一个能够提升审美的地方 多康康！  ## [电子技术从入门到精通](https://zhuanlan.zhihu.com/p/35894131) '},{title:"英语词汇800常用20类",path:"/posts/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87800%E5%B8%B8%E7%94%A820%E7%B1%BB.html",strippedContent:" # 1、学习用品（school things）  pen /pen/ 钢笔  pencil /'pensl/ 铅笔  pencil-case /'penslkeis / 铅笔盒  ruler /'ru:lə/ 尺子 ­  book /buk/ 书  bag /bæg/ 包  post card /pəust kɑ:d/ 明信片  newspaper /'nju:z,peipə/ 报纸  schoolbag /sku:lbæg/ 书包  eraser / i'reisə / 橡皮  crayon / 'kreiən / 蜡笔  sharpener / 'ʃɑ:pənə / 卷笔刀  story-book / 'stɔ:ri] buk / 故事书  notebook / 'nəutbuk / 笔记本  Chinese book / 'tʃai'ni:z / 语文书  English book / 'iŋgliʃ / 英语书  maths book / mæθs / 数学书  magazine / ,mægə'zi:n / 杂志  newspaper / 'nju:z,peipə / 报纸  dictionary / 'dikʃəneri / 词典  # 2、身体部位（body）  foot / fut / 脚  head / hed / 头  face / feis / 脸  hair / hɛə / 头发  nose / nəuz / 鼻子  mouth / mauθ / 嘴  eye / ai / 眼睛  ear / iə / 耳朵  arm / ɑ:m / 手臂  hand / hænd / 手  finger / 'fiŋgə / 手指  leg / leg / 腿  tail / teil / 尾巴  # 3、颜色（colours）  red /red/ 红  blue /blu:/ 蓝  yellow /'jeləu/ 黄  green /gri:n/ 绿  white /wait/ 白  black /blæk/ 黑  pink /piŋk/ 粉红  purple /'pə:pl/ 紫  orange /'ɔ:rindʒ/ 橙  brown /braun/ 棕  # 4、动物（animals）  cat /kæt/ 猫  dog /dɔg/ 狗  pig /pig/ 猪  duck /dʌk/ 鸭  rabbit /'ræbit/ 兔子  horse /hɔ:s/ 马  elephant /'elifənt/ 大象  ant /ænt/ 蚂蚁  fish /fiʃ/ 鱼  bird /bə:d/ 鸟  snake /sneik/ 蛇  mouse /maus/ 鼠  kangaroo /,kæŋgə'ru:/ 袋鼠  monkey /'mʌŋki/ 猴子  panda /'pændə/ 熊猫  bear /bɛə/ 熊  lion /'laiən/ 狮  tiger /'taigə/ 老虎  fox /fɔks/ 狐狸  zebra /'zi:brə/ 斑马  deer /diə/ 鹿  giraffe /dʒi'rɑ:f/ 长颈鹿  goose /gu:s/ 鹅  hen /hen/ 母鸡  turkey /'tə:ki/ 火鸡  lamb /læm/ 小羊  sheep /ʃi:p/ 绵羊  goat /gəut/ 山羊  cow /kau/ 奶牛  shark /'ʃɑ:k/ 鲨鱼  seal / si:l / 海豹  # 5、人物（people）  friend /frend/ 朋友  boy / bɔi / 男孩  girl /gə:l/ 女孩  mother /'mʌðə/ 母亲  father /'fɑ:ðə/ 父亲  sister /'sistə/ 姐妹  brother /'brʌðə/ 兄弟  uncle /'ʌŋkl/ 叔叔  man /mæn/ 男人  woman/ 'wumən/女人  Mr 先生 Miss 小姐  lady /'leidi/ 女士  mom /mɔm/ 妈妈  dad /dæd/ 爸爸  parents /'pɛərənts/ 父母  grandma /'grændmɑ:/ grandmother /'grænd,mʌðə/（外）祖母  grandpa /'grændpɑ:/ grandfather /'grænd,fɑ:ðə/（外）祖父  aunt /ɑ:nt/ 阿姨  cousin /'kʌzn/ 堂兄妹  son /sʌn/ 儿子  baby /'beibi/ 婴儿  kid /kid/小孩  classmate/'klɑ:smeit /同学  queen /'kwi:n/ 女  visitor /'vizitə/ 参观者  neighbour /'neibə / 邻居  principal /'prinsəpəl / 校长  pen pal / pen pæl / 笔友  tourist /'tu:rist / 旅行者  people /'pi:pl / 人物  robot /'rəubɔt / 机器人  # 6、 职业（job）  teacher /'ti:tʃə/ 教师  student /'stju:dənt/学生  doctor /'dɔktə/ 医生  nurse /nə:s/ 护士  driver /'draivə / 司机  farmer /'fɑ:mə/ 农民  singer /'siŋə/ 歌唱家  writer /'raitə/ 作家  artist /'ɑ:tist /画家  actor /'æktə/男演员  actress/'æktris/女演员 TV  reporter /ri'pɔ:tə/ 电视台记者  engineer /,endʒi'niə / 工程师  policeman / pə'li:smən /（男）警察  salesperson /'seilz,pə:sn / 销售员  cleaner /'kli:nə / 清洁工  baseball player/'beis,bɔ:l 'pleiə/棒球运动员  assistant / ə'sistənt / 售货员  7、食品（food and drink）  breakfast /'brekfəst / 早餐  lunch /lʌntʃ/ 中餐  dinner /'dinə/ 晚餐  egg /eg/ 鸡蛋  rice /rais/ 米饭  cake /keik/ 蛋糕  bread /bred/ 面包  jam /dʒæm/ 果酱  biscuit /'biskit/ 饼干  sausage /'sɔ:sidʒ/ 香肠  sandwich /'sændwitʃ/ 三明治  dumplings /'dʌmpliŋ/ 饺子  French fries /frentʃ fraiz/ 薯条  meat /mi:t/ 肉  chicken /'tʃikin/ 鸡肉  mutton /'mʌtn/ 羊肉  beef /bi:f/ 牛肉  pork /pɔ:k/ 猪肉  fish /fiʃ/ 鱼  hamburger /'hæmbə:gə/ 汉堡  hot dog /hɔt dɔg/ 热狗  noodles /'nu:dl/ 面条  soup /su:p/ 汤  salad /'sæləd/ 沙拉  milk /milk/牛奶  water /'wɔ:tə/ 水  ice-cream /ais kri:m/ 冰淇淋  cola /'kəulə/ 可乐  juice /dʒu:s/ 果汁  tea /ti:/ 茶  coffee /'kɔfi/ 咖啡  fruit/fru:t/ 水果  apple /'æpl / 苹果  banana / bə'nɑ:nə / 香蕉  pear /pɛə / 梨  orange /'ɔ:rindʒ / 橙  watermelon /'wɔ:tə,melən / 西瓜  grape / greip / 葡萄  cherry/'tʃeri / 樱桃  lemon/ 'lemən / 柠檬  mango/ 'mæŋgəu /芒果  coconut/'kəukənʌt /椰子  peach /pi:tʃ/ 桃  strawberry / 'strɔ:bəri / 草莓  vegetable / 'vedʒitəbl / 蔬菜  eggplant / 'egplɑ:nt / 茄子  green beans / gri:n bi:ns / 青豆  tomato / tə'meitəu / 西红柿  potato / pə'teitəu / 土豆  cucumber / 'kju:kəmbə / 黄瓜  onion / 'ʌnjən / 洋葱  pea / pi:/ 豌豆  carrot / 'kærət / 胡萝卜  cabbage /'kæbidʒ / 卷心菜  pumpkin / 'pʌmpkin / 南瓜  sweet potato / swi:t pə'teitəu / 红薯  # 8、衣服（clothes）  jacket /'dʒækit/ 夹克衫  shirt /ʃə:t/ 衬衫  T-shirt T 恤衫  skirt /skə:t/ 短裙子  dress /dres/ 连衣裙  jeans /dʒi:nz/ 牛仔裤  pants /pænts/ /trousers /'trauzəz / 裤子  socks /sɔks/ 袜子  shoes /ʃu:z/ 鞋子  sweater /'swetə/ 毛衣  coat /kəut/ 外套  raincoat /'reinkəut/ 雨衣  shorts /ʃɔ:ts/ 短裤  sandals /'sændl/凉鞋  boots /bu:ts/ 靴子  hat /hæt/ 有边帽  cap /kæp/ 无边帽  tie /tai/ 领带  sunglasses /'sʌnglɑ:siz/太阳镜  scarf /skɑ:f/ 围巾  gloves /glʌvz/手套  # 9、交通工具（vehicles）  bike /baik/ 自行车  bus /bʌs/ 公共汽车  train /trein/ 火车  boat /bəut/ 小船  ship /ʃip/ 轮船  yacht /jɔt/ 快艇  car /kɑ:/ 小汽车  taxi /'tæksi/出租车  jeep /dʒi:p/ 吉普车  van /væn/ 小货车  plane /plein/飞机  subway /'sʌbwei/地铁  motor cycle /'məutə 'saikl / 摩托车  # 10、杂物（other things）  window /'windəu/ 窗户  door /dɔ:/ 门  desk /desk/ 课桌  chair /tʃɛə/ 椅子  bed /bed/ 床  computer/kəm'pju:tə/计算机  board /bɔ:d/ 写字板  fan /fæn/ 风扇  light /lait/ 灯  mirror /'mirə/ 镜子  teacher’s desk / 'ti:tʃə desk/ 讲台  picture /'piktʃə/ 图画  photo /'fəutəu/ 照片  wall /wɔ:l/ 墙壁  floor /flɔ:/ 地板  football /'futbɔ:l/ 足球  present / 'preznt / /gift / gift / 礼物  walkman / 'wɔ:kmən / 随身听  lamp /læmp/ 台灯  sofa /'səufə/ 沙发  shelf /ʃelf/ 书架  fridge /fridʒ/ 冰箱  table /'teibl/ 桌子  air-conditioner /ɛə kən'diʃənə/ 空调  key /ki:/ 钥匙  lock /lɔk/ 锁  plate /pleit/ 盘子  knife /naif/ 刀  fork /fɔ:k/ 叉  spoon /spu:n/ 勺子  chopsticks /'tʃɔpstiks/ 筷子  pot /pɔt/ 锅  toy /tɔi/ 玩具  doll /dɔl/ 洋娃娃  ball /bɔ:l/ 球  balloon /bə'lu:n/ 气球  kite /kait/ 风筝  jigsaw puzzle /'dʒigsɔ: 'pʌzl/ 拼图游戏  box /bɔks/ 盒子  umbrella /ʌm'brelə/ 伞  zipper /'zipə/ 拉链  violin /,vaiə'lin/小提琴  nest /nest/ 鸟窝  hole /həul/ 洞  toothbrush /'tu:θbrʌʃ/ 牙刷  menu /'menju:/菜单  e-card /kɑ:d/电子卡片  e-mail /meil/电子邮件  money /'mʌni/ 钱  traffic light /'træfik lait/ 交通灯  medicine /'medisin/ 药  # 11、地点（locations）  home /həum/ 家  room /ru:m/ 房间  bedroom /'bedrum/ 卧室  bathroom /'bæθrum/卫生间  living room / 'liviŋ ru:m / 起居室/客厅  kitchen /'kitʃin/ 厨房  classroom /'klɑ:srum/ 教室  school /sku:l/ 学校  park /pɑ:k/ 公园  library /'laibrəri/ 图书馆  post office /pəust 'ɔ:fis/ 邮政局  hospital /'hɔspitl/ 医院  cinema /'sinimə/ 电影院  bookstore /'bukstɔ:/ 书店  farm /fɑ:m/ 农场  zoo /zu:/ 动物园  garden /'gɑ:dn/ 花园  playground /'pleigraund/ 操场  canteen /kæn'ti:n/ 餐厅  teacher’s office /'ɔ:fis/ 教师办公室  gym /dʒim/ 体育馆  washroom /'wɔʃrum/ 盥洗室  art room /ɑ:t ru:m/ 美术室  computer room /kəm'pju:tə/ 电脑房  music room /'mju:zik/ 音乐教室  TV room 电视房  flat /flæt/ 公寓  company /'kʌmpəni/ 公司  factory /'fæktəri/ 工厂  pet shop /pet ʃɔp/ 宠物店  science museum/'saiəns mju:'ziəm/科学博物馆  the Great Wall /greit wɔ:l/ 长城  supermarket /'sju:pə,mɑ:kit/ 超市  bank /bæŋk/ 银行  country /'kʌntri/乡村  village /'vilidʒ/ 村庄  city /'siti/ 城市  # 12、气象（weather）  cold /kəuld/ 冷的  hot /hɔt/ 热的  warm /wɔ:m/ 温暖的  cool /ku:l/ 凉爽的  snowy /snəui/下雪的  sunny /'sʌni/晴朗的  rainy /'reini/ 下雨  windy /'windi/ 刮风的  cloudy /'klaudi/ 多云的  weather report /'weðə ri'pɔ:t/ 天气预报  # 13、景物（nature）  river /'rivə/ 河流  lake /leik/ 湖泊  stream /stri:m/ 小溪  forest /'fɔrist/ 森林  path /pɑ:θ/ 小路  road /rəud/马路  house /rəud/ 房子  bridge / bridʒ / 桥  building /'bildiŋ/建筑物  rain /rein/ 雨  cloud /klaud/ 云  sun /sʌn/ 太阳  mountain /'mauntin /大山  sky /skai/ 天空  rainbow /'reinbəu/ 彩虹  wind /waind/风  air /ɛə/ 空气  # 14、植物（plants）  flower /'flauə/ 花  grass /grɑ:s/ 草  tree /tri:/树  seed /si:d/种子  leaf /li:f/树叶  plant /plɑ:nt/ 植物  rose /rəuz/ 玫瑰  # 15、星期（week）  Monday/'mʌndei/ 星期一  Tuesday/'tju:zdi/ 星期二  Wednesday/wenzdi/ 星期三  Thursday/'θə:zdi/ 星期四  Friday /'fraidi/ 星期五  Saturday/'sætədi/ 星期六  Sunday /'sʌndi/ 星期天  weekend/'wi:k'end/周末  # 16、月份（months）  January/'dʒænjueri/ 一月  February/'februəri/ 二月  March /mɑ:tʃ/ 三月  April /'eiprəl/ 四月  May /mei/ 五月  June /dʒu:n/ 六月  July /dʒu:'lai/ 七月  August /ɔ:'gʌst/ 八月  September /sep'tembə/ 九月  October /ɔk'təubə/ 十月  November /nəu'vembə/ 十一月  December /di'sembə/ 十二月  # 17、季节（seasons）  spring /spriŋ/ 春  summer /'sʌmə/ 夏  fall/autumn/fɔ:l 'ɔ:təm/ 秋  winter/'wintə/ 冬  # 18、方位（directions）  south/sauθ/南  north/nɔ:θ/北  east/i:st/东  west/west/西  left/left/ 左  right/rait/右  # 19、患病（illness）  have a fever /'fi:və/ 发高烧  hurt /hə:t/ 疼痛  have a cold /kəuld/伤风  have a toothache /'tu:θei/牙疼  have a headache /'hedeik/头疼  have a sore throat /sɔ: θrəut/喉咙疼  have a stomachache/'stʌməkeik/胃痛  # 20、数词（number）  one 一  two 二  three 三  four 四  five 五  six 六  seven 七  eight 八  nine 九  ten 十  eleven 十一  twelve 十二  thirteen 十三  fourteen 十四  fifteen 十五  sixteen 十六  seventeen 十七  eighteen 十八  nineteen 十九  twenty 二十  thirty 三十  forty 四十  fifty 五十  sixty 六十  seventy 七十  eighty 八十  ninety 九十  hundred /'hʌndrəd/ 一百  first 第一  second 第二  third 第三  fourth 第四  fifth 第五  sixth 第六  seventh 第七  eighth 第八  ninth 第九  tenth 第十  eleventh 第十一  twelfth 第十二  # 21、形容词（adj.）  big /big/大的  small/smɔ:/小的  long/ lɔŋ/长的  tall/tɔ:l/高的  short/ʃɔ:t/短的  young/jʌŋ/年轻的  old/əuld/老的  strong/strɔŋ/强壮的  thin/θin/瘦的  active/'æktiv/积极的  quiet/'kwaiət/安静的  nice/nais /好的  kind/kaind/善良的  strict/strikt/严格的  smart/smɑ:t/聪明的  funny/'fʌni/滑稽的  sweet/swi:t/甜的  salty/'sɔ:lti /咸的  sour/'sauə/酸的  fresh/freʃ/新鲜  favourite/'feivəri t/最喜欢的  clean/kli:n/干净的  tired/'taiəd/累的  excited/ik'saitid/兴奋的  angry/'æŋgri/生气的  happy/'hæpi/高兴的  bored/bɔ:d/无聊的  sad/sæd/难过的  taller 更高的  shorter 更短的  stronger 更强壮的  older 更老的  younger 更年轻的  bigger 更大的  heavier 更重的  longer 更长的  thinner 更瘦的  smaller 更小的  good 好的  better 更好的  higher 更高的  fine/fain/好的  great/greit/棒的  heavy/'hevi/重的  new/nju:/新的  fat/fæt/胖的  right /rait/对的  hungry/'hʌŋgri/饿的  cute/kju:t/可爱的  little/'litl/小的  lovely/'lʌvli/可爱的  beautiful/'bju:təfəl/漂亮的  colourful/'kʌləful/五颜六色的  pretty/'priti/漂亮的  cheap/tʃi:p/便宜的  expensive/iks'pensiv/贵的  juicy/'dʒu:si/有汁的  healthy/'helθi/健康的  helpful/'helpfəl /有帮助的  high/hai/高的  easy/'i:zi/简单的  proud/praud/骄傲的  # 22、介词（prep.）  in 在……里面  on 在……上面  under/'ʌndə/在……下面  near /niə/在……附近  behind/bi'haind/在……后面  next to 在……旁边  over/'əuvə/悬在……上面  in front of/frʌnt/在……前面  # 23、代词（pron.）  I/ai/我  we/wi:/我们  you/ju:/你，你们  he/hi:/他  she/ʃi:/她  it/it/它  they/ðei/他们  my/mai/我的  our/'auə/我们的  your/juə/你的，你们的  his/hiz/他的  her/hə:/她的  # 24、动词（verb.）  play/plei/玩  swim/swim/游泳  skate/skeit/溜冰  fly/flai/飞  jump/dʒʌmp/跳  walk/wɔ:k/走  run/rʌn/跑  climb/klaim/爬  fight/fait/打架  swing/swiŋ/荡秋千  eat/i:t/吃  sleep/sli:p/睡觉  like/laik/喜欢  have/hæv/有  buy/bai/买  take/teik /拍（照），带  live/liv/居住  teach/ti:tʃ/教  go/gəu/去  study/'stʌdi/学习  learn/lə:n/学习  sing/siŋ/唱歌  dance/dɑ:ns/跳舞  row/rəu/划  read books 读书  do homework 做作业  watch TV /wɔtʃ/ 看电视  cook the meals /kuk mi:l/ 烧菜  water the flowers /'flauə/浇花  sweep the floor /swi:p flɔ:/拖地  clean the bedroom /kli:n 'bedrum/打扫房间  make the bed 铺床叠被  set the table /'teibl/摆餐桌  wash the clothes /wɔʃ kləuðz/洗衣服  wash the dishes /diʃ/洗盘子  use a computer /kəm'pju:tə/用电脑  do morning exercises /'mɔ:niŋ 'eksəsaiz/做早操  eat breakfast /i:t 'brekfəst/吃早餐  eat dinner /'dinə /吃晚饭  go to school 去上学  have English class 上英语课  play sports/plei spɔ:ts/体育运动  get up 起床  climb mountains/klaim 'mauntins/爬山  go shopping 去购物  play the piano /pi'ænəu/ 弹钢琴  visit grandparents /'vizit 'grænd,pɛərənt/拜访祖父母  go hiking /haik/ 去远足  fly kites /flai kaits/ 放风筝  make a snowman /meik ə 'snəu,mæn/堆雪人  plant trees /plɑ:nt tri:z/ 植树  draw pictures /drɔ: 'piktʃəz/画画  cook dinner /kuk 'dinə/烧晚饭  read a book 读书  listen to music /'lisn 'mju:zik/听音乐  clean the room 打扫房间  write a letter /rait 'letə/ 写信  write an e-mail 写电子邮件  drink water /driŋk 'wɔ:tə/ 喝水  take pictures /teik 'piktʃə/ 拍照片  pick up leaves /pik ʌp li:vz/ 摘树叶  write a report /rait ri'pɔ:t/ 写报告  play chess /tʃes/ 下棋  have a picnic /'piknik/ 野餐  get to 到达  ride a bike /raid baik/ 骑自行车  play the violin /,vaiə'lin/ 拉小提琴  collect stamps /kə'lekt stæmp/ 集邮  meet/mi:t/ 遇见  welcome/'welkəm/ 欢迎  thank /θæŋk/ 谢谢  work /wə:k/ 工作  drink /driŋk/ 喝  taste /teist/ 尝  smell /smel/ 闻  feed /fi:d/ 喂  milk /milk/ 牛奶  look /luk/ 看  guess /ges/ 猜  help /help/ 帮助  pass/pɑ:s/ 传递  show/ʃəu/展示，给……看  use /ju:z/ 用  clean /kli:n/ 打扫  open/'əupən/ 打开  close /kləuz/ 关  put /put/ 放  read /ri:d/ 读，看  write /rait/ 写  paint /peint/ 画画  tell /tel/ 告诉  kick /kik/ 踢  ride /raid/ 骑  stop /stɔp/ 停  wait /weit/ 等  find /faind/ 找  drive /draiv/ 驾驶  fold /fəuld/ 折叠  send /send/送，寄  wash /wɔʃ/ 洗  shine/ʃain/照耀  become/bi'kʌm/变成  feel /fi:l/ 感觉  think /θiŋk/ 想  fall /fɔ:l/ 掉下  leave /li:v/ 离开  wake up/weik ʌp/醒过来  put on 穿上  take off 脱下  hang up /hæŋ ʌp/ 挂起来  wear /wɛə/ 穿  go home 回家  go to bed 去睡觉  play computer games /kəm'pju:tə geims/玩电脑游戏  play chess /tʃes/ 下棋  do housework /'hauswə:k/ 做家务  empty the trash/'empti træʃ/倒垃圾  put away the clothes /kləuð/放好衣服  get off 下车  take a trip/trip/去郊游  read a magazine /,mægə'zi:n/读杂志  go to the cinema /'sinimə/去电影院  # 25、疑问词  what 什么  what colour 什么颜色  what time 几点  what day 星期几  how 怎样  how old 年龄多大、几岁  how many 多少  how much 多少钱  how tall 多高  how heavy 多重  how long 多长  how big 多大  how large /hau lɑ:dʒ/ 面积多  who/hu:/ 谁  when 什么时候  whose/hu:z/ 谁的  where/hwɛə/在哪里  why/hwai/为什么  which /hwitʃ/ 哪一个 "},{title:"给自己一个目标",path:"/posts/%E7%BB%99%E8%87%AA%E5%B7%B1%E4%B8%80%E4%B8%AA%E7%9B%AE%E6%A0%87.html",strippedContent:' # 给自己一个目标  emmmmm...   看了一个篇文章，[现在三流大学学软件工程，以后该怎么规划自己的职业生涯？](https://iask.sina.com.cn/b/1STHgP6ncdid.html)   看到最后 是这么说的：  ---  你应该给自己一个目标,是出国。是考研,还是做项目。   每一个目标都前途无量,关键在于你的努力  想到自己接本后，毕业就过了人生 100 年的`1/4`了，满脸苦涩 对于长远目标 毫无思绪。  自己在假期干过 4 个月 的搬砖工   主搬 WX 小程序的砖  插入一个小片段   这 4 个月的一些总结:  ---  1. 认识到了一个团队的必要性 和 团队里不同人物会产生的多种影响力。      还有员工之间的情谊，该有什么样的距离。(同样略微领略了 老板的决断力，当然不是第一次，小梦的店我现在也记忆犹新) 2. 在工作期间的技术提升，具备了一定的 javascript 使用能力、渲染数据、处理数据的方法。会了全局函数、回调函数、还有代码规范 3. 创业不易!!!  对于程序员这个职业很喜欢。WO 喜欢把手放在键盘上面，喜欢手指带动按键震动的感觉，喜欢互联网里五花八门的信息，总之不会厌烦。   当然做一个搬砖工都可以，但编程不止于看着文档编写程序，引用文章里的"编程不是按部就班的操作，弄出一个窗口就可以的，而是要会将实际问题转化为计算机逻辑的工作，也就是应用层干的活"。我向往这种 IT 大牛，他们可以将问题考虑的很透彻，避免很多不必要的麻烦，为无数的搬砖工指引方向。多么神圣。往往这样的人物都是技术总监(现在来看，以我的认知)  梦想很美好，但现实也很骨感   目前我的处境十分糟糕 没有对任一语言的透彻领悟 自学进度十分的慢 稍有困难的问题就容易 放弃转而投向另一种办法或者语言的学习，我总感觉自己不适合搞研究，因为自己没有足够的毅力   其实我也不是那么的糟糕，领悟能力较强的我，总能快速理解新鲜实物，但缺乏笔记落实，很快就会忘得一干二净，所以要勤记录。  现在的我正在复习加油考本，考本后目标定为成为一个有价值的人，要受人尊重、为人谦逊，还要具备一些好的习惯，读书的习惯，健身，钻研问题的习惯，对于另一半，曾经有过，但分开了。所以短期不会在这方面投入精力，做所谓的高冷 boy  2020-02-01 21:07:26  ---  # 那时候的目标很茫然，现在列下一些目标  1. 保持良好的生活作息朝 6 晚 9  2. 按照健身计划每周如数进行，达到良好的体魄 3. 接本学习，严格 严格 严格按照 日程列表进行，不的浪费时光 4. 1个月读完至少一本书，纸质，每天1h 5. 1个月至少看一个豆瓣高分电影 6. 养成每天看一个短片英文文章习惯 7. 游戏，绝不一个人自己玩，避免过度 8. 空闲时间多去了解新鲜事物  2020年3月4日 22:36:11  ---'},{title:"微机原理笔记(需背篇)",path:"/posts/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.html",strippedContent:' # <div style="color:lightblue;text-align:center;">需背篇</div>  # 简答题[more](https://github.com/lambertlt/lambertlt.github.io/raw/ff14cf6c34fea9a3827d11ad3864394241f2a71a/file/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AE%80%E7%AD%94%E9%A2%98%E6%80%BB%E7%BB%93.pdf)  ---  1. 在基于8086的微计算机系统中，存储器是如何组织的？是如何与处理器总线连接的？信号起什么作用?      8086 为 16 位处理器，可访问 1M 字节的存储器空间；1M 字节的存储器分为两个 512K 字节的存储体，命名为偶字节体和奇字节体；(4 分)       偶体的数据线连接 D7~D0，选择信号接地址线 A0；奇体的数据线连接 D15~D8，选信号接BHE信号；(4 分)       BHE 信号有效时允许访问奇体中的高字节存储单元，实现 8086 的低字节访问、高节访问及字访问。(2 分)  2. 简述主机与外设进行数据交换的几种方式。      主机与外设进行数据交换的常用方式有：无条件传送方式、程序查询方式、中断方式和 DMA 传送。(2 分)       无条件传送方式，常用于简单设备，处理器认为它们总是处于就绪状态，随时进行数据传送。(2 分)       程序查询方式：处理器首先查询外设工作状态，在外设就绪时进行数据传送。(2 分)       中断方式：外设在准备就绪的条件下通过请求引脚信号，主动向处理器提出交换数据的请求。处理器无其他更紧迫任务，则执行中断服务程序完成一次数据传送。(2 分)       DMA 传送： DMA 控制器可接管总线，作为总线的主控设备，通过系统总线来控制存储器和外设直接进行数据交换。此种方式适用于需要大量数据高速传送的场合。(2 分)   3. 8086CPU 系统中为什么要用地址锁存器？当用74LS373芯片作为地址锁存器时需要多少片74LS373？      8086CPU 由于引脚数量少,其地址总线采用了分时复用的双重总线(A 19 -A16 /S6 -S3 和 AD15~AD0以及BHE /S7 )(2 分)；       仅在总线周期的 T l 时钟周期输出地址信号，而在整个总线周期中地址信号需保持不变，这就需用地址锁存器将 T1 周期发出的地址信号锁存起来以在整个总线周期中都能使用(3 分)；       为此8086CPU 在 T1 周期提供地址锁存允许信号 ALE(正脉冲)，用 ALE 的下降沿将地址信息锁存在地址锁存器中(2 分)。       共需 3 片 73LS373 芯片用作地址锁存器，锁存信息 A19~A0和BHE。(3 分)   4. 简述存储系统的层次结构及各层存储部件的特点。      为解决容量．速度和价格的矛盾，存储系统采用金字塔型层次结构，单位价格和速度自上而下逐层减少，容量自上而下逐层增加。 (3 分)       存储系统的各层存储部件自上而下依次是：CPU 寄存器、高速缓存、主存存储器(RAM/ROM)，辅助存储器如磁盘、光盘等。 (3 分)       CPU 寄存器、高速缓存器集成在 CPU 芯片上，对用户来说，是透明的，它们用于暂存主存和处理器交互的数据，以减少频繁读取主存而影响处理器速度；(2 分)       主存储器则可和处理器直接交换数据，而辅助存储器必须经过主存存储器，才可与处理器进行数据交换。(2 分)    5. 什么是接口？接口的基本功能是什么？      微机接口是位于主机与外设之间的一些转换电路的总称。(2 分)       通常接口具有以下功能：       (1)设置数据的寄存、缓冲逻辑，以适应 CPU 与外设之间的速度差异，协调快速 CPU 与慢速的外设之间数据传送的矛盾和时序差异；       (2)能够进行信息格式的转换，例如串行和并行的转换；       (3)能够协调 CPU 和外设在信息的类型和电平高低方面的差异，如电平转换驱动、数/模或模/数转等；       (4)采集外设的信息传送给 CPU，接收 CPU 发出的控制命令及启动外设工作，设置中断和 DMA 控制逻辑。地址译码和设备选择功能，识别 CPU 要访问的外设。(8 分)  6. 在计算机上运行汇编语言程序的步骤是什么？      (1)用编辑文件如 EDIT 编辑源文件，形成.ASM 文件；       (2)用汇编程序(MASM)把.ASM 源文件汇编成目标文件.OBJ；       (3)用连接程序(LINK)把.OBJ 文件转换成.EXE 可执行文件；       (4)运行可执行文件.EXE；(5)若有错，使用 DEBUG 进行调试。  7. CPU响应外部中断的条件是什么？简述中断处理过程      CPU 响应中断要有三个条件：外设提出中断申请；本中断位未被屏蔽；中断允许。(3 分)       可屏蔽中断处理的过程一般分成如下几步：(7 分)       中断请求、中断响应、保护现场、转入执行中断服务子程序、恢复现场和中断返回。        CPU 在响应外部中断，并转入相应中断服务子程序的过程中，要依次做以下工作：            ⑴从数据总线上读取中断类型号，将其存入内部暂存器。           ⑵将标志寄存器 PSW 的值入栈。           ⑶将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。           ⑷保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断处理完毕后，能正确返回到主程序继续执行。           ⑸根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。           ⑹中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点处，继续执行原来的程序   8. 8086/8088执行了一个总线周期是指8088/8086做了哪些可能的操作？基本总线周期如何组成？在一个典型的读存储器总线周期中，地址信号，ALE信号，信号、数据信号分别在何时产生？      (1)“8086/8088 执行了一个总线周期”是指：①8086/8088 可能从片外的存储器取指令； ②8086/8088可能对片外的存储器或 I/O 接口进行了一次读/写数据的操作。       (2)基本总线周期由 T1 至 T4 四个时钟周期组成。       (3)在一个典型的读存储器总线周期中，地址信号在 T1 周期内产生，ALE 信号在 T1 周期内产生， RD信号在 T2 周期内产生，数据信号一般在 T3 周期内产生，若存储器在 T3 内来不及提供数据，8086/8088会在总线周期中的 T3 后插入等待状态 Tw，存储器将在某 Tw 中给出数据。  9. 什么是中断类型码、中断向量、中断向量表、？在基于8086/8088的微机系统中，中断类型码和中断向量之间什么关系？      处理机可处理的每种中断的编号为中断类型码。中断向量是指中断处理程序的入口地址，由处理机自动寻址。中断向量表是存放所有类型中断处理程序入口地址的一个默认的内存区域。在 8086/8088 系统中，中断类型码乘 4 得到向量表的地址指针，从此处读出 4 字节内容即为中断向量。  10. 比较8255A三种工作方式的应用场合有何区别？      方式 0 适用于同步传送和查询传送方式，方式 1 适用于外设在能提供选通信号或数据接收信号的场合，且采用中断传送方式比较方便；方式 2 适用于一个并行外设既可以作为输入设备，又可以作为输出设备，并且输入和输出不会同时进行的场合。       中断时为什么要安排中断优先级？什么情况下程序会发生嵌套？       处理器随时可能会收到多个中断源提出的中断请求，因此，为每个中断源分配一级中断优先权，根据它们的高低顺序决定响应的先后顺序。 必须在中断服务程序中开中断，程序才会发生中断嵌套。  11. 在8086中，逻辑地址、偏移地址、物理地址分别指的是什么？具体说明 逻辑地址是在程序中对存储器地址的一种表示方法，由段地址和段内偏移地址两部分组成，如 1234H：0088H；偏移地址是指段内某个存储单元相对该段首地址的差值，是一个 16 位的二进制代码；物理地址是8086 芯片引线送出的 20 位地址码，用来指出一个特定的存储单元。  12. 外设向CPU申请中断，但CPU不响应，其原因有哪些可能？ 1)该中断请求持续时间太短；     2)CPU 未能在当前指令周期的最后一个时钟周期采样到中断请求信号；     3)CPU 处于关中断状态；4)该中断级被屏蔽。  13. 何为可编程接口芯片?微机中使用的可编程接口芯片有哪些？ 可用编程的方法对接口功能进行选择和设定，这样的芯片称为可编程接口芯片。微机中使用的可编程接口芯片有：可编程中断控制器 8259A、可编程计数器/定时器 8253、可编程并行通信接口芯片 8255A、可编程串行异步通信接口芯片 8250、可编程直接内存访问控制器 8237A。  14. 写出把首地址为BLOCK的子数组的第6个字送到DX寄存器的指令。要求使用以下2种寻址方式：寄存器间接寻址 (2)基址变址寻址 (1)使用寄存器间接寻址：         LEA BX，BLOCK         ADD BX，10         MOV DX，[BX]          (2)使用基址变址寻址：                                 LEA BX，BLOCK                                 MOV SI，10                                 MOV DX，[BX+SI] 15. 简述在最小工作模式下，8086如何响应一个总线请求？ 外部总线主控模块经 HOLD 引线向 8086 发出总线请求信号；8086 在每个时钟周期的上升沿采样HOLD 引线；若发现 HOLD=1 则在当前总线周期结束时(T4 结束)发出总线请求的响应信号 HLDA；8086使地址、数据及控制总线进入高阻状态，让出总线控制权，完成响应过程。  16. 在8086系统中，什么是逻辑地址和物理地址？他们之间的关系是什么？ 逻辑地址是 16 位的，允许在程序中编排的地址，由段地址和段内偏移地址两部分组成。物理地址是 20 位的，是信息存放在内存中的实际地址。物理地址是由逻辑地址的段地址左移 4 位加上偏移地址计算得到的，在 CPU 的地址加法器中实现。  17. 同步传输方式和异步传输方式的特点各是什么？ 同步传输方式中发送方和接收方的时钟是统一的、字符与字符间的传输是同步无间隔的。异步传输方式并不要求发送方和接收方的时钟完全一样，字符与字符间的传输是异步的。  18. 什么是PCI总线？什么是USB？ PCI总线是微处理机机箱内的底板各个插件板的一种数据传输标准，32/64位标准总线。PCI 总线是同步且独立于微处理器的，具有即插即用的特性，允许任何微处理器通过桥接口连接到 PCI 总线上。 USB 是与系统之间、系统与外部设备之间的信息通道，USB 已成为目前电脑中的标准扩展接口，支持设备的即插即用的特性。  19. 简述微机工作过程 微机的工作过程就是执行程序的过程，而程序由指令序列组成。执行程序的过程，就是执行指令序列的过程。执行每一条指令，都包括取指令与执行指令两个基本阶段。 因此微机的工作过程，也就是不断地取指令和执行指令的过程。 在取指阶段，CPU 从内存中读出的内容必为指令，把它送至指令寄存器 IR，然后由指令译码器译码，控制器发出相应的控制信号，CPU 便知道该条指令要执行什么操作。 在执指阶段，CPU 执行指令所规定的具体操作。当一条指令执行完毕后，就转入了下一条指令的取指阶段，周而复始地循环，一直进行到程序结束。  20. 8086如何响应一个外部的INTR中断请求？  INTR 可屏蔽中断的一般过程是：⑴中断请求:外设通过INTR引脚向CPU提出中断 ⑵中断响应：条件满足的情况下，8086 在连续的两个总线周期中发出INTA中断请求响应信号； ⑶ 中断源识别：在第二个INTA信号期间，中断源经数据总线向 8086 发出一字节的中断类型码，8086 收到中断类型码后放入暂存器； ⑷现场保护：将标志寄存器 PSW 的值入栈，将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。 (5)保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断 处理完毕后，能正确返回到主程序继续执行。 (6)根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。 (7)中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点 处，继续执行原来的程序。 21、8086系统中存储器的逻辑地址由哪两部分组成？物理地址由何器件生成？如何生成？每个段的逻辑地址与存储器之间有何对应关系？ 8086 系统中存储器的逻辑地址由段地址(段首址)和段内偏移地址(有效地址)两部分组成；存储单元的物理地址由地址加法器生成，寻址时，CPU 首先将段地址和段内偏移地址送入地址加法器，地址加法器将段地址左移 4 位并与段内偏移地址相加，得到一个 20 位的物理地址。数据段的段地址在 DS 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。代码段的段地址在 CS 寄存器中，段内偏移地址在 IP 寄存器中。堆栈段的段地址在 SS 寄存器中，段内偏移地址在 SP 寄存器中。扩展段的段地址在 ES 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。  22. 简述8086内部中断的种类及特点. (1)内部中断又称软件中断，是通过软件调用的不可屏蔽中断，包括溢出中断、除法出错中断、单步中断、INT n 指令中断及单字节 INT 3断点中断。   (2)中断类型码或者包含在指令中，或者是预先规定的；   (3)不执行 INTA 总线周期；   (4)除单步中断外，任何内部中断都无法禁止；(5)除单步中断外，任何内部中断的优先级都比任何外部中断的高。  23. 8086处理器的输入控制信号RESET、READY、HOLD的含义各是什么？当他们有效时，8086CPU将出现何种反应？  RESET：复位输入信号，高电平有效。该引脚有效时，将迫使 8086 处理器回到其初始状态；转为无效时，CPU 重新开始工作。(3 分) READY：准备好信号，高电平有效的输入信号，表示存储器或 I/O 端口准备好。处理器的运行速度远远快与存储器和 I/O 端口，当处理器检测到 READY=0 时存储器或 I/O 端口不能按基本的总线周期进行数据交换时，需要插入一个等待状态 Tw，当处理器检测到 READY=1 时，可以进行数据交换时。(4 分) HOLD：总线请求，是一个高电平有效的输入信号。该引脚有效时，表示其他总线主控设备向处理器申请使用原来由处理器控制的总线。(3 分)  24. DRAM为什么要刷新？如何进行刷新？ .DRAM 以单个 MOS 管为基本存储单元，以极间电容充放电表示两种逻辑状态。由于极间电容的容量很小，充电电荷自然泄漏会很快导致信息丢失，所以要不断对它进行刷新操作．即读取原内容．放大再写入。(5 分) 存储系统的刷新控制电路提供刷新行地址，将DRAM 芯片中的某一行选中刷新。实际上，刷新 控制电路是将刷新行地址同时送达存储系统中所有 DRAM 芯片，所有 DRAM 芯片都在同时进行一行的刷新操作。刷新控制电路设置每次行地址增量，并在一定时间间隔内启动一次刷新操作，就能够保证所有DRAM 芯片的所有存储单元得到及时刷新。(5 分)  25. 一般接口电路中应具有哪些电路器件？ (1)输入/输出数据锁存器和缓冲器，用于解决 CPU 与外设之间速度不匹配的矛盾，以及起隔离和缓冲的作用。(2)控制命令和状态寄存器，以存放 CPU 对外设的控制命令以及外设的状态信息。(3)地址译码器，用于选择接口电路中的不同端口(寄存器)。(4)读写控制逻辑。(5)中断控制逻辑。 26. 比较串行通信与并行通讯的优缺点 (1)从传送距离上看：并行通信适宜于近距离的数据传送，通常小于 30 米；而串行通信适宜于远距离的数据传送可以从几米到数千公里；   (2)从传送速度上看：并行通信传送数据的速度比串行通信快得多；   (3)从传送设备和费用上：在远距离传送中通信线路的费用占很大的比重，因而串行通信的费用由于传送线少而比并行通信的费用低得多。  27. 8086CPU中有哪些寄存器？分别说明用途。哪些寄存器用来指示存储器单元的偏移地址？ 8086 CPU 中有 8 个通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI；两个控制寄存器 IP、FR；4 个段寄存器 CS、DS、SS、ES。8 个通用寄存器都可以用来暂存参加运算的数据或中间结果，但又有各自的专门用途。例如，AX 专用做累加器，某些指令指定用它存放操作数和运算结果；CX 为计数寄存器，在某些指令中做计数器使用；DX 为数据寄存器；BX 为基址寄存器，BP 为基址指针，SI 为源变址寄存器，DI 为目的变址寄存器，这 4 个寄存器在数据寻址中用来存放有效地址或段内偏移地址的一部分； SP 为堆栈指示器，用来存放栈顶有效地址。两个控制寄存器用来存放有关的状态信息和控制信息。例如，标志寄存器 FR 用来存放状态标志和控制标志；而指令指针用来存放下一条要取指令的有效地址。4 个段寄存器用来存放内存的段地址。  28. 信号的作用是什么？试说明当起始地址为奇地址、偶地址、一次读写一个字节和一个字时，和A0的状态。 信号的作用是高 8 位允许引脚。若为 0 则表示对一个字进行操作，即高 8 位有效，若为 1 则表示对一个字节进行操作，即高 8 位无效。当起始地址为奇地址时，一次读写一个字节时，为0，A0 状态为 1；当起始地址为偶地址时，一次读写一个字节时，为 1，A0 状态为 0；当起始地址为奇地址时，一次读写一个字时，为 0，A0 状态为 1；当起始地址为偶地址时，一次读写一个字时，为 0，A0 状态为 0。  30. 简述8259A的基本组成部分。 8259A 的基本组成有：①IRR，8 位中断请求寄存器，用来存放从外设来的中断请求信号 IR0 ~ IR7； ②IMR，8 位中断屏蔽寄存器，用来存放 CPU 送来的屏蔽信号； ③ISR，8 位中断服务寄存器，用来记忆正在处理中的中断请求； ④PR，优先级判别器，也称优先级分析器； ⑤控制逻辑；⑥数据总线缓冲器；⑦读/写逻辑； ⑧级联缓冲器/比较器。其中，IRR、IMR、ISR、PR 和控制逻辑五个部分是实现中断优先管理的核心部件。  31. 比较SRAM和DRAM的特点 SRAM 特点： (1)存储的数据信息只要不断电，就不会丢失；不需要定时刷新，简化了外部电路。 (2)相对动态 RAM，存取速度更快。 (3)内部电路结构复杂，集成度较低，功耗较大，制造价格成本较高。 (4)一般用作高速缓冲存储器(cache)。  32. DRAM 的特点主要有： (1)集成度高、功耗小，制作成本低，适合制作大规模和超大规模集成电路，微机内存储器几乎都是由DRAM 组成。 (2)由于电容存在漏电现象，存储的数据不能长久保存，因此需要专门的动态刷新电路，定期给电容补充电荷，以避免存储数据的丢失或歧变。     33. 简述中断传送方式和DMA传送方式相比有什么不同 ①中断方式通过程序实现数据传送，而 DMA 方式不使用程序直接靠硬件来实现，信息传送速度快。 ②CPU 对中断的响应是在执行完一条指令之后，而对 DMA 的响应则可以在指令执行过程中的任何两 个存储周期之间，请求响应快。 ③中断方式必须切换程序，要进行 CPU 现场的保护和恢复操作。DMA 仅挪用了一个存储周期，不改变 CPU 现场，额外花销小。 ④DMA 请求的优先权比中断请求高。CPU 优先响应 DMA 请求，是为了避免 DMA 所连接的高速外设丢失数据。 ⑤中断方式不仅具有 I/O 数据传送能力，而且还能处理异常事件，DMA 只能进行 I/O 数据传送。 总而言之，在进行 I/O 控制时，DMA 控制方式比程序中断控制方式速度快，但程序中断控制方式的应用范围比 DMA 控制方式广。    34. 半导体存储器主要分为哪几类？简述他们的用途和区别 按照存取方式分，半导体存储器主要分为随机存取存储器RAM(包括静态RAM和动态RAM)和只读存储器ROM(包括掩膜只读存储器，可编程只读存储器，可擦除只读存储器和电可擦除只读存储器)。 RAM在程序执行过程中，能够通过指令随机地对其中每个存储单元进行读\\写操作。一般来说，RAM中存储的信息在断电后会丢失，是一种易失性存储器，RAM的用途主要是用来存放原始数据，中间结果或程序，与CPU或外部设备交换信息。 而ROM在微机系统运行过程中，只能对其进行读操作，不能随机地进行写操作。断电后ROM中的信息不会消失，具有非易失性。ROM通常用来存放相对固定不变的程序、汉字字型库、字符及图形符号等。 根据制造工艺的不同，随机读写存储器 RAM 主要有双极型和 MOS 型两类。双极型存储器具有存取速度快、集成度较低、功耗较大、成本较高等特点，适用于对速度要求较高的高速缓冲存储器；MOS 型 存储器具有集成度高、功耗低、价格便宜等特点，适用于内存储器。     35. 8086处理器的输入控制信号NMI和INTR的含义各是什么？当它们有效时，8086CPU将出现何种反应？以INTR为例，简述中断过程 NMI:不可屏蔽中断请求，是一个利用上升沿有效的输入信号。该引脚信号有效时，表示外界向处理器申请不可屏蔽中断。 INTR:可屏蔽中断请求，是一个利用高电平有效的输入信号。该引脚信号有效时，表示中断请求设备向处理器申请可屏蔽中断。 INTR 可屏蔽中断的一般过程是： ⑴中断请求:外设通过INTR引脚向CPU提出中断 ⑵中断响应：条件满足的情况下，8086 在连续的两个总线周期中发出INTA中断请求响应信号； ⑶ 中断源识别：在第二个INTA信号期间，中断源经数据总线向 8086 发出一字节的中断类型码，8086 收到中断类型码后放入暂存器； ⑷现场保护：将标志寄存器 PSW 的值入栈，将 PSW 中的中断允许标志 IF 和单步标志 TF 清 0，以屏蔽外部其它中断请求，避免 CPU 以单步方式执行中断处理子程字。 (5)保护断点，将当前指令下面一条指令的段地址 CS 和指令指针 IP 的值入栈，中断 处理完毕后，能正确返回到主程序继续执行。 (6)根据中断类型号到中断向量表中找到中断向量，转入相应中断服务子程序。 (7)中断处理程序结束以后，从堆栈中依次弹出 IP、CS 和 PSW，然后返回主程序断点 处，继续执行原来的程序   36. 简述8086和8088的区别 8086：是完全16机内部寄存器和外部数据总线都是16位的。8088：寄存器是16位，外部数据总线是8位的。 8086 有6字节的指令队列，8088 有4字节的指令队列 8086有一条高八位数据总线允许引脚，8088没有。8086把1MB的存储器分为两个512K的存储体分别由起始地址和A0信号作为奇体和偶体的选通信号 8086和8088的存储器和外设选择信号引脚不同。8086为M/ 8088为IO/。   37. 简述触发器，寄存器和存储器之间的关系 触发器是计算机记忆装置的基本单元，一个触发器只能存储一位二进制代码也为一个一位寄存器，多个触发器可构成多位寄存器,一个寄存器为一个存储单元，多个寄存器构成一个存储器。   '},{title:"2020年考试大纲",path:"/posts/2020%E5%B9%B4%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2.html",strippedContent:" # 2020 考试大纲  ## |[高数 1](https://www.jxnedu.cn/ueditor/net/upload/file/20191204/6371107630068925158230008.pdf)|[高数 2](https://www.jxnedu.cn/ueditor/net/upload/file/20191204/6371107630030251619044572.pdf)|[英语](https://www.jxnedu.cn/ueditor/net/upload/file/20191204/6371107630057595018730774.pdf)| [专业知识](https://www.jxnedu.cn/ueditor/net/upload/file/20191204/6371107645997539546297477.pdf)|  [其他专业自行点此链接查看](https://www.jxnedu.cn/news/newsCon?id=5173) "},{title:"浏览器调皮title设置",path:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%9A%AEtitle%E8%AE%BE%E7%BD%AE.html",strippedContent:" ``` document.addEventListener('visibilitychange',function(){ //浏览器切换事件  if(document.visibilityState=='hidden')   { //状态判断     //normal_title=document.title;     document.title = '(●――●)喔呦,崩溃啦!';     document.getElementById('icon').target=\"_blank\" href='../images/leaveIcon.png';   }   else   {     document.title='(/≥▽≤)咦?又好了!';     document.getElementById('icon').target=\"_blank\" href='../images/icon.png';//需要修改的图片路径     setTimeout(function () {       document.title = 'Hi,DIYgod';     },2000)//计时器   } ``` "},{title:"汇编学习总结",path:"/posts/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html",strippedContent:" # 汇编学习笔记  ## 一、基础知识  ### 汇编语言的组成  - 汇编语言由 3 类指令组成   1. 汇编指令：机器码的助记符，有对应的机器码   2. 伪指令：没有对应的机器码，由编译器执行，计算机并不执行   3. 其他符号：如`+ 、- 、 * 、 /`等，由编译器识别，没有对应的机器码  汇编语言的核心是汇编指令，它决定了汇编语言的特性  ### 存储器  即为内存  ### 指令和数据  ### 存储单元  存储器被分为若干个存储单元，每个存储单元从 0 开始顺序编号，例如 0 ～ 127   计算机最小信息单位是 `bit` 也就是一个二进制位。8 个`bit` 组成一个 `byte` 也就是通常所说的一个字节。  ## 一个汇编程序的基本结构  1. 这是定义一个段，名称为 abc     ```     abc segment       .       .     abc ends    ```  2. 在这个段中写入汇编指令，来实现相关任务     ```     abc segment      mov ax,2     add ax,ax     add ax,ax      abc ends    ```  3. 然后 要指出程序在何处结束     ```     abc segment      mov ax,2     add ax,ax     add ax,ax      abc ends      end    ```  4. abc 被当做代码段来用，所以，应该将 abc 和 cs 联系起来。(当然这个程序，也不是非这样做不可)     ```     assume cs：abc     abc segment      mov ax,2     add ax,ax     add ax,ax      abc ends      end    ```  5. 程序返回  一个程序结束后，将 CPU 的控制权 交给使它得以继续运行的程序，我们称这个过程为:**程序返回**。   那么如何返回呢？ 应该在程序的末尾 添加返回的程序段  ```   mov ax,4c00H   int 21H // 这两条指令 所实现的功能就是程序返回 ```  - 与结束相关的概念   | 目的 | 相关指令 | 指令性质 | 指令执行者 |   | -------------------- | -------------------- | -------- | -------------------- |   | 通知编译器一个段结束 | 段名 ends | 伪指令 | 编译时，由编译器执行 |   | 通知编译器程序结束 | end | 伪指令 | 编译时，由编译器执行 |   | 程序返回 | mov ax,4c00H int 21H | 汇编指令 | 执行时，由 CPU 执行 |  # 执行一个汇编源程序的步骤在 dosbox 下  在 dosbox 下 输入 masm 可以显示出版本  - masm    编译文件 `masm xx.asm`     第一个回车 确定输出目标文件名称     第二个回车 忽略列表文件生成     第三个回车 忽略交叉引用文件生成  在 dosbox 下 输入 link 可以显示出版本  - link    连接 目标文件 从而得到可执行文件     连接文件 `link xx`     第一个回车 输入可执行程序的名称     第二个回车 忽略映像文件生成     第三个回车 输入调用的子程序 忽略库文件的连接 忽略按回车     最后会报一个错`LINK : warning L4021:no stack segment // 没有栈段 这里我们不理会这个错误`  说完复杂的 方法 现在换简单的  `masm xx; // 在结尾加上分行，按enter后，编译器就对xx文件进行编译，在当前目录生成目标文件xx.obj，并在编译的过程中自动忽略中间文件的生成`  `link xx; // 同上` "},{title:"linux进程管理PS和Kill",path:"/posts/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86PS%E5%92%8CKill.html",strippedContent:" # PS 命令  在 Linux 系统中，ps(Process Status 的缩写)命令常常用来用来列出系统中当前运行的进程。ps 命令列出的是当前那些进程的快照，就是执行 ps 命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用 top 命令。要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而 ps 命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。  Linux 上进程有 5 种状态:  | 进程状态 | 含义                                                               | 对应 ps 命令的状态码                          | | -------- | ------------------------------------------------------------------ | --------------------------------------------- | | 运行     | 正在运行或在运行队列中等待                                         | R 运行 runnable (on run queue)                | | 中断     | 休眠中, 受阻, 在等待某个条件的形成或接受到信号                     | S 中断 sleeping                               | | 不可中断 | 收到信号不唤醒和不可运行, 进程必须等待直到有中断发生               | D 不可中断 uninterruptible sleep (usually IO) | | 僵死     | 进程已终止, 但进程描述符存在, 直到父进程调用 wait4()系统调用后释放 | Z 僵死 a defunct (”zombie”) process           | | 停止     | 进程收到 SIGSTOP, SIGSTP, SIGTIN, SIGTOU 信号后停止运行运行        | T 停止 traced or stopped                      |  ps 的参数众多 在次不一一列举  ``` ps 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义 -A 列出所有的行程 -w 显示加宽可以显示较多的资讯 -au 显示较详细的资讯 -aux 显示所有包含其他使用者的行程 au(x) 输出格式 : USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND USER: 行程拥有者 PID: pid %CPU: 占用的 CPU 使用率 %MEM: 占用的记忆体使用率 VSZ: 占用的虚拟记忆体大小 RSS: 占用的记忆体大小 TTY: 终端的次要装置号码 (minor device number of tty) STAT: 该行程的状态: D: 无法中断的休眠状态 (通常 IO 的进程) R: 正在执行中 S: 静止状态 T: 暂停执行 Z: 不存在但暂时无法消除 W: 没有足够的记忆体分页可分配 <: 高优先序的行程 N: 低优先序的行程 L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱 A I/O) START: 行程开始时间 TIME: 执行的时间 COMMAND:所执行的指令 ```  # Kill 命令  ``` kill PID // 杀死进程 kill -KILL PID // 强制杀死进程 kill -9 PID // 彻底杀死进程 ``` "},{title:"linux下的包管理器",path:"/posts/linux%E4%B8%8B%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8.html",strippedContent:" # 本地管理：dpkg 命令  基于 Debian 操作系统 (UBUNTU) 的 DEB 软件包管理工具－ DPKG，全称为 Debian Package，是一个可以安装、构建、删除及管理 Debian 软件包的命令行工具，用来制作 Debian 包的工具，同时也可以查看、解压 Debian 包。  ```  dpkg -i // 全称的安装命令，必须全称  dpkg -L // 列出安装的路径，可以查看怎么使用， package 只需要前边的名字就可以  dpkg -r // 卸载， package 只需要前边的名字就可以  dpkg -P // 卸载软件及配置文件  dpkg -s // 显示软件安装的状态，看是不是安装了 ```  # 在线安装：apt 类命令  由于操作系统中软件包存在复杂的依赖关系，为了解决软件包的依赖性问题和获取问题，出现了 APT（是 Debian Linux 开发的）   APT 是 Ubuntu Linux 中的命令行软件包管理工具，用于获取、安装、编译、卸载和查询 Deb 软件包，以及检查软件包的依赖关系。   常用的 APT 实用程序是 `apt-get、apt- cache、apt-file、apt-cdrom` 等。   Ubuntu 采用集中式的软件仓库机制，将各式各样的软件包分门别类的存放在软件仓库中，进行有效的组织和管理。然后，将软件仓库至于许许多多的镜像服务器中，并保持基本一致。这样，所有的 Ubuntu 用户随时都能获得最新版本的安装软件包。因此，对于用户，这些镜像就是他们的软件源。   需要知道的 3 个路径：  ``` /etc/apt/sources.list     // 这是安装包的镜像站点 /var/lib/apt/lists        // 本地软件包索引（这样才能快速的定位用哪个网站） /var/cache/apt/archives/  // 安装包的默认下载目录 ```  ``` apt 的命令如下： sudo apt-get update                       // 更新本地索引，即更新/var/lib/apt/lists 里边的内容 sudo apt-get upgrade                      // 所有软件包都更新。。。慎用 sudo apt-get install xxxx                 // （不是全称，软件包名即可）安装 sudo apt-get --reinstall install xxxx     // 重新安装，可以在不卸载的情况下更新版本 sudo apt-get remove --purge xxxx          // 彻底卸载（–purge 是彻底） sudo apt-get clean                        // 删除默认目录下的 deb 包 sudo apt-get source xxx                   // 下载 xxx 的源码到当前目录 sudo apt-cache policy xxx                 // 查看已经安装的软件的信息 sudo apt-cache show xxx                   // 查看索引文件中已有软件包的详细信息 sudo apt-cache showpkg xxx                // 跟 show 差不多 sudo apt-cache depends xxx                // 列出 xxx 所依赖的文件 sudo apt-cache rdepends xxx               // 列出 xxx 被依赖的文件 ``` "},{title:"微机原理与接口考试大纲考点分析",path:"/posts/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2%E8%80%83%E7%82%B9%E5%88%86%E6%9E%90.html",strippedContent:" # <div style=\"color:lightblue;text-align:center;\">微机原理与接口考试大纲考点分析</div>  ## 一、微型计算机基础  #### 微型计算机的基本组成电路(知识范围里的内容)  1. 算数逻辑单元(不考所以不做说明) 2. 触发器  RS 触发器是组成其他触发器的基础，可以用与逻辑组成，也可以用或逻辑组成。  D 触发器、JK 触发器  3. 寄存器  寄存器是由触发器组成的。一个触发器就是一个一位寄存器。由多个触发器可以组成一个多位寄存器。   寄存器由于在计算机中的作用不同而具有不同的功能，从而被命名为不同的名称。   常见的寄存器有:  缓冲寄存器 —— 用以暂存数据，以便在适当的时间节拍和给定的计算步骤将数据输入或输出到其他记忆原件中去   可控缓冲寄存器 —— what?  移位寄存器 —— 能够将其所储存的数据一位一位的向左或向右移,以达到计算机在运行过程中所需的功能   可控移位寄存器 —— 和缓冲器一样，在整机运行中，移位寄存器也需要另有控制电路，以保证其在适当时机才参与协调工作  计数器 —— 一个计数脉冲到达时，会按照二进制数的规律累计脉冲数;  累加器 —— 用以暂存每次在 ALU 中计算的中间结果　除此之外　还可以　将其中储存的数据左移或右移，所以它有事一种移位寄存器。  4. 三态输出电路      由于记忆元件是由触发器组成的，而触发器只有两个状态: 0 和 1，所以每条信号传输线只能传送一个触发器的信号(0 或　 1 )。      如果一条信号传输线既能与一个触发器接通，也可以与其断开而与另外一个触发器接通，则一条信息传输线就可以传输随意多个触发器的信息了。      三态输出电路(或称三态门)就是为了达到这个目的而设计的。  5. 总线结构      单总线，双总线，双重总线 [详情](https://blog.csdn.net/qq_39368007/article/details/84192631)     ![bus](https://i.ibb.co/c2xRHTR/TIM-20200115222913.jpg)  6. 译码器      译码器是可以将一种代码翻译成控制信号，或将一组信息中去除所需要的一部分信息。     3-8 译码器 —— 集成译码器 74LS138，它有 3 个输入端、3 个控制端及 8 个输出端  ![3-8](https://i.ibb.co/Fxhy710/89-F567-BC-95-B1-40-B8-8-CBE-D598-E1-F58905.jpg)  7. 存储器  存储器是计算机的主要组成部分。   它既可以存储数据，也可以存放计算机的运算程序。   存储器有寄存器组成，可以看做一个寄存器堆，每个存储单元实际上相当于一个缓冲寄存器  `存储容量 = 字数 * 字长`   字数既存储器的地址数 或者 存储单元数   字长即记忆字的二进制位数  ```                                     ROM     由厂家写好只能读不可修改                                    PPOM    出厂时为空 一次性可编程         ROM (只读存储器)只读不可改{   EPROM   紫外线可擦除，多次可读写，清空时晒太阳                                    EEPROM  电子可擦除 存储器 {                                    DRAM    动态  （电容) 补充电荷--\x3e刷新--\x3e适作内存         RAM (随机存储器)既可读也可写{                                    SRAM    静态   (双稳态触发器) 适合作高速缓存 (cache) ```          RAM 的每个存储器单元相当于一个可控缓冲寄存器  |                                                | 随机存储器 RAM |                                                   | | ---------------------------------------------- | -------------- | ------------------------------------------------- | | 双极性 RAM                                     |                | MOS 型 RAM                                        | | 不需刷新;功耗大;适宜于存储容量较小的系统中使用 |                | 需刷新;集成度高;功耗低;适于构成大容量的存储器系统 |  存储器与 CPU 的接口   在 CPU 对存储器进行读/写操作时，首先要由地址总线给出地址，然后要发出相应的读/写控制信号，最后才能在数据总线上进行信息交换。所以存储器和 CPU 的连接，有三个部分:  1. 地址线的连接 2. 数据线的连接 3. 控制线的连接  在这加一个无处安放的 **高速缓存(cache)** 是为了提高 CPU 与主存的速度不匹配问题  存储器内容过多 TO DO  #### 1. 理解微处理器、微型计算机和微型计算机系统的概念及其相互关系。  - 微处理器：是指第四代大规模、超大规模集成电路的 CPU，是单纯的硬件概念。     微处理器是构成计算机的部件之一     ![微处理器](https://img-blog.csdnimg.cn/20190329133744150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3RUYW8=,size_16,color_FFFFFF,t_70)  - 微型计算机：是指用计算机的 CPU 是用微处理器组成的电脑。     微型计算机是由微处理器、存储器、接口等组成     ![微型计算机](https://img-blog.csdnimg.cn/20190329133721958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3RUYW8=,size_16,color_FFFFFF,t_70)  - 微型计算机系统：是指一个完整的计算机系统，是由硬件和软件组成的计算机体系。即：硬件是微型计算机并带有软件系统的整体。     微型计算机系统是以微型计算机为中心构成的一个比较大的应用系统     ![微型计算机系统](https://img-blog.csdnimg.cn/20190329133655145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3RUYW8=,size_16,color_FFFFFF,t_70)  - 三者关系     [详细见链接](https://blog.csdn.net/EastTao/article/details/88890756)  #### 2. 理解微机系统各部件的功能分工及计算机的工作过程。  ##### 功能分工  cpu:  1. 控制器：整机的指挥中心，它使计算机的各个部件自动协调工作。 2. 运算器：对数据信息进行处理的部件，用来进行算术运算和逻辑运算。  存储器：存放程序和数据，是计算机实现“存储程序控制”的基础。  1. 内部存储器：      ROM：只读存储器。特点：只能读，不能写；断电后信息不会丢失。主要用来存放固定不变的基本输入输出程序。      RAM：随机存取存储器。特点：可读可写；但断电后信息全部丢失。 2. 外部存储器：      用来存放暂时不用或需保存的程序或数据。当需要使用外存中的信息时，必须将其调入 RAM 中才能被 CPU 执行和处理。主要特点：存取速度慢，容量大，价格便宜。      微型计算机的外存一般有：软盘、硬盘和光盘。  ``` // 一个存储器所包含的字节数称为存储容量，单位有B、KB、MB、GB、TB等。 1 B = 8 bits （1字节 = 8位） 1 KB = 1024 B 1 MB = 1024 KB 1 GB = 1024 MB 1 TB = 1024 GB ```  输入设备：将人们熟悉的信息形式转换成计算机可以接受并识别的信息形式的设备。  - 输入设备是向计算机中输入信息（程序、数据、声音、文字、图形、图像等）的设备。     微型计算机中常见的输入设备有：键盘、鼠标、图形扫描仪、触摸屏、条形码输入器、光笔等。     外存储器也是一种输入设备。  输出设备：将计算机处理的结果（二进制信息）转换成人类或其它设备可以接收和识别的信息形式的设备  - 计算机的输出设备主要有显示器、打印机和绘图仪等。     外存储器也是一种输出设备。  主板：微机采用一种“积木式”的体系结构，主板是一块印刷电路板，有多个长方形的插槽，CPU、内存、显卡、多功能卡等都可以插在主板上。多功能卡上有串行口（用来连接鼠标）和并行口（用来连接打印机等外设）。另外声霸卡、视卡、调制解调器等也将插在主板上。  接口：输入/输出接口电路是微处理器与外部设备之间的信息变换和实现缓冲功能必不可少的部件。  总线（BUS）是连接微机各部件之间的一组公共信号线，是计算机中传送数据和信息的公共通道。根据所传送信息的不同，总线分为地址总线（AB)-addressBug、数据总线(DB)-dataBug 和控制总线(CB)-controlBus。  ##### 工作过程  1. 程序员编写汇编源程序 2. 对源程序进行编译连接    - 编译连接后 会产生目标文件，再用连接程序对目标文件进行连接，生成可在操作系统中直接运行的可执行文件。 3. 执行可执行文件中的程序  学会接口编程就知道啦  #### 3. 掌握计算机中各种信息的表示及运算。  - **进制**  1. ２进制　后缀`Ｂ`     - ２进制->8 进制        ２进制的每三位为八进制的一位     - 2 进制->10 进制        举例 `1010(2) = 1*2^3 + 0*2^2 + 1*2^1 + 0*2^0 = 10(10)`     - 2 进制->16 进制        2 进制的每四位为十六进制的一位  2. ８进制　后缀`Ｑ`(此处本位Ｏ但由于和 0 相似　顾加了小尾巴)  3. 10 进制　后缀`D`  4. 16 进制　后缀`H`  5. BCD 码      ‎BCD 是 Binary-Coded Decimal 的简称，用 4 位二进制数来表示 1 位十进制数中的 0~9 这 10 个数码，就是说二进制编码的十进制数，也就是所说的 BCD 码。     - ![bcd](https://iknow-pic.cdn.bcebos.com/2934349b033b5bb5686bbc553ad3d539b700bcd9)         [bcd 详解](https://blog.csdn.net/weixin_34203832/article/details/90683885)  - ８ 10 16 进制的不一一举例 le  - 对于小数部分在转码时要进行补位  举例:`1010.1(2) = 1010.1000 = A.8(16)`  符号位：　１为负　０为正  |      | 原码 -> 补码         | | ---- | -------------------- | | 正数 | 不变                 | | 负数 | 符号位不变、取反加一 |  - **２进制四则运算**  1. 加法    1. 无符号 全正 判断有无溢出　由 `CF` 决定　       1 溢出　 0 无溢出    2. 有符号 全负 判断有无溢出　由　`OF`　决定       1 溢出　 0 无溢出    3. 有符号　一正一负　相加不会溢出只会往中间靠拢(举例数轴上正负相加) 2. 减法      减法实际上是通过加法实现，通过将二进制原码　数转化为　补码　再转换成机器负数　进行相加操作     机器负数: **补码基础上　包括符号位在内　取反　加一**  如过进位超出　符号位　就舍去  - **ASCLL**  `0 ~ 9,a ~ z,A ~ Z`这些 ascll 　码要记住　记不住的话用　`'a'`　这种办法　可以自动转码   对于回车还有换行 在汇编语言里是一起的   字符串　在汇编里是以　`$`　结尾的  ![ascll](https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=a8288ae7fc1fbe090853cb460a096756/e850352ac65c103880a07b53bc119313b17e8941.jpg)  #### 4. 熟悉基本逻辑门及常用逻辑部件的使用。  与门　或门　非门　异或门　这些逻辑门需要掌握 "},{title:"c考题易错笔记",path:"/posts/c%E8%80%83%E9%A2%98%E6%98%93%E9%94%99%E7%AC%94%E8%AE%B0.html",strippedContent:' # 考题易错笔记  ### 常量  1. 0382 是常量？     - 因为 0 开头是八进制，不应有 8 出现    - 故错误  2. \'123\' 是常量？     - 字符串应是双引号`""`    - 故错误  3. 2.46E-1.5 是常量？     - 科学计数法 `-`符号右边应为整数 正确形式为`2.46E-15`代表 `2.46 * 10^3`    - 故错误  ### 运算顺序  1. `int x = 11; 则表达式（x++*1/3）的值是几`     - 答案是 3 因为 x 先参与运算后自加 也就是 `11/3≈3` 不明白 为什么 x 不加 1 而表达式的值为 3  2. 在遇到如`x+=y+=2`这类表达式先从右向左进行赋值运算  ### 自增运算符  1. `x++ ++x` 等这类表达式，只与本行语句相关 `++x`在本行就发生改变 `x++`到下一行时值会改变  ### 函数  1. C  语言程序中，要调用的函数必须在  main( )函数中定义     - 错因为可以在 main()函数外定义  ### 位运算  1. 正确表示条件  100≤x≤300  的  C  表达式是     -`x>=100&&x<=300`  ### 循环  1. `while` 和 `do-while` 的主要区别    - `do-while`  的循环体至少无条件执行一次 2. `int k=0; while(k=1) k--;`    - 因为 `k=1`为赋值语句 故是无限循环   3. `for(语句1,语句2,语句3) 循环体`      - 这里需要注意 进入循环 先执行 语句1，再判断，然后循环体，再是语句3。语句1只执行一次  ### 字符串(字符数组)  1. 字符串(字符数组) 赋值 `char s[10]; s="student";` 是否正确     - 错 字符串数组只有在声明时可以 这样直接赋值    - 字符数组的赋值只能按元素一一赋值（错误的原因： C 语言并没有提供可以直接操作字符串的运算符；“=”可以用于其他数据类型的赋值，但是不可以直接给字符串赋值)    - 可以用`strcpy 和 strcat`实现赋值，但本质也是操作字符  2. `strlen(str + 4)`其实是指针操作 `&str[4]`  3. 字符串长度题 `strlen("xxxxx")`    - 转义字符系列: `\\\\ 表示\\ , \\n 换行 , \\0 字符串结尾标志 , \\01 代表ASCII码为八进制1的字符 , \\x || 0xab 代表十六进制数, \\t 水平制表`  4. 字符串数组结尾标识符`\\0`    - 遇见即为字符数组结尾      - 字符串数组结尾标识符   ### 指针访问 数组元素的方法  1. `int arr[]={1,2,3,4,5};*p=arr;` 访问第四个元素的方法    - `arr[3] *(p+3) p[3]`  ### printf 输出  1. `int a=010,b=10, printf("%d,%d",++a,b--);` 输出的值为什么    - 因为 010 为 8 进制所以 ++a 等于 8+1 ，b-- 是先运算后自减 所以还是 10    - 结果为：9 10； 2. 关于输出精度问题 `3/5,3./5,3.0/5.0`    - 带点的是浮点不带的是整形  ### 标识符  1. C 语言中把标识符分为三类：关键字，预定义标识符，用户自定义标识符 2. C 语言区分大小写所以`IF`是**合法**标识符  ### c 语言布尔值  C 中是没有布尔值的，所以，可以使用相应的整数，来表示布尔值，如 0 为假，非 0 为真  1. 求输出结果 此题考验对布尔值得理解 和 逻辑运算符     ```    #include<stdio.h>      int main()      {          int x = 2,y = 2,z = 0,a;          a = ++x || ++y && z++;    // 在执行到 || 时 会判断 ++x 的 是否为真，为真就不执行后面的代码          printf("%d,%d,%d\\n",x,y,z);      }       结果：      3 2 0    ```  ### 逻辑运算符 `&& || !=`  1. && 逻辑或当一个为真即为真 后面的表达式或常量将不执行 2. || 逻辑与当两个全为真 才为真 一假全假后面的表达式或常量不执行 3. != 逻辑不等于 判断两侧是否相等  ### c 字符串长度的计算  1. 字符串 `"\\\\Too\\n\\97\\\'"`的长度是    - strlen() 传的参数是一个字符数组首地址    ```     \\\\      代表 /     \\n      代表 换行     \\97     代表 a    ```  ### ascll 字符代表码 与转义字符  ``` 注：大小写字母的转换 \'a\' -\'A\' = 32  ‘0’ 的ASCLL码为48  ‘a ’的ASCLL码为97  ’A’ 的ASCLL码为65  \'0\'即为字符 0  \'\\0\'的ascll码为0，用于字符串的结束符  NULL 其实也是ascll为0的数，只是表示方式不一样，NULL= (void*) 0；  回车，ASCII 码 13 换行，ASCII 码 10 空格，ASCII 码 32 ```  <image src="https://bkimg.cdn.bcebos.com/pic/e850352ac65c103880a07b53bc119313b17e8941@wm_1,g_7,k_d2F0ZXIvYmFpa2UxMTY=,xp_5,yp_5" />  ### 输入输出语句  - 格式化输入输出   ```     printf()     scanf()   ``` - 单个字符输入输出   ```     getchar()     putchar()   ``` - 字符串输入输出   ```     gets()     puts()   ```  ### 存储类型  - auto 自动型 函数中所有的非静态局部变量  - static 静态型 在变量前加上 static 关键字的变量 (在使用期间 未设置初始值默认 0，并且只进行一次赋初值 初值具有可继承性)  - extern 外部变量 一般用作全局变量作用域的扩展  - register 寄存器类型 一般经常被使用的的变量（如某一变量需要计算几千次）可以设置成寄存器变量，register 变量会被存储在寄存器中，计算速度远快于存在内存中的非 register 变量  - [更多详情见](http://www.sohu.com/a/204230419_554035)  ### 精度  - `double` 用 `%lf` 表示， `long int` 用 `%ld` 表示  ### 进制  - 16 进制 每一位 是 2 进制的四位  ### 变量大小  1. `char` 是 1 个字节 2. `int` 是 4 个字节  ### 递归(递龟)  常用递归的有阶乘，累加。并且只使用分之结构  1. 直接递归  2. 间接递归  ###　位运算 (`& | >> <<`)  转化成２进制数　然后　上下进行逻辑运算 '},{title:"c语言常用排序",path:"/posts/c%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F.html",strippedContent:' # c 语言排序  ### top1 冒泡排序  最稳定的排序方法之一  冒泡排序主要应用**交换排序**基本思想,还有**快速排序**也是应用的交换排序思想  每次循环 交换出一个最大或最小的  ```   #include <stdio.h>   void main()   {       int num = 0, t, a[10];       printf("please input ten number: \\n");       for (int i = 0; i < 10; i++)       {           scanf("%d", &a[i]);       }       for (int i = 0; i < 10 - 1; i++)           for (int j = 0; j < 10 - i; j++)           {               num++;               // 这里是升序排列               if (a[j] > a[j + 1])               {                   t = a[j];                   a[j] = a[j + 1];                   a[j + 1] = t;               }           }       for (int i = 0; i < 10; i++)       {           printf("%d\\t", a[i]);       }       printf("\\n loop number:%d", num);   }  ```  ### top2 快速排序  [详见链接](http://c.biancheng.net/view/528.html)  ### top3 希尔排序  [详见链接](http://c.biancheng.net/view/522.html) '},{title:"感谢你",path:"/posts/%E6%84%9F%E8%B0%A2%E4%BD%A0.html",strippedContent:' 相册你扔了吗？  压箱底，很久没见过了，不要再打扰我了，请你坚定一点。说到这我还要谢谢你，要不是你数不清的无数次摇摆和分手，我也没这么快走出来。我真的不爱你了，请你好好过自己的生活。  我清楚，你不要多想了。  你我其实不曾爱过，只是阴差阳错。  <div style="display:none"> 我和你上过床，做过爱。激烈程度甚至每次见都要做这件事，不论时间长短，或者说因为这件事而见面没谁了。 每次说一个学期必须见面两次，我就想笑😀，是因为寂寞还是因为真实的陪伴。 不管是因为什么，我都做到了。 一次又一次，我的付出成了你的理所当然。我变得一文不值临近大三，到了选择的时候因为对未来的畏惧，两个人分开了，也或者是因为我的时有时无的存在感，最终分开了。 不知道你是不是真的放下了我，还是害怕再耽搁几年青春，造成无法挽回的事情。你说你放的很开。我不相信。或者是我不相信你，很踏实的安全感或许是错觉只是对彼此的未知。 记得有次因为我没有买杜蕾斯的TT，你和我生气，后来退掉了那个，买的杜蕾斯，也买过冈本，我们做爱没有情趣所以是没有感觉的，只是挥霍当下空荡的灵魂罢了。 你的屁股蹋蹋的，但你很瘦，身材还是说的过去，就是脸长得一般般，值得一提的是有一个对我没兴趣的有趣的灵魂，你注定是来玩弄我的吧。chen· 我放荡了两年大学生活最后失去了你，满满的空荡感。让我一时间失去了方向。 </div>'},{title:"shell命令笔记",path:"/posts/shell%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0.html",strippedContent:' ## 命令打开文件夹  nautilus /home  ## shell 基本规则介绍  在终端可以直接输入命令 命令与命令之间，通过 `;` 分开 例如：`date;who`   `echo ""` 可以在终端输出内容 例如：`echo date ; who`   echo 中 `\\$14` 可以识别输出 `$` 不加`\\`echo 会将 `$`识别为变量   输出时间  ```   echo "date +`%F` `%H:%M:%S`" // 结果为:2019-12-24 12:30:24 ```  ``` 内容  >   //是输出内容覆盖文件后跟 文件名  内容  >>  // 是追加输出内容 文件名 ```  ## 查看主机 开机运行时长  `uptime`  ```  09:09:40 up 1 day, 15 min,  1 user,  load average: 0.08, 0.08, 0.07 ``` '},{title:"linux权限问题",path:"/posts/linux%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.html",strippedContent:" chmod -R 755 或 777 文件位置   chown -R 所有者   chgrp -R 所属组  执行 `chattr -i` 消除权限   `chattr -i .user.ini` 命令，去掉保护   [详情见链接](https://www.cnblogs.com/wawahaha/p/4657381.html) "},{title:"汇编环境搭建在Linux下",path:"/posts/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%9C%A8Linux%E4%B8%8B.html",strippedContent:" ## 汇编环境搭建终端  安装 dosbox   `sudo apt-get install dosbox`   下载   必备文件调试链接 debug link masm 的 exe 文件   在硬盘里创建 masm 目录，将上面三个文件放到 masm 目录下   然后终端输入的 DOSBox   运行后   创建模拟 C 盘目录   `mount c / home /~ / masm`   再进入模拟目录下   c：此时   就可以开始汇编编程了`^_^`  用 vim 编辑 `hello world` 保存成 `hello.asm`  `masm hello.asm` // 此处按回车 3 下  `link hello` // 同理  运行 `hello` // 此处可能最后会不出结果 需要退出 dosbox 重新进入一下就可以了  这里贴出 hello world 的汇编代码  ```   DATA    SEGMENT       STRING  DB   'Hello World!', '$'   DATA    ENDS    STACK1  SEGMENT PARA    STACK       DW  20H DUP  (0)   STACK1  ENDS   CODE   SEGMENT   ASSUME  CS:CODE, DS:DATA, SS:STACK1   BEGIN:  MOV     AX, DATA       MOV DS, AX       LEA     DX, STRING       MOV     AH, 9       INT     21H       MOV     AH, 4CH       INT 21H   CODE   ENDS        END BEGIN  ```  linux 下生成配置文件  [参见链接](https://www.phpfans.net/ask/MTcwODgwOA.html)  配置表 在这分享下  调了分辨率 和 启动 自动执行代码 省去了 输入`mount xxx;c:`  ``` #这个在24行处  分辨率可自行调整 fullscreen=false fulldouble=false fullresolution=original windowresolution=1024x640 output=opengl autolock=true sensitivity=100 waitonerror=true priority=higher,normal mapperfile=mapper-0.74.map usescancodes=true   #这个在文件底部 [autoexec] # Lines in this section will be run at startup. # You can put your MOUNT lines here. mount c: /home/lambert/masm c:  ```  # 执行一个汇编源程序的步骤在 dosbox 下 (详述)  在 dosbox 下 输入 masm 可以显示出版本  - masm    编译文件 `masm xx.asm`     第一个回车 确定输出目标文件名称     第二个回车 忽略列表文件生成     第三个回车 忽略交叉引用文件生成  在 dosbox 下 输入 link 可以显示出版本  - link    连接 目标文件 从而得到可执行文件     连接文件 `link xx`     第一个回车 输入可执行程序的名称     第二个回车 忽略映像文件生成     第三个回车 输入调用的子程序 忽略库文件的连接 忽略按回车     最后会报一个错`LINK : warning L4021:no stack segment // 没有栈段 这里我们不理会这个错误`  说完复杂的 方法 现在换简单的  `masm xx; // 在结尾加上分行，按enter后，编译器就对xx文件进行编译，在当前目录生成目标文件xx.obj，并在编译的过程中自动忽略中间文件的生成`  `link xx; // 同上` "},{title:"node.js基础篇",path:"/posts/node.js%E5%9F%BA%E7%A1%80%E7%AF%87.html",strippedContent:" # NPM 的使用  npm 包管理器 linux 使用这个命令升级 `sudo npm install npm -g`  使用淘宝镜像的命令 `cnpm install npm -g`  换成淘宝镜像 `npm install -g cnpm --registry=https://registry.npm.taobao.org`  使用 npm 安装 node.js 模块语法格式：  `npm install <Module Name> -g` 后面加上 g 是全局安装  查看全局下配置的模块 `npm list -g` 本地的去掉 g  查看模块版本号 `npm list grunt`  卸载模块 `npm uninstall <Module Name>`  搜索模块 `npm search <Module Name>`  创建模块 `npm init`  注册 npm 账号 `npm adduser`  ``` username:name password:******* email:********.com  ```  \x3c!-- username:lamber password:lanTIAN123 email:1669128146@qq.com --\x3e  发布模块 `npm publish`  # REPL 命令  **ctrl + c** - 退出当前终端。   **ctrl + c 按下两次** - 退出 Node REPL。   **ctrl + d** - 退出 Node REPL.   **向上/向下 键** - 查看输入的历史命令   **tab 键** - 列出当前命令   **.help** - 列出使用命令   **.break** - 退出多行表达式   **.clear** - 退出多行表达式   **.save filename** - 保存当前的 Node REPL 会话到指定文件   **.load filename** - 载入当前 Node REPL 会话的文件内容。 "},{title:"代码片段笔记",path:"/posts/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E7%AC%94%E8%AE%B0.html",strippedContent:" javascript 语言区分大小写，所以在写关键词的时候不能出错。  Textarea ；是一个可以自由放大缩小的大小 Div 标签 ，很好用！  Ajax : Asynchronous JavaScript And XML 和异步的 JavaScript 和 XML  xampp:admin; localhost/phpmyadmin  觅知网 有很多图片素材  ## 上面这个 js 加上之后就可用响应式和 viewport 实现手机端适配了  ``` <script>     (function () {         var targetW = 375;         var vpWidth = document.documentElement.clientWidth;         var scale = vpWidth/targetW;          document.querySelector(\"meta[name=viewport]\").content = \"initial-scale=\" + scale;     })() <\/script> ```  ## 这段代码可以实现与 a 相同的功能页面跳转  ``` function atz() {   window.location.href = \"ej/2.html\"; } ```  ## 这段代码可以实现元素横向排布并可以左右拖动  ```css3   display: flex;   overflow-y: hidden;   flex-wrap: nowrap;   //这项加在需要横向排布的元素上   white-space: nowrap;  ```  ## 这的代码是 tab 切换，用原生 js 写的，通过遍历实现的。  ``` <script type=\"text/javascript\">     //获取点击的对象     var oTitle = document.getElementById('title');     var aSpan = oTitle.getElementsByTagName('span');     //获取需要更改显隐的等等属性的box     var oCon = document.getElementById('con');     var aUl = oCon.getElementsByTagName('ul');     //初始化处理     var i = 0;     //遍历先使所有的变成默认的样式、然后再用this.给当前点击的对象更改属性。函数可以更改     //这是原生js     for (i = 0; i < aSpan.length; i++) {         aSpan[i].index = aUl[i].index = i;         aSpan[i].onclick = function () {             for (i = 0; i < aSpan.length; i++) {                 aSpan[i].className = '';                 aUl[i].className = '';             }             this.className = 'on';             aUl[this.index].className = 'on';         }     } <\/script> ```  ## 这的代码是给 title 前面加图片的  ``` <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"image/favicon.ico\" /> ```  ## javascript 选择器  document.getElementById(“demo”);//圆括号里面要用引号套住 id 名字 document.getElementsByTagName(“li”);//圆括号里面放标签名字 document.getElementsByClassName(“li”);//圆括号里面放类名  ## javascript 有三种对象  ​ 用户定义对象：由程序员自行创建的对象。 ​ 内建对象：内建在 javascript 语言里的对象，如 Array、Math 等。 ​ 宿主对象：由浏览器提供的对象，如 window（通常称为 Bom）。  ## getAttribute()方法返回指定属性名的属性值。  ```  <div id=\"test\" custom=\"hello\">111</div> <script type=\"text/javascript\">     var div = document.getElementById('test');     //获取的div是[object HTMLDivElement]     alert(div.getAttribute('custom')); <\/script> ```  ## 关于隐藏元素  ``` css visibility='hidden' //显示隐藏用这个少用 display 不正规  ```  ## Interval 无限循环函数  使用：注意缓存溢出 需要清除  ``` javascript begin = setInterval(function() {   hello();   clearInterval(begin); }, 1000);  ```  ## c gcc 编译带有数学库的时候要用 `gcc xxx.c -lm`  [详见](https://blog.csdn.net/u013806814/article/details/49404565) "},{title:"thinkphp5入门",path:"/posts/thinkphp5%E5%85%A5%E9%97%A8.html",strippedContent:" ### 开始第一个项目时的基本须知  1. 把入口文件 index.php 从 public 里挪到根目录然后 并修改 index.php 里的目录位置  2. 把 public 里的.htaccess 移动到根目录 可以在 url 里少写一个 index.php  3. 打开 config.php 页面把第一个 defale 改成 true 开始调试模式    进入 database.php 文件，把数据库信息改为自己的  4. 在 /application /index 下创建 view 和 model     并在 view 下创建 index 目录 在该路下放 index.html 网页  5. 如果用框架，需要把框架放在 public\\static\\ 下 引用时     ```    <link rel=\"stylesheet\" href=\"public/static/bootstrap.min.css\">    ```  6. 在使用 tp5 时，创建新的控制器时，控制器的首字母要大写，方法也要和  # 文档笔记  use 可以导入一个命名空间的类库 导入之后可以直接调用类库 用封装好的 assign 和 fetch 时要调用 Controller 模板 / 控制器 / 操作 url 驼峰法 开启区分大小写 ，修改 url_convert => 为 false(就是取消 url 强制转换为小写) 如果你的服务器环境不支持 pathinfo 方式的 URL 访问，可以使用兼容方式， 例如：http://tp5.com/index.php?s=/index/Index/index 方法里有参数时，通过 url 这样传参, 在网址后面要加 **?**， 参数不用加**\\$**符，传多个参数时中间用**&**链接 或者用 **/ **这种方法简单  ``` http://localhost/php/__tp/index/index/new_list?name='1'&new='2' http://localhost/php/__tp/index/index/new_list/name/111/new/222 ```  可以对 url 进行简化 修改 'url_param_type' => 1,此时参数必须按照顺序进行书写，按顺序绑定参数的话，操作方法的参数只能使用 URL pathinfo 变量，而不能使用 get 或者 post 变量。  ``` http://localhost/php/__tp/index/index/new_list/111/222 ```  如果觉得访问 操作的时候 url 太长 可以修改 route.php 里添加路由规则 改了之后 就 不用写 模板 控制器了 直接写方法就可以访问到  ``` return [ \t添加路由规则 路由到 index控制器的hello操作方法 'hello/:name' => 'index/index/hello', ]; //该路由规则表示所有 hello 开头的并且带参数的访问都会路由到 index 控制器的 hello 操作方法。 ```  闭包就是只有一个方法的类  连表操作模型  ``` $sql=Db::field('s.name,a.*')//截取表s的name列 和表a的全部     ->table(['表a'=>'a','表s'=>'s'])     ->where('a.name=s.id')//查询条件语句     ->select(); ```  ## Tp5 关于前端页面框架存放位置及引用的方法，还有路由的相关问题总结  当需要用 bootstrap 等框架时，应放到项目根目录：/public/static/ 下  在页面中引用的三种方法：  1. `<link rel=\"stylesheet\" href=\"/public/static/css/bootstrap.min.css\">`  2. `{css href=\"__CSS__/css/bootstrap.min.css\"}`  3. ```    //在application/config.php\t下第141行处 在中括号[]里 添加框架位置 public前面不要加/    // 视图输出字符串内容替换    'view_replace_str'       => [        \"__CSS__\" => \"public/static/css\",    ],    ```  使用了这种方法在页面里引用方式 可以省去写前面的 /public/static/css  `<link rel=\"stylesheet\" href=\"__CSS__bootstrap.min.css\">`  用 Tp5 使用其他框架后，url 按照 如下方式 不能正确访问到框架  1. 用 Tp5 使用其他框架后，url 按照 如下方式 不能正确访问到框架  `http://localhost/php/__tp/index/index/index`  解决办法  1. `http://localhost/php/__tp/ //不详细写到视口`  2. `http://localhost/php/__tp/?s=index/index/index //这种是使用兼容格式`  以上都是临时的  TP5 项目放在 htdocs 根目录下，项目名称大写， "},{title:"搭建服务器在linux下",path:"/posts/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8linux%E4%B8%8B.html",strippedContent:" ### 一、准备  先买个差不多点的 vps 服务器（如果要翻墙就买国外的我用[vultr](www.vultr.com)的服务器，国内有阿里的腾讯的百度的都行） 以我国外的服务器为例，服务器系统选择 linux ubuntu 或 centos ，云端安装系统可能需要点时间大概 10min 左右，具体按你的配置 😝， 硬件选择 中低配置 3.5$或5$的都可以，支付使用支付宝，最低一次充值 10$，友情提示：换算1$=6.9 ￥；  ---  买得国内服务器可以跳过此情节~ 。~  进入巨坑环节，买好的服务器要进行检测、①ping 一下 ip 看看能不能 ping 通 ② 用[内外网端口扫描器](http://www.atool.org/port_scanner.php)，扫一下你的服务器 ip 查看 22 端口是否开启(没有开启的话是被中国 internet 给墙了)，如果没有开启，不用想回到 www.vulrt.com 官网选择 servers 把刚刚安装好的服务器删除了、从新创建一个、直到创建出来的服务器 ip 检测都没问题了才行。。。。辛苦点没办法  ---  至于域名推荐阿里云万网的，第一年超便宜 9 ￥左右，（— —。） 后缀选择.com.org.cn 啥的都行，我选的是.fun，不需要备案的那类 买好域名了，进入阿里云的域名管理器，把域名解析到你的服务器 ip、具体操作不会的百度~  #### 二、工具  下载一些要用到的工具: Xshell6(连接服务器用的)、FileZilla Client(往服务器传东西用的 FTP)、ShadowsocksR-dotnet4.0(搭梯子的需要用到，电脑翻墙要用) [获取工具链接](https://pan.baidu.com/s/1nbNf0TcZu8yRbCTUlNrnfQ)  #### 三、配置  用安装好的 Xshell6 连接到服务器  新建会话，点击连接。   名称随意起没事、协议选择 ssh、主机、输入你的服务器 ip 就行、端口 22.然后确定 打开连接就行   成功了屏幕上会有：  ``` \t\tSystem restart required \t\tLast login: Fri Jan 25 19:19:22 2019 from 223.104.13.51 \t\troot@vultr:~# ```  小细节如果英语不好的小伙伴翻译了 vultr，在复制服务器密码的时候要关掉翻译，因为服务器默认生成的密码带有字母，会被翻译错，前车之鉴~  连接上服务器后我采用的是 screen+LNMP 一键式安装网站环境，  1. 先安装 screen 使用 putty 或类似的 SSH 工具登陆 VPS 或服务器；登陆后运行：`screen -S lnmp`      如果提示 screen: command not found 命令不存在可以执行：`yum install screen` 或 `apt-get install screen` 安装，[超详细教程](http://www.vpser.net/manage/run-screen-lnmp.html)  2. 再安装 LNMP    `wget -c http://soft.vpser.net/lnmp/lnmp1.2-full.tar.gz` && `tar zxf lnmp1.2-full.tar.gz` && `cd lnmp1.2-full` && `./install.sh lnmp`    [超详细教程](https://lnmp.org/install.html)  安装过程要安装很多东西，需要输入用户名密码，记得留下来，之后都会用到。 扩展、如果要建站做博客，可以使用 wordpress 安装包获取[链接](https://pan.baidu.com/s/1nbNf0TcZu8yRbCTUlNrnfQ)  想要翻墙的小伙伴看过来 2018-07-19 发布 Vultr 最简单的梯子搭建  安装 SSR 在 Xshell 里输入以下代码  ``` wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh  ```  若提示：wget :command not found   请执行：`yum install wget -y`   之后出现这个看着填就行  ![](https://segmentfault.com/img/bVbd2e9?w=357&h=260)  然后再按照提示走就行了  ![](https://segmentfault.com/img/bVbd2fb?w=302&h=229)  记得把这些信息截图或者记下来，这就是 SSR 的账号信息。   ## 加速ssr ： 破解版锐速安装一键更换内核脚本（vultr需先执行此脚本）   `wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh && bash ruisu.sh` Bash   脚本执行过程中，请勿进行任何操作。待服务器重启后，重新连接安装锐速即可。   锐速安装脚本   `wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh && bash serverspeeder.sh` Bash   若提示：`The name of network interface is not eth0, please retry after changing the name.`请使用备用脚本备用脚本：    `wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh`   Bash   成功截图   ![q](http://xiaosiqi.me/wp-content/uploads/2018/08/2-e1535258647492-2.png)   ## 客户端下载    1. SSR 安卓客服端下载：[ShadowsocksR](http://xiaosiqi.me/wp-content/uploads/2018/08/SSR-1.rar) 2. SSR windows 客户端下载 ：[ShadowsocksR-win-4.9.0](http://xiaosiqi.me/wp-content/uploads/2018/08/ShadowsocksR-win-4.9.0-1.zip) 4. SSR Mac 客户端下载：ssr-mac.dmg  # 配置文件   `/etc/shadowsocks.json`  # ssr 命令  ``` 需要用到的命令： 启动：service shadowsocks start 停止：service shadowsocks stop 重启：service shadowsocks restart 状态：service shadowsocks status ```  # 锐速 命令  ``` 重启锐速：/serverspeeder/bin/serverSpeeder.sh restart 启动锐速：/serverspeeder/bin/serverSpeeder.sh start 停止锐速：/serverspeeder/bin/serverSpeeder.sh stop 锐速状态：/serverspeeder/bin/serverSpeeder.sh status ```  # [ssr](http://www.aloneray.com/54.html)  "},{title:"ssh的使用",path:"/posts/ssh%E7%9A%84%E4%BD%BF%E7%94%A8.html",strippedContent:" 1. ssh root@xxx // ip 地址 2. 然后输入密码  - 主机服务器换了密码,需要删除旧的密匙,此时输入这行代码清空旧的    `ssh-keygen -R (你远程服务器的 IP)` "},{title:"c考点总结",path:"/posts/c%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93.html",strippedContent:' # <div style="text-align:center;color:red;"> 考点归纳 </div>  ### 标识符  标识符只能由字母`（A~Z, a~z）`、数字`（0~9）`和下划线`（ _ ）`组成，并且第一个字符必须是字母或下划线，不能是数字。  ### 注释  单行注释以`//`开头，直到本行末尾（不能换行）；   多行注释以`/*`开头，以`*/`结尾，注释内容可以有一行或多行。  ### 关键字  关键字（Keywords）是由 C 语言规定的具有特定意义的字符串，通常也称为保留字，例如 `int、char、long、float、unsigned` 等。   我们定义的标识符不能与关键字相同，否则会出现错误。   标准 C 语言中一共规定了 32 个[关键字](http://c.biancheng.net/cpp/html/797.html)  ### 表达式（Expression）和语句（Statement）  表达式（Expression）和语句（Statement）的概念在 C 语言中并没有明确的定义：   表达式可以看做一个计算的公式，往往由数据、变量、运算符等组成，例如`3\\*4+5、a=c=d`等，表达式的结果必定是一个值；   语句的范围更加广泛，不一定是计算，不一定有值，可以是某个操作、某个函数、选择结构、循环等。  ### 常量  在程序执行过程中，其值不发生改变的量称为常量。   常量分类：  1. 直接常量（字面量）    可以立即拿来用，无需任何说明的量      例如：      整型常量：12、0、-3；      实型常量：4.6、-1.23；      字符常量：‘a’、‘b’  2. 符号常量      用标识符代表一个常量。在 C 语言中，可以用一个标识符来表示一个常量，称之为符号常量。  说明：符号常量在使用之前必须先定义，其一般形式为： `#define` 标识符 常量  其中`#define` 也是一条预处理命令（预处理命令都以"#"开头），称为宏定义命令，其功能是把该标识符定义为其后的常量值。一经定义，以后在程序中所有出现该标识符的地方均代之以该常量值。  习惯上**符号常量**的标识符用**大写字母**，**变量**标识符用**小写字母**，以示区别。  ```   #include<stdio.h>   #define PRICE 30   int main(){       int num,total;       num=10;       total=num* PRICE;       printf("total=%d",total);       return 0;   } ```  几点说明：   用标识符代表一个常量，称为符号常量。   符号常量与变量不同，它的值在其作用域内不能改变，也不能再被赋值。   使用符号常量的好处是：含义清楚；能做到“一改全改”。  ### 变量  其**值**可以**改变**的量称为**变量**。一个变量应该有一个名字，在内存中占据**一定**的**存储单元**。变量定义必须放在变量使用之前。一般放在函数体的开头部分。要区分变量名和变量值是两个不同的概念。  变量定义举例：  ```   int num,total;   double price = 123.123;   char a = \'a\', abc; ``` '},{title:"闲着 无聊 真让人恐惧",path:"/posts/%E9%97%B2%E7%9D%80%20%E6%97%A0%E8%81%8A%20%E7%9C%9F%E8%AE%A9%E4%BA%BA%E6%81%90%E6%83%A7.html",strippedContent:' ## 今天看了篇文章《[太闲的人生，其实是一场灾难](http://www.sohu.com/a/350444645_223684)》  # 这些日子、说起来真的太安逸了  从何谈起呢...  #### 先看几张图再谈吧  ![兔子1](https://pic1.zhimg.com/80/e49574eb54ed8a3f8b75916a1ef292bf_hd.jpg)  ![兔子2](https://pic3.zhimg.com/80/da94b05848e963cdfd637b12bd67a021_hd.jpg)  最近看到的两张图，我想能画出这样的画,作者心里一定很甜吧。我觉得以上两图就是对爱情最好的诠释，是柔软，是童真，是傻憨:)  感慨几句:  当初我以为见面可以解决问题，却发现只不过是徒劳，我以为忍耐可以解决问题，却发现只不过是妄想，于是我最终放弃挣扎，接受时间才能给予我们的那个最好的答案...最后时间和理性告诉我们，我们并不适合。  你，一会儿看我，一会儿看云。我觉得，你看我时很远，你看云时很近。   大概是逐渐疏远了吧  也许恋爱对一个现代人没有作用,而且太简单又太苦。  ### 我很憧憬爱情、也忘不了曾经的“来日方长”  - 凌乱的文笔和思绪，就像现在的自己 杂乱无章  <div style="display:none;"> 想了想还是从，大学谈起吧。   我上的这所大学是源于一次冲动，高三那年单相思了一个女孩儿，未成便走出校园，提前迈入单招提前批的行列。 由于离开了学校，不用参加万人高考，我获得了一段长达 6 个月的空闲时间 ( 3 月到开学季 9 月)。 这是我第一次不用去上学，毕竟从小学到中学每天的事情就是学习，至始至终没变过，突然地不适应，铺天盖地的无聊、没事干、找不到方向感席卷而来冲昏了我。 好在，有家长的引导。   我开始了第一段工作，一个中式快餐店，老板是个年轻人，很有干劲和信念由于他的成功，我在老板的第二家新百分店认识了一个八竿子打不着的邯郸女孩，工作中的一来二去我们渐渐熟络起来。在 每一次的对视、每一次的害羞、每一次的主动中 都有了爱慕之心并坚信着天长地久。这一谈就到了大三。虽然难舍难分，但面临成年，离开校园，工作，家庭，还有未来的向往终是放开了手。   此时寂寞、无聊、没有方向又每日环绕在我的脑海。  但在 11 月到 3 月 28 这段时间里，我不得不在家中准备接本考试的学习。但却没有很大的动力，在家中让我过分安逸，母亲每日的嘘寒问暖，信手沾来的一日三餐，蒙蔽了我。到了 12 月 23 日 我还在消遣度日，距离考试只有 3 个月不到的时间。  望我珍重，接下来所做的一切，对以后人生的影响...  </div> '},{title:"linux的配置",path:"/posts/linux%E7%9A%84%E9%85%8D%E7%BD%AE.html",strippedContent:' # Linux 大法好  ## 应用和开发环境安装配置  ### 安装英伟达显卡  在图形界面的**软件和更新**里面的附加驱动里面下载  ### 安装音视频播放器  这里我是用的是 smplayer 或者 kmplayer 也行  `sudo apt-get install smplayer`  ### 安装 zsh  ``` sudo apt-get install zsh // 切换zsh zsh chsh -s /bin/zsh  ```  ### 安装 deb 格式的安装包代码  `sudo dpkg -i xxx.deb`  ### 安装 c/c++ 编译器 gcc  ``` sudo apt-get install gcc gcc -v // 查看是否有版本号输出 没有重新安装...  ```  ### Wine  安装从这个网址获取，里面还有 QQ、微信等 windows 下常用软件  ``` https://www.lulinux.com/archives/1319 ```  ### firewall 防火墙管理软件的安装  `sudo apt install firewall`   以及相关使用介绍   [一](https://www.linuxidc.com/Linux/2018-03/151218.htm)   [二](https://blog.csdn.net/ywd1992/article/details/80401630)   [三](https://www.cnblogs.com/whycai/p/11490526.html)  [远程操作可参见连接](https://www.cnblogs.com/WangGuiHandsome/p/9861038.html)  ### 查看 ip 需要自行安装`net-tools`  `sudo apt install net-tools`  `ifconfig`  ### VMware work  安装 把安装包移动到和 /home 目录同级后打开终端输入  ``` sudo su //获取root权限 ./VMware.bundle //然后一路确定，然后有个选择安装的可以自行修改 ```  不想用的时候当然是可以卸载的  `sudo vmware-installer -u vmware-workstation`  ### 安装 steam 从官网获取安装包  安装成功后会没反应的话 执行以下操作  ```   mv ~/.steam/steam/* ~/.local/share/Steam/   rmdir ~/.steam/steam   ln -s ../.local/share/Steam ~/.steam/steam   rm -rf ~/.steam/bin   // 在双击运行更新即可 ```  ### 搜狗输入法  前往官网自行下载 然后解压 双击 xxx.deb 安装  ### fcitx(需要重启才能用)  ``` sudo apt-get install fcitx // 怎么切换搜狗输入法 自行百度  ```  ### flash(看视频用)  `sudo apt-get install flashplugin-installer`  ### qBittorrent(下载器代替迅雷当然你可以用 wine)  ``` sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-stable //添加ppa sudo apt update sudo apt install qbittorrent  ```  ### vscode(全能编辑器!!!)  前往官网自行下载 然后解压 双击 xxx.deb 安装  写 markdown 自动生成 目录 插件  ``` markdown toc // 生成markdown 目录  ```  ### vim(本文编辑器大哥大、必须有)  ``` sudo apt-get install vim // 也可以下载gvim\t根据需要自行修改  ```  当然 下载了 vim 一定要配置一下 这里给出 **[我的配置](#vimrc)** (点击此处跳转) 大家按需选择  vim(设置 vim 的默认状态)[http://www.ruanyifeng.com/blog/2018/09/vimrc.html]  ### 美化 ubuntu  1. [安装苹方字体](http://pan.baidu.com/s/1miHvNvi) 2. unity-tweak-tool 3. gnome-tweaks 4. ultra-flat(扁平化图标)[sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ultra-flat-icons] 5. 主题使用的 radiance 6. 光标 whiteglass 7. dash to dock [安装第三方 dock,但是要使用 3.30 版本 Ubuntu18.04](https://micheleg.github.io/dash-to-dock/releases.html)  最终效果呢 是这个样子的  <img alt="ubuntu美化图" src="https://img-blog.csdnimg.cn/20191210205941810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjYwMTA0,size_16,color_FFFFFF,t_70" />  <img alt="ubuntu美化图" src="https://img-blog.csdnimg.cn/20191210210016519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjYwMTA0,size_16,color_FFFFFF,t_70" />  <img alt="ubuntu美化图" src="https://img-blog.csdnimg.cn/20191210210116478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjYwMTA0,size_16,color_FFFFFF,t_70" />  ### node npm 学前端的我必备 你们看着办~  在安装 npm 和 node 的时候全局安装用 sudo 局部不需要(即项目包)   node 升级   chmod -R user 700 (修改目录包括子文件的使用权限)  ``` sudo npm install n n latest (最新版node) n stable (稳定版) n rm xxx (删除某个版本) n use xxx /xx/xx.js (以指定版本执行某版本)  ```  ### git 代码管理必备  安装 `sudo apt-get install git`  - git 基本操作  ``` git init git add . git commit -m "" git branch -a //列出分之 git checkout name //切换到分之 git push origin name //将本地分之提交到远程 git merge name //合并分之 git branch -d name // 删除本地分之 git push origin -d name //删除远程分之 git push -u // 提交删除的文件 git ls-files // 查看本地有的文件 git remote add origin https://github.com/lambertlt/word // 创建分之后要输入这个 git rm --cache name // 删除缓存中的文件 git checkout -f newBranch //如果希望强制切换，即放弃本地修改，则使用命令  https://www.cnblogs.com/sky6862/p/7992736.html //https 更改为ssh方式 这样就不用老输入密码了  ```  ### wget 扒站神器  ``` wget -r -p -k -np 网站 -r // 递归下载 -p // 下载所有用于显示HTML页面的图片之类的元素 -k // 在转换文件x前先将它备份为x .orig -np // 不追溯至父目录  https://blog.csdn.net/zhaoweitco/article/details/27662331 // 详细教程  ```  <div id="vimrc">  vimrc 的配置表(Vim 的全局配置一般在/etc/vim/vimrc)参考阮一峰的网络日志  ``` set number syntax on set showmode set showcmd set mouse=a set encoding=utf-8 set t_Co=256 filetype indent on set autoindent set tabstop=2 set shiftwidth=4 set expandtab set softtabstop=2 set cursorline set wrap set linebreak set wrapmargin=2 set laststatus=2 set ruler set showmatch set hlsearch set incsearch set ignorecase set smartcase set spell spelllang=en_us set visualbell set autoread set wildmenu set wildmode=longest:list,full set confirm  ```  </div>  ### linux 初级      管理文件、目录、文档以及命令行环境；      使用分区、LVM逻辑卷管理本地存储；      安装、更新、维护、配置系统与核心服务；      熟练创建、修改、删除用户与用户组，并使用LDAP进行集中目录身份认证；      熟练配置防火墙以及SELinux来保障系统安全。  ### linux 中级      熟练配置防火墙规则链与SElinux安全上下文；      配置iSCSI（互联网小型计算机系统接口）服务；      编写Shell脚本来批量创建用户、自动完成系统的维护任务；      配置HTTP/HTTPS网络服务；      配置FTP服务；      配置NFS服务；      配置SMB服务；      配置SMTP服务；      配置SSH服务；      配置NTP服务。  ### linux 高级  考试代码 认证名称  EX210 红帽 OpenStack 认证系统管理员考试  EX220 红帽混合云管理专业技能证书考试  EX236 红帽混合云存储专业技能证书考试  EX248 红帽认证 JBoss 管理员考试  EX280 红帽平台即服务专业技能证书考试  EX318 红帽认证虚拟化管理员考试  EX401 红帽部署和系统管理专业技能证书考试  EX413 红帽服务器固化专业技能证书考试  EX436 红帽集群和存储管理专业技能证书考试  EX442 红帽性能调优专业技能证书考试 '},{title:"shell提交git脚本",path:"/posts/shell%E6%8F%90%E4%BA%A4git%E8%84%9A%E6%9C%AC.html",strippedContent:" 我使用的是**zsh**(根据需要自行修改)  1. 把下面代码放到 **xx.sh** 里面 2. chmod 700 xx.sh //提升权限 3. ./xx.sh //运行脚本  # 适用范围:vuePress vue 静态项目部署 的自动化脚本  # aaa  ``` # !/bin/zsh # 确保脚本抛出遇到的错误 set -e # 生成静态文件 npm run build # 进入生成的文件夹 cd ./dist git init git add -A git commit -m 'shell提交' # 把下面的push命令按照你的情况修改后去掉注释 git push -f git@github.com:lambertlt/lambertlt.github.io.git master ``` "},{title:"创建md文档脚本",path:"/posts/%E5%88%9B%E5%BB%BAmd%E6%96%87%E6%A1%A3%E8%84%9A%E6%9C%AC.html",strippedContent:' 里面部分地方需要修改 在 后面的文档输出位置  1. 把下面代码放到 **xx.sh** 里面 2. chmod 700 xx.sh //提升权限 3. ./xx.sh 参数一(文档名 and 标题) 参数二(标签名) //运行脚本  ``` # !/bin/zsh clear; echo "start touche $1.md"; echo "---\\ntitle: $1\\ndate: `date +%F` `date +%H:%M:%S`\\ntags: [$2]\\n---" ./docs/posts/"$1".md; echo "finish $1.md" ``` '},{title:"c考试大纲考点分析",path:"/posts/c%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2%E8%80%83%E7%82%B9%E5%88%86%E6%9E%90.html",strippedContent:' # <div style="color:lightblue;text-align:center;">c 语言笔记-专接本大纲中考核点</div>  ## 一、c 语言程序的结构  #### 1. 理解 C 程序的基本结构及执行过程  编辑,预处理,编译,链接,执行   [执行过程](https://blog.csdn.net/FYSGXFZ/article/details/80346347).  #### 2. 理解 C 程序中头文件、注释等概念,会在程序中正确使用文件包含命令以及添加注释  [头文件](https://www.cnblogs.com/qihuanye-229110/p/11147469.html)就是把""或者<>里面的文件展开在此处  ``` 常用头文件:  stdio.h 标准输入输出 stdlib.h 标准常用库 string.h 字符串函数库 math.h 数学库 ctype.h 字符函数库 time.h 时间库 windows.h 微软视窗库 ```  单行注释: `// 后面写注释`   多行注释: `/* 里面写注释 */`  #### 3. 理解 C 函数的构成形式.  c 语言程序至少有一个 main() 且只能有一个(函数是 c 语言最小单位)   函数由两部份组成:函数头`void max( )`和函数体`{ } // 花括号内的称为函数体`  ``` #include<stdio.h> int main() {   printf("first c program");   // 最简单的c程序 } ```  #### 4. 了解 C 程序源代码的书写格式  [规范详见链接内](https://blog.csdn.net/piaocoder/article/details/45772087).  ## 二、数据类型及其运算  #### 1. 掌握 C 语言的基本数据类型,了解不同数据类型常量的表示方法.  **字符型**:描述单个字符 `char`  **整型**:描述整数,整数在计算机上是准确表示的 `int`  **浮点型、双精度型**:描述实数,实数在计算机上一般是近似表示的,浮点型的近似程度比较低,而双精度型的近似程度比较高 `float 、double`  **无值类型**:没有具体的值,通常用来描述无形式参数或无返回值的 C 函数,以及无定向指针  **逻辑型**:描述逻辑真(其值为 1)与逻辑假(其值为 0)  **复数型**:描述复数(\\_complex)和纯虚数(\\_imaginary)使用逻辑型时必须包含头文件 stdbool.h,使用复数型时必须包含头文件 complex.h  #### 2. 掌握变量的定义、初始化和引用的基本方法.  ``` char a=\'a\'; int a=1; float a=1.11; doublue a=1.11; ```  #### 3. 在编程中会根据需要合理确定常量与变量的类型并正确使用.  根据变量范围选择不同的类型  #### 4. 理解各种运算符的优先级和结合性,掌握其构成表达式的语法表示和运算规则,会正确计算表达式的值,会根据需要书写正确的 C 表达式.  运算符 的优先级什么的 见链接内:   [详情点击链接](https://blog.csdn.net/weixin_42510998/article/details/81145270)  - 表达式分为:    1. 关系表达式   2. 逻辑表达式   3. 条件表达式    赋值表达式     用赋值运算符将运算对象连接而成的式子成为赋值表达式 `k=(j+1);` 由于赋值运算符是自右向左运算 所以等价于 `k=j=1;`    关系表达式     关系表达式就是用关系运算符将两个表达式连接起的式子，被连接的表达式可以是算数表达式、关系表达式、逻辑表达式、赋值表达式和字符表达式等     任何一个关系表达式的结果均为两个值:真和假，其中 1 代表真，0 代表假。    逻辑表达式     带有`&&(与、且) ||(或) !(非)`的表达式    1. &&        左右两侧都为真时，才是真，一假即为假   2. ||        左右两侧一个为真即为真，全假才是假    逗号表达式     一般形式 `表达式1，表达式2，表达式3...表达式n`     当逗号作为运算符使用时是一个双目运算符，其运算优先级是所有运算符中最低的。逗号运算符的运算顺序是自左向右的。    ```     a = 2 * 6,a - 4,a + 15;   /*     先算 2*6 并赋值给 a，再计算 a-4，最后计算 a+15，最终以 27 作为整个逗号表达式的值。需要注意的是 后两个表达式的值仅做了计算，而并没有赋值给 a 所以 a 的值仍然是 12   */   ```  #### 5. 了解表达式中不同类型数据间的自动转换规则,掌握强制类型转换的使用方法.  C 语言中自动转化规则  ![转化规则1](/img/cqzzh.png) ![转化规则2](/img/cqzzh1.jpg)  1.  若参与运算量的类型不同,则先转换成同一类型,然后进行运算 2.  转换按数据长度增加的方向进行,以保证精度不降低.如 int 型和 long 型运算时,先把 int 量转成 long 型后再进行运算      - 若两种类型的字节数不同,转换成字节数高的类型     - 若两种类型的字节数相同,且一种有符号,一种无符号,则转换成无符号类型  3.  所有的浮点运算都是以双精度进行的,即使是两个 float 单精度量运算的表达式,也要先转换成 double 型,再作运算.  4.  char 型和 short 型参与运算时,必须先转换成 int 型  5.  在赋值运算中,赋值号两边量的数据类型不同时,赋值号右边量的类型将转换为左边量的类型.        如果右边量的数据类型长度左边长时,将丢失一部分数据,这样会降低精度,丢失的部分按四舍五入向前舍入  C 语言强制类型转换规则  强制类型转换 强制类型转换一般格式如下:(类型名)(表达式)  ``` #include <stdio.h> int main() {    int sum = 17, count = 5;    double mean;    mean = (double) sum / count;    printf("Value of mean : %f\\n", mean ); } ```  这种强制类型转换操作并不改变操作数本身  ## 三、顺序结构程序设计  #### 1. 了解 C 程序中常用的基本语句形式.  语句是一个程序逻辑的体现,它描述了程序.  从程序流程的角度来看,程序可以分为三种基本结构, 即顺序结构、分支(选择)结构、循环结构.   这三种基本结构可以组成所有的各种复杂程序.  C 语言提供了多种语句来实现这些程序结构.  C 程序的执行部分是由语句组成的. 程序的功能也是由执行语句实现的.  C 语句可分为以下五类:   1.表达式语句  其一般形式为:表达式；执行表达式语句就是计算表达式的值 例如:  `x=y+z；a=520；赋值语句`  2.函数调用语句  其一般形式为: 函数名(实际参数表) 执行函数语句就是调用函数体并把实际参数赋予函数定义中的形式参数,然后执行被调函数体中的语句,求取函数值 调用库函数,输出字符串 例如:  `printf("a,b,c"); /*调用名为"printf"的函数*/`  3.控制语句  控制语句用于控制程序的流程, 以实现程序的各种结构方式. 它们由特定的语句定义符组成.C 语言有九种控制语句. 可分成以下三类:  1. 条件判断语句    if,switch 2. 循环执行语句    do while,while,for 3. 转向语句    break,go to,continue,return  4.复合语句  把多个语句用括号{}括起来组成的一个语句称复合语句. 在程序中应把复合语句看成是单条语句,而不是多条语句 例如:  ``` {   x=y+z；   a=b+c；   printf("%d%d",x,a); } // 复合语句内的各条语句都必须以分号";"结尾;此外,在括号"}"外不能加分号 ```  5.空语句  只有分号";"组成的语句称为空语句 空语句是什么也不执行的语句 在程序中空语句可用来作空循环体  例如:  ```   while(getchar()!=\'\\n\'); // 本语句的功能是,只要从键盘输入的字符不是回车则重新输入 这里的循环体为空语句 ```  #### 2. 掌握使用 getchar()和 putchar()标准库函数实现字符数据输入与输出的方法.  getchar()   C 库函数 int getchar(void) 从标准输入 stdin 获取一个字符(一个无符号字符)   C 库函数 int putchar(int char) 把参数 char 指定的字符(一个无符号字符)写入到标准输出 stdout 中  ```   printf("请输入字符:");   c = getchar();    printf("输入的字符:");   putchar(c);  ```  #### 3. 掌握使用 scanf()和 printf()标准函数实现不同类型数据的格式输入与输出的方法,在编程中会根据需要正确输入数据并合理设计输出格式.  C 库函数 int scanf(const char \\*format, ...) 从标准输入 stdin 读取格式化输入   C 库函数 int printf(const char \\*format, ...) 发送格式化输出到标准输出 stdout  ```   int a,b;   printf("输入两个数");   scanf("%d%d",&a,&b);    printf("%d,%d",a,b); ```  输出控制符有：  控制符 说明  ``` %d    按十进制整型数据的实际长度输出。  %ld   输出长整型数据。  %md   m 为指定的输出字段的宽度。如果数据的位数小于 m，则左端补以空格，若大于 m，则按实际位数输出。  %u    输出无符号整型（unsigned）。输出无符号整型时也可以用 %d，这时是将无符号转换成有符号数，然后输出。但编程的时候最好不要这么写， 因为这样要进行一次转换，使 CPU 多做一次无用功。  %c    用来输出一个字符。  %f    用来输出实数，包括单精度和双精度，以小数形式输出。不指定字段宽度，由系统自动指定，整数部分全部输出，小数部分输出 6 位，超过 6 位的四舍五入。  %.mf  输出实数时小数点后保留 m 位，注意 m 前面有个点。  %o    以八进制整数形式输出，这个就用得很少了，了解一下就行了。  %s    用来输出字符串。用 %s 输出字符串同前面直接输出字符串是一样的。但是此时要先定义字符数组或字符指针存储或指向字符串，这个稍后再讲。  %x（或 %X 或 %#x 或 %#X） 以十六进制形式输出整数，这个很重要。  ```  #### 4. 掌握使用顺序结构设计简单 C 程序的基本方法.  大概意思就是从上到下,依次执行的程序  ## 四、选择结构程序设计  #### 1. 理解三种 if 语句的语法结构,掌握使用 if 语句设计选择结构程序的方法  ``` // 重点在于小括号里的条件判断   if(a>b)   {     a+=b;   } ```  #### 2. 理解 switch 语句的语法结构,掌握使用 switch 语句设计多分支选择结构程序的方法  ```   switch(1)   {     case 1 :       printf("1");       break;     case 2 :       printf("2");       break;     default :       printf("No");   } ```  #### 3. 了解嵌套选择结构语句的语法表示,会分析嵌套选择结构程序的执行过程  选择结构也称分支结构,就是让程序"拐弯",有选择性的执行代码   换句话说,可以跳过没用的代码,只执行有用的代码  ``` if(a>b) {   printf("a b"); }else{   printf("a <b"); }  ```  #### 4. 会正确分析选择结构程序的执行过程,会合理选用语句形式设计正确的选择结构程序  3 和 4 差不多 不一一作答了 主要看程序怎么写  ## 五、循环结构程序设计  #### 1. 理解 while、do-while 和 for 语句的语法结构,掌握使用三种循环语句设计循环结构程序的方法  while  ```   while(1)   {     printf("我是无限循环!!!!!!!!");   } ```  do-while  ```   int i=0;   {     printf("我还是无限循环!!!!");   }while(i=0); ```  for  ```   for (int i=1;i<0;i++)   {     printf("我还是无限循环!!!!");   } ```  #### 2. 理解 continue 和 break 语句的语法结构,掌握其在循环结构程序中的使用方法  continue 只结束当前循环体   break 退出当前循环体  #### 3. 了解嵌套循环结构语句的语法表示,会正确分析嵌套循环结构程序的执行过程  主要看程序怎么写 不详细叙述  ## 六、数组  #### 1. 掌握一维数组和字符数组的定义、初始化及其元素引用的方法  在 C 中要声明一个数组,需要指定元素的类型和元素的数量   二话不说上代码  ``` // 数组声明   int arr[10];  // 初始化   int arr[3]={1,2,3};  // 没有写数组数量的话 花括号里面的数量就是 [] 里的   int arr[]={1,2,3};  // 访问数组内的元素   printf("%d",arr[2]); ```  #### 2. 熟悉二维数组的定义、初始化及其元素引用的方法  ``` // 数组声明   int arr[10][20];  // 初始化   1. int arr[3][2]={1,2,3,4,5,6};   2. int arr[3][2]={     {1,2,3},     {4,5,6}   }  // 不写数组 行数量是可以的,因为 数组行数 = 数组元素 / 数组列数   int arr[][2]={1,2,3,4,5,6};  // 访问数组内的元素   printf("%d",arr[2][3]); //表示访问第二行 第三个 元素 ```  #### 3. 理解字符串的概念,掌握使用字符数组存储和操作字符串的方法,熟悉常用字符串处理函数(puts、gets、strcmp、strlen)的使用方法  字符串:   字符串实际上是使用 null 字符 \'\\0\' 终止的一维字符数组   因此,一个以 null 结尾的字符串,包含了组成字符串的字符  ``` // 字符串数组 声明   char china[6];  // 初始化   char china[6]={\'c\', \'h\', \'i\', \'n\', \'a\', \'\\0\'};  // 输出字符串   printf("%s",china);  // 修改字符串数组元素   char china[6]={\'c\', \'h\', \'i\', \'n\', \'a\', \'\\0\'};   china[3]=\'s\'; ```  puts()   C 库函数 int puts(const char \\*str) 把一个字符串写入到标准输出 stdout,直到空字符,但不包括空字符.换行符会被追加到输出中.  ```   char china[6]={\'c\', \'h\', \'i\', \'n\', \'a\', \'\\0\'};   puts(china);  // 输出结果: china ```  gets()   C 库函数 char *gets(char *str) 从标准输入 stdin 读取一行,并把它存储在 str 所指向的字符串中.当读取到换行符时,或者到达文件末尾时,它会停止,具体视情况而定  ```   char china[6];   printf(\'请输入中国china\');   gets(china);   puts(china);  // 输出结果: china ```  strcmp()   C 库函数 int strcmp(const char *str1, const char *str2) 把 str1 所指向的字符串和 str2 所指向的字符串进行比较   注意:使用此函数要调用 字符串处理库函数  ```   #include <stdio.h>   #include <string.h>   int main ()   {      char str1[15];      char str2[15];      int ret;      strcpy(str1, "abcdef");      strcpy(str2, "ABCDEF");      ret = strcmp(str1, str2);      if(ret < 0)      {         printf("str1 小于 str2");      }      else if(ret 0)      {         printf("str2 小于 str1");      }      else      {         printf("str1 等于 str2");      }      return(0);   }  ```  strlen()   C 库函数 size_t strlen(const char \\*str) 计算字符串 str 的长度,直到空结束字符,但不包括空结束字符  ```   #include <stdio.h>   #include <string.h>   int main ()   {     char str[50];     int len;     strcpy(str, "This is runoob.com");     len = strlen(str);     printf("|%s| 的长度是 |%d|\\n", str, len);     return(0);   }  // 输出结果:|This is runoob.com| 的长度是 |18| ```  再补充一个   strcat()  #### 4. 在编程中会使用数组正确处理同质数据的读写访问操作,会使用字符串处理函数操作字符串  主要看程序怎么写 不详细叙述  ## 七、函数  函数是一组一起执行一个任务的语句   每个 C 程序都至少有一个函数,即主函数 main()   先声明、定义、调用  #### 1. 理解函数定义的语法形式,掌握一般函数的定义方法  函数定义:  ```   int max(int a,int b)   {     int result;     if(a>b)     {       result = a;     }else{       result = b;     }     return result;   }  // 此程序输出大的那个数  ```  函数声明: 在函数声明中,参数的名称并不重要,只有参数的类型是必需的,因此下面也是有效的声明  ```   int max(int,int); ```  调用函数  ```   int c;   c=max(a, b);   printf("%d",c);  输出结果: 较大的数 ```  #### 2. 理解函数的形式参数与实际参数、函数的返回值的概念和特点  形式参数:   形参就是定义函数时候的参数表,只是定义了参数表的结构和用来引用的名字,并没有具体的内容 在调用结束 形参会消失  实际参数:   实参是调用函数传递的具体数据 在调用结束 实参还会存在  返回值:   返回值把函数的处理结果数据返回给调用函数,即递归调用,所以一般把函数名变量称为返回值,函数的返回值类型是在定义函数时指定的  一个函数可以有返回值,也可以没有返回值  1. 没有返回值的函数:功能只是完成一个操作,应将返回值类型定义为 void,函数体内可没有 return 语句. 2. 有返回值的函数:函数的最后会有一个返回值 return,可以用来获取该函数执行结果返回给该函数,让外部调用该函数的.  返回值可指定,如果不指定默认返回 None  #### 3. 理解函数调用的语法形式;理解函数原型的概念,掌握其声明方法  在 1. 中讲述了 调用的语法形式和声明方法  函数原型:   函数原型也叫函数声明,还叫引用说明   其目的是实现先调用函数,后定义函数  函数原型类似函数定义时的函数头 为了能使函数在定义之前就能被调用,C++规定可以先说明函数原型,然后就可以调用函数 函数定义可放在程序后面 由于函数原型是一条语句,因此函数原型必须以分号结束 函数原型由函数返回类型、函数名和参数表组成,它与函数定义的返回类型、函数名和参数表必须一致 函数原型不必包含参数的名字,可只包含参数的类型 例如: `int area (int, int )` 等价于 `int area(int a,int b)` 说明:系统标准函数并没有在包含文件中定义,而只是提供了函数原型 在调用函数时,系统会正确地调用库函数 注意:函数原型与函数定义必须一致,否则会引起编译错误  #### 4. 理解函数传值调用的参数传递机制和特点,会正确分析函数传值调用的执行过程,掌握使用函数的传值调用实现结构化程序设计的方法  [内容过长详见链接](https://blog.csdn.net/cike211/article/details/12857509)  #### 5. 了解函数嵌套调用的概念,会正确分析函数嵌套调用的执行过程  嵌套调用  C 语言中不允许作嵌套的函数定义. 因此各函数之间是平行的,不存在上一级函数和下一级函数的问题 但是 C 语言允许在一个函数的定义中出现对另一个函数的调用 这样就出现了函数的嵌套调用 即在被调函数中又调用其它函数 这与其它语言的子程序嵌套的情形是类似的 其关系可表示如图:  ![关系](http://c.biancheng.net/cpp/uploads/allimg/120129/fsdsf454trykh.gif)  #### 6. 了解递归函数的概念,会正确分析递归函数调用的执行过程  递归函数   一个函数在它的函数体内调用它自身称为递归调用,这种函数称为递归函数 执行递归函数将反复调用其自身,每调用一次就进入新的一层,当最内层的函数执行完毕后,再一层一层地由里到外退出  公式:  ![公式](http://c.biancheng.net/cpp/uploads/allimg/150628/1-15062Q44533953.gif)  ``` //求n! long factorial(int n){   long result;   if(n==0 || n==1){     result = 1;   }else{     result = factorial(n-1) * n;  // 递归调用   }   return result; } ```  这是一个典型的递归函数.调用 factorial() 后即进入函数体,只有当 n==0 或 n==1 时函数才会执行结束,否则就一直调用它自身 由于每次调用的实参为 n-1,即把 n-1 的值赋给形参 n,所以每次递归实参的值都减 1,直到最后 n-1 的值为 1 时再作递归调用,形参 n 的值也为 1,递归就终止了,会逐层退出  #### 7. 了解变量的作用域和生存期的概念,理解局部变量和全局变量的概念,掌握其使用方法;理解自动变量、静态局部变量的特点,掌握其使用方法;了解寄存器变量的使用方法,了解用 extern 声明外部变量的方法,会根据程序中变量的定义位置和声明方式正确分析变量的作用域和生存期  看着都好尼玛难 想想算了吧  ## 八、预处理命令  程序设计语言的预处理的概念：在编译之前进行的处理。  C 语言的预处理主要有三个方面的内容：  1. 宏定义； 2. 文件包含； 3. 条件编译。  预处理命令以符号“#”开头  #### 1. 了解编译预处理的概念、作用.  预处理编译的作用:  1. 将源文件中以"include"格式包含的文件复制到编译的源文件中。 2. 用实际值替换用"#define"定义的字符串。 3. 根据"#if"后面的条件决定需要编译的代码。  #### 2. 理解宏定义命令的语法形式,掌握不带参数以及带参数宏定义的使用方法,会分析宏定义命令在预编译时的宏展开过程.  [宏定义相关见链接 三、](http://www.360doc.com/content/15/0902/10/6959565_496416881.shtml)  #### 3. 了解文件包含命令的语法形式,在程序设计中会正确使用文件包含命令  在 C 语言中文件包含是指一个源文件可以将另一个源文件的全部内容包含进来。该命令的作用是在预编译时，将指定源文件的内容复制到当前文件中。文件包含是 C 语言预处理命令三个内容之一。  文件包含有两种格式，分别是：`#include "file"` 和 `#include <file>`  一般情况使用引号比较保险  ## 九、指针  [void`*` 指针、NULL 指针、零指针、野指针、悬垂指针](https://www.jianshu.com/p/2062bf912a59)  #### 1. 了解指针的概念,理解指针运算符`(*)`和取地址运算符`(&)`的使用特点,掌握指向变量的指针变量的定义、赋值和引用的方法,理解指针的赋值运算和算术运算的规则  `*`指针运算符(间接访问) `&`取地址运算符  注意:指针赋值只能是地址。 使用值时要用\\* 得到地址的内容 而& 可以得到内存地址  ``` // 先声明 同时 初始化 在使用   int a = 3,*p = &a;   printf("%d",*p); // 结果: 3  // 先声明 后 初始化 在使用   int *p,a = 3;   p = &a;   printf("%d",*p);  // 结果: 3  #include"stdio.h" void main() {     int a = 3,b = 2,c = 4,*p = &a,*p1 = &b,*p2 = &c;     printf("%d,%d",*p * *p1,*p * *p2); }  // 结果: 6 12 ```  ```  #include <stdio.h> int main () { int var1; char var2[10]; printf("var1 变量的地址： %p\\n", &var1 ); printf("var2 变量的地址： %p\\n", &var2 ); return 0; }  // 结果 var1 变量的地址： 0x7fff5cc109d4 var2 变量的地址： 0x7fff5cc109de  ```  #### 2. 掌握指向一维数组的指针变量的定义、赋值和引用的方法,会正确运用指针变量间接访问一维数组的元素  ```  double \\*p; double arr[10];  p = arr;  ```  一旦您把第一个元素的地址存储在 p 中，您就可以使用`*p、*(p+1)、*(p+2)`等来访问数组元素  ```  #include <stdio.h> int main () {   int var = 20; /_ 实际变量的声明 _/   int _ip; /_ 指针变量的声明 _/   ip = &var; /_ 在指针变量中存储 var 的地址 _/   printf("Address of var variable: %p\\n", &var );   /_ 在指针变量中存储的地址 _/   printf("Address stored in ip variable: %p\\n", ip );   /_ 使用指针访问值 */   printf("Value of *ip variable: %d\\n", \\*ip );   return 0; }  结果：   Address of var variable: bffd8b3c   Address stored in ip variable: bffd8b3c   Value of \\*ip variable: 20  ```  #### 3. 掌握指向字符串的指针变量的定义、赋值和引用的方法,会正确运用指针变量间接访问字符串  ```   #include<stdio.h>   void main()   {     char arr[] = "china",*p = arr;     printf("%s,%s",p,p[1]);   }    结果:       china h ```  #### 4. 理解使用指针变量、数组名作为参数的函数调用的机制和特点,掌握函数的传址调用的使用方法,会正确分析函数传址调用的执行过程,在编程中会根据需要设计合理的传址调用函数并进行正确调用  #### 5. 了解返回指针值的函数的概念,熟悉指针数组、指向指针的指针概念和使用方法,会使用指针数组和二级指针间接访问二维数组元素  ```   #include<stido.h>   int max(int a, int b)   {     int *p;     if(a > b)     {       p = &a;     }else     {       p = &b;     }     return *p;   }   int main()   {     int c = max (3,4);     prinf("%d",c);   }    结果:     4 ```  ## 十、结构体与共用体  tip:  结构体 和结构体变量  1. 结构体 是一个类型 类似于 int float double 2. 结构体变量 是实实在在的数据 就像 int a = 3; 里的 a  #### 1. 了解和区分结构体和共用体的概念,掌握结构体类型的定义方法,以及结构体变量的定义、初始化和成员引用的方法  结构体和共用体的区别:   结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。  结构体占用的内存大于等于所有成员占用的内存的总和（成员之间可能会存在缝隙），共用体占用的内存等于最长的成员占用的内存。共用体使用了内存覆盖技术，同一时刻只能保存一个成员的值，如果对新的成员赋值，就会把原来成员的值覆盖掉。  结构体的定义，初始化，引用示例:  ```   \x3c!-- 不重定义结构体变量名 --\x3e    #include <stdio.h>   #include <string.h>   struct people   {       char id[10];       char name[100];   };   int main()   {       struct people sister;       strcpy(sister.id, "1");       strcpy(sister.name, "sister");       printf("%s%s", sister.id, sister.name);   }    结果:     1sister   \x3c!-- 重定义结构体变量名 --\x3e    #include<stdio.h>   #include<string.h>   typedef struct  // 重定义变量名 typedef   {     char title[50];     char author[50];     int id;   } books;   int main()   {     books book1;     strcpy(book1.title,"c++");     strcpy(book1.author,"lambert");     id = 1;     printf("id is:%d\\ntitle is:%s\\nauthor is:%s",book1.id,book1.title,book1.author);   }    结果:     id is:1     title is:c++     author is:lambert ```  #### 2. 掌握结构体数组的定义、初始化和引用数组元素及其成员的方法,会正确运用结构体数组处理异质数据的存储和访问操作  ```   #include<stdio.h>   #include<string.h>   typedef struct   {       char xingbie[20];       int age;   } people;   int main()   {       people people[10]; // 这个就是结构体数组 数组内每个元素都是 结构体       for(int i = 0;i < 10;i++)       {           if(i % 2 ==0)           strcpy(people[i].xingbie,"man");           else           strcpy(people[i].xingbie,"woman");           people[i].age = i;       }       for(int i = 0;i < 10;i++)       {           printf("xingbie is :%6s\\tage is :%3d\\n",people[i].xingbie,people[i].age);       }   }  结果:   xingbie is :   man\tage is :  0   xingbie is : woman\tage is :  1   xingbie is :   man\tage is :  2   xingbie is : woman\tage is :  3   xingbie is :   man\tage is :  4   xingbie is : woman\tage is :  5   xingbie is :   man\tage is :  6   xingbie is : woman\tage is :  7   xingbie is :   man\tage is :  8   xingbie is : woman\tage is :  9  ```  #### 3. 掌握指向结构体类型数据的指针变量的定义、初始化和引用方法,会正确运用指向结构体数据的指针变量间接访问结构体数据及成员,熟悉结构体指针作为参数的函数调用方法  结构体指针 要在结构体变量后面进行 声明   例如:  ``` #include<stdio.h> int main() {   typedef struct   {     int id;     char name[100];   } books,*p = &books; }  ```  注意:   结构体变量名和数组名不同，数组名在表达式中会被转换为数组指针，而结构体变量名不会，无论在任何表达式中它表示的都是整个集合本身，要想取得结构体变量的地址，必须在前面加&，所以给 pstu 赋值只能写作： `struct stu *pstu = &stu1;`  而不能写作： `struct stu *pstu = stu1;`  通过结构体指针可以获取结构体成员，一般形式为：   `(*pointer).memberName`或者：`pointer->memberName`   第一种写法中，`.`的优先级高于`*`，`(*pointer)`两边的括号不能少。如果去掉括号写作`_pointer.memberName`，那么就等效于`_(pointer.memberName)`，这样意义就完全不对了。  第二种写法中，`->`是一个新的运算符，习惯称它为**“箭头”**，有了它，可以通过结构体指针直接取得结构体成员；这也是`->`在 C 语言中的唯一用途。  上面的两种写法是等效的，我们通常采用后面的写法，这样更加直观。  例如:  ```   #include <stdio.h>   int main(){     struct{       char *name;  //姓名       int num;  //学号       int age;  //年龄       char group;  //所在小组       float score;  //成绩     } stu1 = { "Tom", 12, 18, \'A\', 136.5 }, *pstu = &stu1;     //读取结构体成员的值     printf("%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\\n", (*pstu).name, (*pstu).num, (*pstu).age, (*pstu).group, (*pstu).score);     printf("%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\\n", pstu->name, pstu->num, pstu->age, pstu->group, pstu->score);     return 0;   }  结果：   Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！   Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！    #include <stdio.h>   struct stu{     char *name;  //姓名     int num;  //学号     int age;  //年龄     char group;  //所在小组     float score;  //成绩   }stus[] = {     {"Zhou ping", 5, 18, \'C\', 145.0},     {"Zhang ping", 4, 19, \'A\', 130.5},     {"Liu fang", 1, 18, \'A\', 148.5},     {"Cheng ling", 2, 17, \'F\', 139.0},     {"Wang ming", 3, 17, \'B\', 144.5}   }, *ps;   int main()   {     //求数组长度     int len = sizeof(stus) / sizeof(struct stu);     printf("Name\\t\\tNum\\tAge\\tGroup\\tScore\\t\\n");     for(ps=stus; ps<stus+len; ps++){       printf("%s\\t%d\\t%d\\t%c\\t%.1f\\n", ps->name, ps->num, ps->age, ps->group, ps->score);   }   return 0; } 结果：   Name            Num     Age     Group   Score   Zhou ping       5       18      C       145.0   Zhang ping      4       19      A       130.5   Liu fang        1       18      A       148.5   Cheng ling      2       17      F       139.0   Wang ming       3       17      B       144.5 ```  结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。  结构体指针为参数时的使用方法:  ```   #include <stdio.h>   struct stu   {     char *name;  //姓名     int num;  //学号     int age;  //年龄     char group;  //所在小组     float score;  //成绩   }stus[] = {     {"Li ping", 5, 18, \'C\', 145.0},     {"Zhang ping", 4, 19, \'A\', 130.5},     {"He fang", 1, 18, \'A\', 148.5},     {"Cheng ling", 2, 17, \'F\', 139.0},     {"Wang ming", 3, 17, \'B\', 144.5}   };   void average(struct stu *ps, int len);   int main(){     int len = sizeof(stus) / sizeof(struct stu);     average(stus, len);     return 0;   }   void average(struct stu *ps, int len)   {     int i, num_140 = 0;     float average, sum = 0;     for(i=0; i<len; i++){         sum += (ps + i) -> score;         if((ps + i)->score < 140) num_140++;     }     printf("sum=%.2f\\naverage=%.2f\\nnum_140=%d\\n", sum, sum/5, num_140);   } 结果：   sum=707.50   average=141.50   num_140=2 ```  #### 4. 了解共用体类型的定义方法,以及共用体变量的定义、初始化和成员引用的方法  [共用体的使用参见此链接](http://c.biancheng.net/view/2035.html)  #### 5. 会正确使用 typedef 语句定义新的类型名  在十大类第一节已详细说明，在此就不赘述了  ## 十一、位运算  #### 1. 理解各种位运算符的含义,掌握各种位运算的运算规则和特点  #### 2. 会正确分析简单的位运算程序,会正确使用位运算实现清零、置 1、保留、移位等功能  ```  ``` '},{title:"英语专接本词汇",path:"/posts/%E8%8B%B1%E8%AF%AD%E4%B8%93%E6%8E%A5%E6%9C%AC%E8%AF%8D%E6%B1%87.html",strippedContent:" 之前的链接 现已换为   [专接本词汇](https://lambertlt.github.io/learn-english/) "}]}}]);